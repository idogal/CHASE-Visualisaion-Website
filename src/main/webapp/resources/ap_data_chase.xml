<Authors_Publications>
  <Author_Publication>
    <Paper_API_Id>10001</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Software development contracts: The impact of the provider’s risk of financial loss on project success 
</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>magne jorgensen</Author_Name>
    <Author_Id>-2043312970</Author_Id>
    <All_Authors>magne jorgensen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10002</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>A Preliminary Evaluation of a Gamification Framework to Jump Start Collaboration Behavior Change</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>fernando figueira filho</Author_Name>
    <Author_Id>1395672471</Author_Id>
    <All_Authors>fernando figueira filho</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10003</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Characterization of Autonomy and Interdependence in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>marcela p oliveira</Author_Name>
    <Author_Id>1009295482</Author_Id>
    <All_Authors>marcela p oliveira, karla m b silva, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10003</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Characterization of Autonomy and Interdependence in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>karla m b silva</Author_Name>
    <Author_Id>-1759307554</Author_Id>
    <All_Authors>marcela p oliveira, karla m b silva, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10003</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Characterization of Autonomy and Interdependence in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>itanaua f barbosa</Author_Name>
    <Author_Id>-912210636</Author_Id>
    <All_Authors>marcela p oliveira, karla m b silva, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10003</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Characterization of Autonomy and Interdependence in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>priscila b s reis</Author_Name>
    <Author_Id>-1359303774</Author_Id>
    <All_Authors>marcela p oliveira, karla m b silva, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10004</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Understanding the Relationships between Interdependence and Trust in Software Development: A Qualitative Research</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>tancicleide c s gomes</Author_Name>
    <Author_Id>-311301181</Author_Id>
    <All_Authors>tancicleide c s gomes, marcela p oliveira, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10004</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Understanding the Relationships between Interdependence and Trust in Software Development: A Qualitative Research</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>marcela p oliveira</Author_Name>
    <Author_Id>1009295482</Author_Id>
    <All_Authors>tancicleide c s gomes, marcela p oliveira, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10004</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Understanding the Relationships between Interdependence and Trust in Software Development: A Qualitative Research</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>itanaua f barbosa</Author_Name>
    <Author_Id>-912210636</Author_Id>
    <All_Authors>tancicleide c s gomes, marcela p oliveira, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10004</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Understanding the Relationships between Interdependence and Trust in Software Development: A Qualitative Research</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>priscila b s reis</Author_Name>
    <Author_Id>-1359303774</Author_Id>
    <All_Authors>tancicleide c s gomes, marcela p oliveira, itanaua f barbosa, priscila b s reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10005</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>ID3P: Iterative Data-Driven Development of Persona based on quantitative evaluation and revision</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>yasuhiro watanabe</Author_Name>
    <Author_Id>1775726322</Author_Id>
    <All_Authors>yasuhiro watanabe, hironori washizaki, aoi morizuki, hiroyuki shibata</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10005</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>ID3P: Iterative Data-Driven Development of Persona based on quantitative evaluation and revision</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>hironori washizaki</Author_Name>
    <Author_Id>-1760068525</Author_Id>
    <All_Authors>yasuhiro watanabe, hironori washizaki, aoi morizuki, hiroyuki shibata</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10005</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>ID3P: Iterative Data-Driven Development of Persona based on quantitative evaluation and revision</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>aoi morizuki</Author_Name>
    <Author_Id>660356905</Author_Id>
    <All_Authors>yasuhiro watanabe, hironori washizaki, aoi morizuki, hiroyuki shibata</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10005</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>ID3P: Iterative Data-Driven Development of Persona based on quantitative evaluation and revision</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>hiroyuki shibata</Author_Name>
    <Author_Id>-1796620152</Author_Id>
    <All_Authors>yasuhiro watanabe, hironori washizaki, aoi morizuki, hiroyuki shibata</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10006</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>A forth explanation to Brooks' Law - The aspect of group developmental psychology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>lucas gren</Author_Name>
    <Affiliation_Name>Chalmers University of Technology and, The University of Gothenburg</Affiliation_Name>
    <Author_Id>1494204174</Author_Id>
    <All_Authors>lucas gren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10007</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Tailoring Gamification to Requirements Elicitation: A Stakeholder Centric Motivation Concept</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>martina z huber kolpondinos</Author_Name>
    <Author_Id>-1932642990</Author_Id>
    <All_Authors>martina z huber kolpondinos, martin glinz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10007</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Tailoring Gamification to Requirements Elicitation: A Stakeholder Centric Motivation Concept</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>martin glinz</Author_Name>
    <Author_Id>-1497414207</Author_Id>
    <All_Authors>martina z huber kolpondinos, martin glinz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10008</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Beyond dashboards: on the many facets of metrics and feedback in agile organizations</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>olivier liechti</Author_Name>
    <Affiliation_Name>University of Applied Sciences and Arts Western Switzerland</Affiliation_Name>
    <Author_Id>-102091183</Author_Id>
    <All_Authors>olivier liechti, jacques pasquier, rodney reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10008</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Beyond dashboards: on the many facets of metrics and feedback in agile organizations</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>jacques pasquier</Author_Name>
    <Affiliation_Name>Fribourg Univesity</Affiliation_Name>
    <Author_Id>-95480960</Author_Id>
    <All_Authors>olivier liechti, jacques pasquier, rodney reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10008</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Beyond dashboards: on the many facets of metrics and feedback in agile organizations</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>rodney reis</Author_Name>
    <Affiliation_Name>Avalia Systems</Affiliation_Name>
    <Author_Id>1487040052</Author_Id>
    <All_Authors>olivier liechti, jacques pasquier, rodney reis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10009</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Team Maturity in Software Engineering Teams: a Work in Progress</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>diana valenca pereira</Author_Name>
    <Author_Id>-1081200776</Author_Id>
    <All_Authors>diana valenca pereira, george marsicano correa, fabio q b da silva, danilo monteiro ribeiro, diana valenca pereira, george marsicano correa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10009</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Team Maturity in Software Engineering Teams: a Work in Progress</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>george marsicano correa</Author_Name>
    <Author_Id>1954334218</Author_Id>
    <All_Authors>diana valenca pereira, george marsicano correa, fabio q b da silva, danilo monteiro ribeiro, diana valenca pereira, george marsicano correa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10009</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Team Maturity in Software Engineering Teams: a Work in Progress</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>fabio q b da silva</Author_Name>
    <Author_Id>-1272796965</Author_Id>
    <All_Authors>diana valenca pereira, george marsicano correa, fabio q b da silva, danilo monteiro ribeiro, diana valenca pereira, george marsicano correa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10009</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Team Maturity in Software Engineering Teams: a Work in Progress</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>danilo monteiro ribeiro</Author_Name>
    <Author_Id>-809379657</Author_Id>
    <All_Authors>diana valenca pereira, george marsicano correa, fabio q b da silva, danilo monteiro ribeiro, diana valenca pereira, george marsicano correa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10009</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Team Maturity in Software Engineering Teams: a Work in Progress</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>diana valenca pereira</Author_Name>
    <Author_Id>-1081149604</Author_Id>
    <All_Authors>diana valenca pereira, george marsicano correa, fabio q b da silva, danilo monteiro ribeiro, diana valenca pereira, george marsicano correa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10009</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Team Maturity in Software Engineering Teams: a Work in Progress</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>george marsicano correa</Author_Name>
    <Author_Id>909952525</Author_Id>
    <All_Authors>diana valenca pereira, george marsicano correa, fabio q b da silva, danilo monteiro ribeiro, diana valenca pereira, george marsicano correa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10010</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Using Gamification to Orient and Motivate Students to Contribute to OSS projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>guilherme c diniz</Author_Name>
    <Affiliation_Name>Computing Department Federal University of Technology - Parana? Campo Moura?o</Affiliation_Name>
    <Author_Id>1821539489</Author_Id>
    <All_Authors>guilherme c diniz, marco a graciotto silva, marco a gerosa, igor steinmacher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10010</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Using Gamification to Orient and Motivate Students to Contribute to OSS projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>marco a graciotto silva</Author_Name>
    <Affiliation_Name>Computing Department Federal University of Technology - Parana? Campo Moura?o</Affiliation_Name>
    <Author_Id>1852492400</Author_Id>
    <All_Authors>guilherme c diniz, marco a graciotto silva, marco a gerosa, igor steinmacher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10010</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Using Gamification to Orient and Motivate Students to Contribute to OSS projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>marco a gerosa</Author_Name>
    <Affiliation_Name>School of Informatics, Computing, and Cyber Systems Northern Arizona University Flagstaff</Affiliation_Name>
    <Author_Id>-2130627956</Author_Id>
    <All_Authors>guilherme c diniz, marco a graciotto silva, marco a gerosa, igor steinmacher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10010</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Using Gamification to Orient and Motivate Students to Contribute to OSS projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>igor steinmacher</Author_Name>
    <Affiliation_Name>Computing Department Federal University of Technology - Parana? Campo Moura?o</Affiliation_Name>
    <Author_Id>753110391</Author_Id>
    <All_Authors>guilherme c diniz, marco a graciotto silva, marco a gerosa, igor steinmacher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10011</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Inadequate Testing, Time Pressure, and (Over) Confidence: A Tale from CI Users</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>gustavo pinto</Author_Name>
    <Affiliation_Name>Federal Institute of Para ?</Affiliation_Name>
    <Author_Id>-867292393</Author_Id>
    <All_Authors>gustavo pinto, marcel reboucas, fernando castor</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10011</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Inadequate Testing, Time Pressure, and (Over) Confidence: A Tale from CI Users</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>marcel reboucas</Author_Name>
    <Author_Id>-1215048592</Author_Id>
    <All_Authors>gustavo pinto, marcel reboucas, fernando castor</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10011</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Inadequate Testing, Time Pressure, and (Over) Confidence: A Tale from CI Users</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>fernando castor</Author_Name>
    <Affiliation_Name>Federal University of Pernambuco</Affiliation_Name>
    <Author_Id>-1252794582</Author_Id>
    <All_Authors>gustavo pinto, marcel reboucas, fernando castor</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10012</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Collaborating with Software Engineers: Perspectives from Non-Software Experts</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>paul luo li</Author_Name>
    <Affiliation_Name>Microsoft</Affiliation_Name>
    <Author_Id>1226950102</Author_Id>
    <All_Authors>paul luo li, andrew j ko, andrew begel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10012</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Collaborating with Software Engineers: Perspectives from Non-Software Experts</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>andrew j ko</Author_Name>
    <Affiliation_Name>The Information School, University of Washington</Affiliation_Name>
    <Author_Id>-749542892</Author_Id>
    <All_Authors>paul luo li, andrew j ko, andrew begel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10012</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Collaborating with Software Engineers: Perspectives from Non-Software Experts</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>andrew begel</Author_Name>
    <Affiliation_Name>Microsoft Research</Affiliation_Name>
    <Author_Id>-551918254</Author_Id>
    <All_Authors>paul luo li, andrew j ko, andrew begel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10013</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>The Tech-Talk Balance: What Technical Interviewers Expect from Technical Candidates</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>denae ford</Author_Name>
    <Author_Id>-2030620695</Author_Id>
    <All_Authors>denae ford, titus barik, leslie rand-pickett, chris parnin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10013</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>The Tech-Talk Balance: What Technical Interviewers Expect from Technical Candidates</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>titus barik</Author_Name>
    <Author_Id>-836765613</Author_Id>
    <All_Authors>denae ford, titus barik, leslie rand-pickett, chris parnin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10013</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>The Tech-Talk Balance: What Technical Interviewers Expect from Technical Candidates</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>leslie rand-pickett</Author_Name>
    <Author_Id>137633700</Author_Id>
    <All_Authors>denae ford, titus barik, leslie rand-pickett, chris parnin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10013</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>The Tech-Talk Balance: What Technical Interviewers Expect from Technical Candidates</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>chris parnin</Author_Name>
    <Author_Id>-1855977250</Author_Id>
    <All_Authors>denae ford, titus barik, leslie rand-pickett, chris parnin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10014</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Motivation for Self-Assignment: A Case Study of Factors Agile Developers Consider</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>zainab masood</Author_Name>
    <Affiliation_Name>SEPTA Research, Department of Electrical and Computer Engineering, The University of Auckland Auckla</Affiliation_Name>
    <Author_Id>390459053</Author_Id>
    <All_Authors>zainab masood, rashina hoda, kelly blincoe</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10014</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Motivation for Self-Assignment: A Case Study of Factors Agile Developers Consider</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>rashina hoda</Author_Name>
    <Affiliation_Name>SEPTA Research, Department of Electrical and Computer Engineering, The University of Auckland Auckla</Affiliation_Name>
    <Author_Id>-741603622</Author_Id>
    <All_Authors>zainab masood, rashina hoda, kelly blincoe</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10014</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Motivation for Self-Assignment: A Case Study of Factors Agile Developers Consider</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>kelly blincoe</Author_Name>
    <Affiliation_Name>SEPTA Research, Department of Electrical and Computer Engineering, The University of Auckland Auckla</Affiliation_Name>
    <Author_Id>-854820014</Author_Id>
    <All_Authors>zainab masood, rashina hoda, kelly blincoe</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10015</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Intertemporal choices in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>christoph becker</Author_Name>
    <Author_Id>-1323381649</Author_Id>
    <All_Authors>christoph becker, dawn walker, curtis mccord</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10015</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Intertemporal choices in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>dawn walker</Author_Name>
    <Author_Id>-2053712483</Author_Id>
    <All_Authors>christoph becker, dawn walker, curtis mccord</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10015</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Intertemporal choices in Software Engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>curtis mccord</Author_Name>
    <Author_Id>256223152</Author_Id>
    <All_Authors>christoph becker, dawn walker, curtis mccord</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10016</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>What do Developers want? An Advisor approach for Developer Priorities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>vibhu saujanya sharma</Author_Name>
    <Affiliation_Name>Accenture Labs</Affiliation_Name>
    <Author_Id>-1800506840</Author_Id>
    <All_Authors>vibhu saujanya sharma, rohit mehra, vikrant kaulgud</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10016</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>What do Developers want? An Advisor approach for Developer Priorities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>rohit mehra</Author_Name>
    <Affiliation_Name>Accenture Labs</Affiliation_Name>
    <Author_Id>-662235505</Author_Id>
    <All_Authors>vibhu saujanya sharma, rohit mehra, vikrant kaulgud</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10016</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>What do Developers want? An Advisor approach for Developer Priorities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>vikrant kaulgud</Author_Name>
    <Affiliation_Name>Accenture Labs</Affiliation_Name>
    <Author_Id>915026210</Author_Id>
    <All_Authors>vibhu saujanya sharma, rohit mehra, vikrant kaulgud</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10017</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Effective Teams for the Identification of Code Smells</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>rafael de mello</Author_Name>
    <Affiliation_Name>Department of Informatics PUC-Rio Rio de Janeiro</Affiliation_Name>
    <Author_Id>-2015879795</Author_Id>
    <All_Authors>rafael de mello, roberto oliveira, leonardo sousa, alessandro garcia</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10017</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Effective Teams for the Identification of Code Smells</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>roberto oliveira</Author_Name>
    <Affiliation_Name>Department of Informatics PUC-Rio Rio de Janeiro</Affiliation_Name>
    <Author_Id>1513862153</Author_Id>
    <All_Authors>rafael de mello, roberto oliveira, leonardo sousa, alessandro garcia</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10017</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Effective Teams for the Identification of Code Smells</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>leonardo sousa</Author_Name>
    <Affiliation_Name>Department of Informatics PUC-Rio Rio de Janeiro</Affiliation_Name>
    <Author_Id>1540798712</Author_Id>
    <All_Authors>rafael de mello, roberto oliveira, leonardo sousa, alessandro garcia</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10017</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Towards Effective Teams for the Identification of Code Smells</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>alessandro garcia</Author_Name>
    <Affiliation_Name>Department of Informatics PUC-Rio Rio de Janeiro</Affiliation_Name>
    <Author_Id>-1484225177</Author_Id>
    <All_Authors>rafael de mello, roberto oliveira, leonardo sousa, alessandro garcia</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10018</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Is it Possible to Disregard Obsolete Requirements? - An Initial Experiment on a Potentially New Bias in Software Effort Estimation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>lucas gren</Author_Name>
    <Affiliation_Name>Chalmers University of Technology and, The University of Gothenburg</Affiliation_Name>
    <Author_Id>1494204174</Author_Id>
    <All_Authors>lucas gren, richard berntsson svensson, michael unterkalmsteiner</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10018</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Is it Possible to Disregard Obsolete Requirements? - An Initial Experiment on a Potentially New Bias in Software Effort Estimation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>richard berntsson svensson</Author_Name>
    <Author_Id>1491416011</Author_Id>
    <All_Authors>lucas gren, richard berntsson svensson, michael unterkalmsteiner</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10018</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Is it Possible to Disregard Obsolete Requirements? - An Initial Experiment on a Potentially New Bias in Software Effort Estimation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>michael unterkalmsteiner</Author_Name>
    <Author_Id>-440417666</Author_Id>
    <All_Authors>lucas gren, richard berntsson svensson, michael unterkalmsteiner</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10019</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Patterns of Identity and Interaction in an Evolving Agile Workplace</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>shreya kumar</Author_Name>
    <Affiliation_Name>Department of Computer Science and Engineering, University of Notre Dame</Affiliation_Name>
    <Author_Id>1016304546</Author_Id>
    <All_Authors>shreya kumar, charles wallace</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>10019</Paper_API_Id>
    <Paper_Year>2017</Paper_Year>
    <Display_Name>Patterns of Identity and Interaction in an Evolving Agile Workplace</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Author_Name>charles wallace</Author_Name>
    <Affiliation_Name>Department of Computer Science, Michigan Technological University</Affiliation_Name>
    <Author_Id>-770525805</Author_Id>
    <All_Authors>shreya kumar, charles wallace</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1963555928</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>40</Citations_Count>
    <Display_Name>Towards individualized software engineering: empirical studies should collect psychometrics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370127</DOI>
    <Abstract>Even though software is developed by humans, research in software engineering primarily focuses on the technologies, methods and processes they use while disregarding the importance of the humans themselves. In this paper we argue that most studies in software engineering should give much more weight to human factors. In particular empirical software engineering studies involving human developers should always consider collecting psychometric data on the humans involved. We focus on personality as one important psychometric factor and present initial results from an empirical study investigating correlations between personality and attitudes to software engineering processes and tools. We discuss what are currently hindering a more wide-spread use of psychometrics and how overcoming these hurdles could lead to a more individualized software engineering.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>richard torkar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>1997343119</Author_Id>
    <All_Authors>richard torkar, robert feldt, lefteris angelis, maria jansdotter samuelsson</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1963555928</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>40</Citations_Count>
    <Display_Name>Towards individualized software engineering: empirical studies should collect psychometrics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370127</DOI>
    <Abstract>Even though software is developed by humans, research in software engineering primarily focuses on the technologies, methods and processes they use while disregarding the importance of the humans themselves. In this paper we argue that most studies in software engineering should give much more weight to human factors. In particular empirical software engineering studies involving human developers should always consider collecting psychometric data on the humans involved. We focus on personality as one important psychometric factor and present initial results from an empirical study investigating correlations between personality and attitudes to software engineering processes and tools. We discuss what are currently hindering a more wide-spread use of psychometrics and how overcoming these hurdles could lead to a more individualized software engineering.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>robert feldt</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2034354864</Author_Id>
    <All_Authors>richard torkar, robert feldt, lefteris angelis, maria jansdotter samuelsson</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1963555928</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>40</Citations_Count>
    <Display_Name>Towards individualized software engineering: empirical studies should collect psychometrics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370127</DOI>
    <Abstract>Even though software is developed by humans, research in software engineering primarily focuses on the technologies, methods and processes they use while disregarding the importance of the humans themselves. In this paper we argue that most studies in software engineering should give much more weight to human factors. In particular empirical software engineering studies involving human developers should always consider collecting psychometric data on the humans involved. We focus on personality as one important psychometric factor and present initial results from an empirical study investigating correlations between personality and attitudes to software engineering processes and tools. We discuss what are currently hindering a more wide-spread use of psychometrics and how overcoming these hurdles could lead to a more individualized software engineering.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>lefteris angelis</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>aristotle university of thessaloniki</Affiliation_Name>
    <Author_Id>2124522248</Author_Id>
    <All_Authors>richard torkar, robert feldt, lefteris angelis, maria jansdotter samuelsson</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1963555928</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>40</Citations_Count>
    <Display_Name>Towards individualized software engineering: empirical studies should collect psychometrics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370127</DOI>
    <Abstract>Even though software is developed by humans, research in software engineering primarily focuses on the technologies, methods and processes they use while disregarding the importance of the humans themselves. In this paper we argue that most studies in software engineering should give much more weight to human factors. In particular empirical software engineering studies involving human developers should always consider collecting psychometric data on the humans involved. We focus on personality as one important psychometric factor and present initial results from an empirical study investigating correlations between personality and attitudes to software engineering processes and tools. We discuss what are currently hindering a more wide-spread use of psychometrics and how overcoming these hurdles could lead to a more individualized software engineering.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>maria jansdotter samuelsson</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university college west</Affiliation_Name>
    <Author_Id>2200194526</Author_Id>
    <All_Authors>richard torkar, robert feldt, lefteris angelis, maria jansdotter samuelsson</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964096253</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Perceptions of answer quality in an online technical question and answer forum</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593703</DOI>
    <Abstract>Software developers are used to seeking information from authoritative texts, such as a technical manuals, or from experts with whom they are familiar. Increasingly, developers seek information in online question and answer forums, where the quality of the information is variable. To a novice, it may be challenging to filter good information from bad. Stack Overflow is a Q&amp;A forum that introduces a social reputation element: users rate the quality of post-ed answers, and answerers can accrue points and rewards for writing answers that are rated highly by their peers. A user that consistently authors good answers will develop a good ‘reputation’ as recorded by these points. While this system was designed with the intent to incentivize high-quality answers, it has been suggested that information seekers—and particularly technical novices—may rely on the social reputation of the answerer as a proxy for answer quality. In this paper, we investigate the role that this social factor—as well as other answer characteristics—plays in the information filtering process of technical novices in the context of Stack Over-flow. The results of our survey conducted on Amazon.com’s Mechanical Turk indicate that technical novices assess information quality based on the intrinsic qualities of the answer, such as presentation and content, suggesting that novices are wary to rely on social cues in the Q&amp;A context.</Abstract>
    <Abstract_Length>217</Abstract_Length>
    <Author_Name>anita sarma</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of nebraska lincoln</Affiliation_Name>
    <Author_Id>2150694261</Author_Id>
    <All_Authors>anita sarma, kerry hart</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964096253</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Perceptions of answer quality in an online technical question and answer forum</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593703</DOI>
    <Abstract>Software developers are used to seeking information from authoritative texts, such as a technical manuals, or from experts with whom they are familiar. Increasingly, developers seek information in online question and answer forums, where the quality of the information is variable. To a novice, it may be challenging to filter good information from bad. Stack Overflow is a Q&amp;A forum that introduces a social reputation element: users rate the quality of post-ed answers, and answerers can accrue points and rewards for writing answers that are rated highly by their peers. A user that consistently authors good answers will develop a good ‘reputation’ as recorded by these points. While this system was designed with the intent to incentivize high-quality answers, it has been suggested that information seekers—and particularly technical novices—may rely on the social reputation of the answerer as a proxy for answer quality. In this paper, we investigate the role that this social factor—as well as other answer characteristics—plays in the information filtering process of technical novices in the context of Stack Over-flow. The results of our survey conducted on Amazon.com’s Mechanical Turk indicate that technical novices assess information quality based on the intrinsic qualities of the answer, such as presentation and content, suggesting that novices are wary to rely on social cues in the Q&amp;A context.</Abstract>
    <Abstract_Length>217</Abstract_Length>
    <Author_Name>kerry hart</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of nebraska lincoln</Affiliation_Name>
    <Author_Id>2228136846</Author_Id>
    <All_Authors>anita sarma, kerry hart</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964823574</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Shared visual attention in collaborative programming: a descriptive analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833314</DOI>
    <Abstract>This paper reports on the initial results of an eye-tracking research of collaborative program development, more particularly, in the case of pair programming. An eight-weeks long empirical study was conducted in industrial-like settings. The study focuses on investigating the interplay between pair-programming productivity and recorded developers' eye movements. We also evaluate a previously developed collaborative eye-tracking framework, which is capable of tracking two participants simultaneously, and we discuss the issues related to it. We present a descriptive analysis of shared visual attention during pair programming by combining data from eye-tracking and verbal protocols, and propose new eye tracking metrics. Finally, we outline the implications of the findings.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>sami pietinen</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of eastern finland</Affiliation_Name>
    <Author_Id>238091211</Author_Id>
    <All_Authors>sami pietinen, roman bednarik, markku tukiainen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964823574</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Shared visual attention in collaborative programming: a descriptive analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833314</DOI>
    <Abstract>This paper reports on the initial results of an eye-tracking research of collaborative program development, more particularly, in the case of pair programming. An eight-weeks long empirical study was conducted in industrial-like settings. The study focuses on investigating the interplay between pair-programming productivity and recorded developers' eye movements. We also evaluate a previously developed collaborative eye-tracking framework, which is capable of tracking two participants simultaneously, and we discuss the issues related to it. We present a descriptive analysis of shared visual attention during pair programming by combining data from eye-tracking and verbal protocols, and propose new eye tracking metrics. Finally, we outline the implications of the findings.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>roman bednarik</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of eastern finland</Affiliation_Name>
    <Author_Id>1992092774</Author_Id>
    <All_Authors>sami pietinen, roman bednarik, markku tukiainen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964823574</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Shared visual attention in collaborative programming: a descriptive analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833314</DOI>
    <Abstract>This paper reports on the initial results of an eye-tracking research of collaborative program development, more particularly, in the case of pair programming. An eight-weeks long empirical study was conducted in industrial-like settings. The study focuses on investigating the interplay between pair-programming productivity and recorded developers' eye movements. We also evaluate a previously developed collaborative eye-tracking framework, which is capable of tracking two participants simultaneously, and we discuss the issues related to it. We present a descriptive analysis of shared visual attention during pair programming by combining data from eye-tracking and verbal protocols, and propose new eye tracking metrics. Finally, we outline the implications of the findings.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>markku tukiainen</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of eastern finland</Affiliation_Name>
    <Author_Id>2134977155</Author_Id>
    <All_Authors>sami pietinen, roman bednarik, markku tukiainen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964885079</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>An exploratory study of backtracking strategies used by developers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223012</DOI>
    <Abstract>Developers frequently backtrack while coding. They go back to an earlier state by removing inserted code or by restoring removed code for various reasons. However, little is known about when and how the developers backtrack, and modern IDEs do not provide much assistance for backtracking. As a first step towards gathering baseline knowledge about backtracking and designing more robust backtracking assistance tools in modern IDEs, we conducted an exploratory study with 12 professional developers and a follow-up online survey. Our study revealed several barriers they faced while backtracking. Subjects often manually commented and uncommented code, and often had difficulty finding relevant parts to backtrack. Backtracking was reported to be needed by 3/4 of the developers at least "sometimes".</Abstract>
    <Abstract_Length>118</Abstract_Length>
    <Author_Name>brad a myers</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2117127927</Author_Id>
    <All_Authors>brad a myers, young seok yoon</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1964885079</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>An exploratory study of backtracking strategies used by developers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223012</DOI>
    <Abstract>Developers frequently backtrack while coding. They go back to an earlier state by removing inserted code or by restoring removed code for various reasons. However, little is known about when and how the developers backtrack, and modern IDEs do not provide much assistance for backtracking. As a first step towards gathering baseline knowledge about backtracking and designing more robust backtracking assistance tools in modern IDEs, we conducted an exploratory study with 12 professional developers and a follow-up online survey. Our study revealed several barriers they faced while backtracking. Subjects often manually commented and uncommented code, and often had difficulty finding relevant parts to backtrack. Backtracking was reported to be needed by 3/4 of the developers at least "sometimes".</Abstract>
    <Abstract_Length>118</Abstract_Length>
    <Author_Name>young seok yoon</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2138103681</Author_Id>
    <All_Authors>brad a myers, young seok yoon</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1965509291</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Ask the engineers: exploring repertory grids and personal constructs for software data analysis</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.25</DOI>
    <Abstract>Maturity in software projects is often equated with data-driven predictability. However, data collection is expensive and measuring all variables that may correlate with project outcome is neither practical nor feasible. In contrast, a project engineer can identify a handful of factors that he or she believes influence the success of a project. The challenge is to quantify engineers' insights in a way that is useful for data analysis. In this exploratory study, we investigate the repertory grid technique for this purpose.   The repertory grid technique is an interview-based procedure for eliciting "constructs" (e.g., adhering to coding standards) that individuals believe influence a worldly phenomenon (e.g., what makes a high-quality software project) by comparing example elements from their past (e.g., projects they have worked on). We investigate the relationship between objective metrics of project performance and repertory grid constructs elicited from eight software engineers. Our results show correlations between the engineers' subjective constructs and the objective project outcome measures. This suggests that repertory grids may be of benefit in developing models of project outcomes, particularly when project data is limited.</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>davide falessi</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>89514681</Author_Id>
    <All_Authors>davide falessi, madeline diep, carolyn b seaman, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1965509291</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Ask the engineers: exploring repertory grids and personal constructs for software data analysis</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.25</DOI>
    <Abstract>Maturity in software projects is often equated with data-driven predictability. However, data collection is expensive and measuring all variables that may correlate with project outcome is neither practical nor feasible. In contrast, a project engineer can identify a handful of factors that he or she believes influence the success of a project. The challenge is to quantify engineers' insights in a way that is useful for data analysis. In this exploratory study, we investigate the repertory grid technique for this purpose.   The repertory grid technique is an interview-based procedure for eliciting "constructs" (e.g., adhering to coding standards) that individuals believe influence a worldly phenomenon (e.g., what makes a high-quality software project) by comparing example elements from their past (e.g., projects they have worked on). We investigate the relationship between objective metrics of project performance and repertory grid constructs elicited from eight software engineers. Our results show correlations between the engineers' subjective constructs and the objective project outcome measures. This suggests that repertory grids may be of benefit in developing models of project outcomes, particularly when project data is limited.</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>madeline diep</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2008400948</Author_Id>
    <All_Authors>davide falessi, madeline diep, carolyn b seaman, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1965509291</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Ask the engineers: exploring repertory grids and personal constructs for software data analysis</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.25</DOI>
    <Abstract>Maturity in software projects is often equated with data-driven predictability. However, data collection is expensive and measuring all variables that may correlate with project outcome is neither practical nor feasible. In contrast, a project engineer can identify a handful of factors that he or she believes influence the success of a project. The challenge is to quantify engineers' insights in a way that is useful for data analysis. In this exploratory study, we investigate the repertory grid technique for this purpose.   The repertory grid technique is an interview-based procedure for eliciting "constructs" (e.g., adhering to coding standards) that individuals believe influence a worldly phenomenon (e.g., what makes a high-quality software project) by comparing example elements from their past (e.g., projects they have worked on). We investigate the relationship between objective metrics of project performance and repertory grid constructs elicited from eight software engineers. Our results show correlations between the engineers' subjective constructs and the objective project outcome measures. This suggests that repertory grids may be of benefit in developing models of project outcomes, particularly when project data is limited.</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>carolyn b seaman</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2311345609</Author_Id>
    <All_Authors>davide falessi, madeline diep, carolyn b seaman, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1965509291</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Ask the engineers: exploring repertory grids and personal constructs for software data analysis</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.25</DOI>
    <Abstract>Maturity in software projects is often equated with data-driven predictability. However, data collection is expensive and measuring all variables that may correlate with project outcome is neither practical nor feasible. In contrast, a project engineer can identify a handful of factors that he or she believes influence the success of a project. The challenge is to quantify engineers' insights in a way that is useful for data analysis. In this exploratory study, we investigate the repertory grid technique for this purpose.   The repertory grid technique is an interview-based procedure for eliciting "constructs" (e.g., adhering to coding standards) that individuals believe influence a worldly phenomenon (e.g., what makes a high-quality software project) by comparing example elements from their past (e.g., projects they have worked on). We investigate the relationship between objective metrics of project performance and repertory grid constructs elicited from eight software engineers. Our results show correlations between the engineers' subjective constructs and the objective project outcome measures. This suggests that repertory grids may be of benefit in developing models of project outcomes, particularly when project data is limited.</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>lucas layman</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2321349852</Author_Id>
    <All_Authors>davide falessi, madeline diep, carolyn b seaman, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1965604881</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Toward defining the role of the software architect: an examination of the soft aspects of this role</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <Abstract>Software architecture is integral part of the software development; however, its integration in the development process has become more challenging with the transition from traditional to agile development methods, and with the architects becoming much more than technological experts responsible for high-level design. Some attention has been paid in recent years to the role of the architect, seeking a contemporary and comprehensive definition of this role. This paper reports on the results of an online survey, with the participation of 104 software architects, aimed at defining the soft aspects of the software architect's role. The results reveal that architects perform a variety of human-centered activities such as mentoring, leadership, reviewing and management, Moreover, in the contexts of mentoring and leadership, software architects strive to do more than they currently do.</Abstract>
    <Abstract_Length>130</Abstract_Length>
    <Author_Name>irit hadar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>1246307506</Author_Id>
    <All_Authors>irit hadar, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1965604881</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Toward defining the role of the software architect: an examination of the soft aspects of this role</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <Abstract>Software architecture is integral part of the software development; however, its integration in the development process has become more challenging with the transition from traditional to agile development methods, and with the architects becoming much more than technological experts responsible for high-level design. Some attention has been paid in recent years to the role of the architect, seeking a contemporary and comprehensive definition of this role. This paper reports on the results of an online survey, with the participation of 104 software architects, aimed at defining the soft aspects of the software architect's role. The results reveal that architects perform a variety of human-centered activities such as mentoring, leadership, reviewing and management, Moreover, in the contexts of mentoring and leadership, software architects strive to do more than they currently do.</Abstract>
    <Abstract_Length>130</Abstract_Length>
    <Author_Name>sofia sherman</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>2127504616</Author_Id>
    <All_Authors>irit hadar, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1966725869</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>The "pair" as a problematic unit of analysis for pair programming</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.16</DOI>
    <Abstract>This paper explores the problematic nature of using an isolated pair as the unit of analysis in studies and evaluations of pair programming. Using empirical data from an observational case study within a software development organization, we show pairs spending 20% of their pairing time interacting with people outside the pair. These interactions, which are encouraged by this organization as part of its highly collaborative system, represent important value exchanges with people outside the pair. This suggests that research on pairs in isolation may not be indicative of how pair programming works in situ when enacted by teams accomplished in the practice, and may misrepresent the net value proposition of pair programming.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>david socha</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of washington bothell</Affiliation_Name>
    <Author_Id>2015071743</Author_Id>
    <All_Authors>david socha, kevin sutanto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1966725869</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>The "pair" as a problematic unit of analysis for pair programming</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.16</DOI>
    <Abstract>This paper explores the problematic nature of using an isolated pair as the unit of analysis in studies and evaluations of pair programming. Using empirical data from an observational case study within a software development organization, we show pairs spending 20% of their pairing time interacting with people outside the pair. These interactions, which are encouraged by this organization as part of its highly collaborative system, represent important value exchanges with people outside the pair. This suggests that research on pairs in isolation may not be indicative of how pair programming works in situ when enacted by teams accomplished in the practice, and may misrepresent the net value proposition of pair programming.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>kevin sutanto</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of washington bothell</Affiliation_Name>
    <Author_Id>2222212263</Author_Id>
    <All_Authors>david socha, kevin sutanto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1967005621</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Studying team evolution during software testing</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984660</DOI>
    <Abstract>Software development teams are one of the most dynamic entities of any software development project. While the individuals are assigned planned roles at the start of any project, during the course of the project, the team constitution, structure, relationships and roles change. Such changes are often spontaneous and constitute the evolution of the team along different phases of the software development lifecycle. As software development is a team effort, these dynamics may have a significant effect on the development lifecycle itself. This work is aimed at studying the evolution of project teams and gathering insights that can be correlated with project health and outcomes. In this study we apply social network analysis techniques to investigate team evolution in a project in its testing phase. While the questions and insights that we investigate in this paper are valid and useful for all phases of the software development lifecycle, we have focused on software testing phase as it one of the most critical phases in the lifecycle. Our work aims to provide insights in the changes in team interactions and individual roles as the testing process continues and can help find if the same is aligned to the planned and desired project behavior.</Abstract>
    <Abstract_Length>201</Abstract_Length>
    <Author_Name>vikrant s kaulgud</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>accenture</Affiliation_Name>
    <Author_Id>1453898637</Author_Id>
    <All_Authors>vikrant s kaulgud, vibhu saujanya sharma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1967005621</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Studying team evolution during software testing</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984660</DOI>
    <Abstract>Software development teams are one of the most dynamic entities of any software development project. While the individuals are assigned planned roles at the start of any project, during the course of the project, the team constitution, structure, relationships and roles change. Such changes are often spontaneous and constitute the evolution of the team along different phases of the software development lifecycle. As software development is a team effort, these dynamics may have a significant effect on the development lifecycle itself. This work is aimed at studying the evolution of project teams and gathering insights that can be correlated with project health and outcomes. In this study we apply social network analysis techniques to investigate team evolution in a project in its testing phase. While the questions and insights that we investigate in this paper are valid and useful for all phases of the software development lifecycle, we have focused on software testing phase as it one of the most critical phases in the lifecycle. Our work aims to provide insights in the changes in team interactions and individual roles as the testing process continues and can help find if the same is aligned to the planned and desired project behavior.</Abstract>
    <Abstract_Length>201</Abstract_Length>
    <Author_Name>vibhu saujanya sharma</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>accenture</Affiliation_Name>
    <Author_Id>2149805013</Author_Id>
    <All_Authors>vikrant s kaulgud, vibhu saujanya sharma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1967647918</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Using experimental games to understand communication and trust in Agile software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614745</DOI>
    <Abstract>Trust plays an important role in enabling software development teams to function effectively. Trust between individual team members has been shown to improve the independence of software teams and reduce the amount of project management effort required by those teams. Our main aims are to investigate (i) the impact communication has on trust between team members in Agile software development and (ii) the usefulness of iterated games as an experimental methodology. We use Game Theory in a simulated Agile development environment. We run 28 iterated games with 56 practitioner and student participants. Stand-up meetings are used as the communicat ion in tervent i on compared to games without such meetings to assess the levels o f trust. Our findings are that increased communication has a very large positive effect upon the level of trust between team members in an Agile setting. Our results suggest that communication improves trust in development teams. Opportunities for communication should be built into development processes. Experimental games are a complementary (to qualitative approaches) and effective method for investigating human issues in software engineering.</Abstract>
    <Abstract_Length>178</Abstract_Length>
    <Author_Name>eisha hasnain</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>brunel university london</Affiliation_Name>
    <Author_Id>957835028</Author_Id>
    <All_Authors>eisha hasnain, martin j shepperd, tracy hall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1967647918</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Using experimental games to understand communication and trust in Agile software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614745</DOI>
    <Abstract>Trust plays an important role in enabling software development teams to function effectively. Trust between individual team members has been shown to improve the independence of software teams and reduce the amount of project management effort required by those teams. Our main aims are to investigate (i) the impact communication has on trust between team members in Agile software development and (ii) the usefulness of iterated games as an experimental methodology. We use Game Theory in a simulated Agile development environment. We run 28 iterated games with 56 practitioner and student participants. Stand-up meetings are used as the communicat ion in tervent i on compared to games without such meetings to assess the levels o f trust. Our findings are that increased communication has a very large positive effect upon the level of trust between team members in an Agile setting. Our results suggest that communication improves trust in development teams. Opportunities for communication should be built into development processes. Experimental games are a complementary (to qualitative approaches) and effective method for investigating human issues in software engineering.</Abstract>
    <Abstract_Length>178</Abstract_Length>
    <Author_Name>martin j shepperd</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>brunel university london</Affiliation_Name>
    <Author_Id>2108796795</Author_Id>
    <All_Authors>eisha hasnain, martin j shepperd, tracy hall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1967647918</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Using experimental games to understand communication and trust in Agile software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614745</DOI>
    <Abstract>Trust plays an important role in enabling software development teams to function effectively. Trust between individual team members has been shown to improve the independence of software teams and reduce the amount of project management effort required by those teams. Our main aims are to investigate (i) the impact communication has on trust between team members in Agile software development and (ii) the usefulness of iterated games as an experimental methodology. We use Game Theory in a simulated Agile development environment. We run 28 iterated games with 56 practitioner and student participants. Stand-up meetings are used as the communicat ion in tervent i on compared to games without such meetings to assess the levels o f trust. Our findings are that increased communication has a very large positive effect upon the level of trust between team members in an Agile setting. Our results suggest that communication improves trust in development teams. Opportunities for communication should be built into development processes. Experimental games are a complementary (to qualitative approaches) and effective method for investigating human issues in software engineering.</Abstract>
    <Abstract_Length>178</Abstract_Length>
    <Author_Name>tracy hall</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>brunel university london</Affiliation_Name>
    <Author_Id>2132732281</Author_Id>
    <All_Authors>eisha hasnain, martin j shepperd, tracy hall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1969649640</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>The hard life of open source software project newcomers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593704</DOI>
    <Abstract>While onboarding an open source software (OSS) project, contributors face many different barriers that hinder their contribution, leading in many cases to dropouts. Many projects leverage the contribution of outsiders and the sustainability of the project relies on retaining some of these newcomers. In this paper, we discuss some barriers faced by newcomers to OSS. The barriers were identified using a qualitative analysis on data obtained from newcomers and members of OSS projects. We organize the results in a conceptual model composed of 38 barriers, grouped into seven different categories. These barriers may motivate new studies and the development of appropriate tooling to better support the onboarding of new contributors.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>david f redmiles</Author_Name>
    <Author_Position>5</Author_Position>
    <Author_Id>311754748</Author_Id>
    <All_Authors>david f redmiles, marco aurelio gerosa, igor steinmacher, tayana conte, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1969649640</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>The hard life of open source software project newcomers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593704</DOI>
    <Abstract>While onboarding an open source software (OSS) project, contributors face many different barriers that hinder their contribution, leading in many cases to dropouts. Many projects leverage the contribution of outsiders and the sustainability of the project relies on retaining some of these newcomers. In this paper, we discuss some barriers faced by newcomers to OSS. The barriers were identified using a qualitative analysis on data obtained from newcomers and members of OSS projects. We organize the results in a conceptual model composed of 38 barriers, grouped into seven different categories. These barriers may motivate new studies and the development of appropriate tooling to better support the onboarding of new contributors.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>marco aurelio gerosa</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of sao paulo</Affiliation_Name>
    <Author_Id>1928846911</Author_Id>
    <All_Authors>david f redmiles, marco aurelio gerosa, igor steinmacher, tayana conte, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1969649640</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>The hard life of open source software project newcomers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593704</DOI>
    <Abstract>While onboarding an open source software (OSS) project, contributors face many different barriers that hinder their contribution, leading in many cases to dropouts. Many projects leverage the contribution of outsiders and the sustainability of the project relies on retaining some of these newcomers. In this paper, we discuss some barriers faced by newcomers to OSS. The barriers were identified using a qualitative analysis on data obtained from newcomers and members of OSS projects. We organize the results in a conceptual model composed of 38 barriers, grouped into seven different categories. These barriers may motivate new studies and the development of appropriate tooling to better support the onboarding of new contributors.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>igor steinmacher</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>federal technological university of parana</Affiliation_Name>
    <Author_Id>2000400706</Author_Id>
    <All_Authors>david f redmiles, marco aurelio gerosa, igor steinmacher, tayana conte, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1969649640</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>The hard life of open source software project newcomers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593704</DOI>
    <Abstract>While onboarding an open source software (OSS) project, contributors face many different barriers that hinder their contribution, leading in many cases to dropouts. Many projects leverage the contribution of outsiders and the sustainability of the project relies on retaining some of these newcomers. In this paper, we discuss some barriers faced by newcomers to OSS. The barriers were identified using a qualitative analysis on data obtained from newcomers and members of OSS projects. We organize the results in a conceptual model composed of 38 barriers, grouped into seven different categories. These barriers may motivate new studies and the development of appropriate tooling to better support the onboarding of new contributors.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>tayana conte</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>federal university of amazonas</Affiliation_Name>
    <Author_Id>2142750856</Author_Id>
    <All_Authors>david f redmiles, marco aurelio gerosa, igor steinmacher, tayana conte, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1969649640</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>The hard life of open source software project newcomers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593704</DOI>
    <Abstract>While onboarding an open source software (OSS) project, contributors face many different barriers that hinder their contribution, leading in many cases to dropouts. Many projects leverage the contribution of outsiders and the sustainability of the project relies on retaining some of these newcomers. In this paper, we discuss some barriers faced by newcomers to OSS. The barriers were identified using a qualitative analysis on data obtained from newcomers and members of OSS projects. We organize the results in a conceptual model composed of 38 barriers, grouped into seven different categories. These barriers may motivate new studies and the development of appropriate tooling to better support the onboarding of new contributors.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>igor scaliante wiese</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>federal technological university of parana</Affiliation_Name>
    <Author_Id>2169717386</Author_Id>
    <All_Authors>david f redmiles, marco aurelio gerosa, igor steinmacher, tayana conte, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1971964588</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Gamifying software engineering tasks based on cognitive principles: the case of code review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.21</DOI>
    <Abstract>Code review is an important task in software development. However, performing code review is perceived, for the most part, as an undesired task, presenting several challenges to the required collaboration and knowledge transfer between programmers and reviewers. In order to overcome these challenges and improve the effectiveness of code review, we developed SCRUT: Social Code Review Unifying Tool. By recruiting relevant cognitive theories and implementing gamification elements to motivate collaboration and knowledge sharing between programmers and reviewers, we plan to enhance the task of code review. This paper presents our vision for enhancing software engineering via gamification, and the theoretical cognitive foundation on which this vision is based, starting with the example of code review.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>naomi unkelosshpigel</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>96154798</Author_Id>
    <All_Authors>naomi unkelosshpigel, irit hadar</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1971964588</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Gamifying software engineering tasks based on cognitive principles: the case of code review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.21</DOI>
    <Abstract>Code review is an important task in software development. However, performing code review is perceived, for the most part, as an undesired task, presenting several challenges to the required collaboration and knowledge transfer between programmers and reviewers. In order to overcome these challenges and improve the effectiveness of code review, we developed SCRUT: Social Code Review Unifying Tool. By recruiting relevant cognitive theories and implementing gamification elements to motivate collaboration and knowledge sharing between programmers and reviewers, we plan to enhance the task of code review. This paper presents our vision for enhancing software engineering via gamification, and the theoretical cognitive foundation on which this vision is based, starting with the example of code review.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>irit hadar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>1246307506</Author_Id>
    <All_Authors>naomi unkelosshpigel, irit hadar</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1973581385</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Strawberries are nuts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984652</DOI>
    <Abstract>Separation of concerns is a central element for program comprehension. This note briefly explains why human categorization can be interesting for program comprehension.</Abstract>
    <Abstract_Length>23</Abstract_Length>
    <Author_Name>tim frey</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2161944873</Author_Id>
    <All_Authors>tim frey, marius gelhausen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1973581385</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Strawberries are nuts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984652</DOI>
    <Abstract>Separation of concerns is a central element for program comprehension. This note briefly explains why human categorization can be interesting for program comprehension.</Abstract>
    <Abstract_Length>23</Abstract_Length>
    <Author_Name>marius gelhausen</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>technische universitat darmstadt</Affiliation_Name>
    <Author_Id>2226300939</Author_Id>
    <All_Authors>tim frey, marius gelhausen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1973794876</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Exploring the human and organizational aspects of software cost estimation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833325</DOI>
    <Abstract>Cost estimation is important for planning, scheduling, budgeting and pricing of software development. Previous research has mainly focused on improving estimates and the associated processes. However, there is still a lack of research on human and organizational aspects of cost estimation and informal uses of cost estimates. This paper presents initial findings from a qualitative study addressing these questions. Based on four semi-structured interviews with experienced managers from different software developing organizations we have identified a number of aspects not commonly discussed in the cost estimation literature. The analysis indicates that cost estimates are used not only for prediction and planning, but also play a role in power plays within the organizations based on the stakeholders' differing interests. There are also human and organizational factors that are likely to influence the quality of estimates.   We also suggest a basic taxonomy of attributes that could be used to structure the many issues involved in and affecting software cost estimation. We conclude that there are many factors that affect software cost estimation and need to be considered in future research. Longer-term this is important not only for cost estimation but can also be useful to understand how human and organizational factors affect software development processes in general.</Abstract>
    <Abstract_Length>207</Abstract_Length>
    <Author_Name>ana magazinius</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>chalmers university of technology</Affiliation_Name>
    <Author_Id>1094660660</Author_Id>
    <All_Authors>ana magazinius, robert feldt</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1973794876</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Exploring the human and organizational aspects of software cost estimation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833325</DOI>
    <Abstract>Cost estimation is important for planning, scheduling, budgeting and pricing of software development. Previous research has mainly focused on improving estimates and the associated processes. However, there is still a lack of research on human and organizational aspects of cost estimation and informal uses of cost estimates. This paper presents initial findings from a qualitative study addressing these questions. Based on four semi-structured interviews with experienced managers from different software developing organizations we have identified a number of aspects not commonly discussed in the cost estimation literature. The analysis indicates that cost estimates are used not only for prediction and planning, but also play a role in power plays within the organizations based on the stakeholders' differing interests. There are also human and organizational factors that are likely to influence the quality of estimates.   We also suggest a basic taxonomy of attributes that could be used to structure the many issues involved in and affecting software cost estimation. We conclude that there are many factors that affect software cost estimation and need to be considered in future research. Longer-term this is important not only for cost estimation but can also be useful to understand how human and organizational factors affect software development processes in general.</Abstract>
    <Abstract_Length>207</Abstract_Length>
    <Author_Name>robert feldt</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>chalmers university of technology</Affiliation_Name>
    <Author_Id>2034354864</Author_Id>
    <All_Authors>ana magazinius, robert feldt</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1978472997</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A proposal for enhancing user-developer communication in large IT projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223014</DOI>
    <Abstract>A review of the literature showed that the probability of system success, i.e. user acceptance, system quality and system usage, can be increased by user-developer communication. So far most research on user participation focuses either on early or on late development phases. Especially large IT projects require increased participation, due to their high complexity. We believe that the step in software development when user requirements are translated (and thus interpreted) by developers into a technical specification (i.e. system requirements, architecture and models) is a critical one for user participation. In this step a lot of implicit decisions are taken, some of which should be communicated to the end users. Therefore, we want to create a method that enhances communication between users and developers during that step. We identified trigger points (i.e. changes on initial user requirements), and the granularity level on which to communicate with the end users. Also, representations of changes and adequate means of communication are discussed.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>ulrike abelein</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>heidelberg university</Affiliation_Name>
    <Author_Id>2029228727</Author_Id>
    <All_Authors>ulrike abelein, barbara paech</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1978472997</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A proposal for enhancing user-developer communication in large IT projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223014</DOI>
    <Abstract>A review of the literature showed that the probability of system success, i.e. user acceptance, system quality and system usage, can be increased by user-developer communication. So far most research on user participation focuses either on early or on late development phases. Especially large IT projects require increased participation, due to their high complexity. We believe that the step in software development when user requirements are translated (and thus interpreted) by developers into a technical specification (i.e. system requirements, architecture and models) is a critical one for user participation. In this step a lot of implicit decisions are taken, some of which should be communicated to the end users. Therefore, we want to create a method that enhances communication between users and developers during that step. We identified trigger points (i.e. changes on initial user requirements), and the granularity level on which to communicate with the end users. Also, representations of changes and adequate means of communication are discussed.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>barbara paech</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>heidelberg university</Affiliation_Name>
    <Author_Id>2282312329</Author_Id>
    <All_Authors>ulrike abelein, barbara paech</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1979374124</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An examination of shared understanding in free/libre open source project maintenance</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614744</DOI>
    <Abstract>Many problems in software development are rooted in the difficulties of coordination and communication in the software development team. Aranda's Theory of Shared Understanding for Software Organizations explains the role of shared understanding in coordination and suggests four attributes of team interaction that influence shared understanding and, therefore, the quality of coordination. To find evidence supporting this theory, we investigated cases of rework in the bug fixing activities of a Free/Libre Open Source software project. We look at the role of coordination breakdown in these cases of rework and examine them in terms of the theory. We found overall coordination patterns that are consistent with the Theory but we do not find evidence that a lack of shared understanding was a factor of rework in the cases examined.</Abstract>
    <Abstract_Length>128</Abstract_Length>
    <Author_Name>brandt braunschweig</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of maryland baltimore county</Affiliation_Name>
    <Author_Id>2229850022</Author_Id>
    <All_Authors>brandt braunschweig, carolyn b seaman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1979374124</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An examination of shared understanding in free/libre open source project maintenance</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614744</DOI>
    <Abstract>Many problems in software development are rooted in the difficulties of coordination and communication in the software development team. Aranda's Theory of Shared Understanding for Software Organizations explains the role of shared understanding in coordination and suggests four attributes of team interaction that influence shared understanding and, therefore, the quality of coordination. To find evidence supporting this theory, we investigated cases of rework in the bug fixing activities of a Free/Libre Open Source software project. We look at the role of coordination breakdown in these cases of rework and examine them in terms of the theory. We found overall coordination patterns that are consistent with the Theory but we do not find evidence that a lack of shared understanding was a factor of rework in the cases examined.</Abstract>
    <Abstract_Length>128</Abstract_Length>
    <Author_Name>carolyn b seaman</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of maryland baltimore county</Affiliation_Name>
    <Author_Id>2311345609</Author_Id>
    <All_Authors>brandt braunschweig, carolyn b seaman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1980199054</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Emergence of developer teams in the collaboration network</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614729</DOI>
    <Abstract>Developer teams may naturally emerge independent of managerial decisions, organizational structure, or work locations in large software. Such self organized collaboration teams of developers can be traced from the source code repositories. In this paper, we identify the developer teams in the collaboration network in order to present the work team evolution and the factors that affect team stability for a large, globally developed, commercial software. Our findings indicate that: a) Number of collaboration teams do not change over time, b) Size of the collaboration teams increases over time, c) Team activity is not related with team size, d) Factors related to team size, location and activity affect the stability of teams over time.</Abstract>
    <Abstract_Length>114</Abstract_Length>
    <Author_Name>andriy v miranskyy</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>1495808708</Author_Id>
    <All_Authors>andriy v miranskyy, bora caglayan, ayse basar bener</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1980199054</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Emergence of developer teams in the collaboration network</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614729</DOI>
    <Abstract>Developer teams may naturally emerge independent of managerial decisions, organizational structure, or work locations in large software. Such self organized collaboration teams of developers can be traced from the source code repositories. In this paper, we identify the developer teams in the collaboration network in order to present the work team evolution and the factors that affect team stability for a large, globally developed, commercial software. Our findings indicate that: a) Number of collaboration teams do not change over time, b) Size of the collaboration teams increases over time, c) Team activity is not related with team size, d) Factors related to team size, location and activity affect the stability of teams over time.</Abstract>
    <Abstract_Length>114</Abstract_Length>
    <Author_Name>bora caglayan</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>bogazici university</Affiliation_Name>
    <Author_Id>2005165943</Author_Id>
    <All_Authors>andriy v miranskyy, bora caglayan, ayse basar bener</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1980199054</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Emergence of developer teams in the collaboration network</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614729</DOI>
    <Abstract>Developer teams may naturally emerge independent of managerial decisions, organizational structure, or work locations in large software. Such self organized collaboration teams of developers can be traced from the source code repositories. In this paper, we identify the developer teams in the collaboration network in order to present the work team evolution and the factors that affect team stability for a large, globally developed, commercial software. Our findings indicate that: a) Number of collaboration teams do not change over time, b) Size of the collaboration teams increases over time, c) Team activity is not related with team size, d) Factors related to team size, location and activity affect the stability of teams over time.</Abstract>
    <Abstract_Length>114</Abstract_Length>
    <Author_Name>ayse basar bener</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ryerson university</Affiliation_Name>
    <Author_Id>2120101566</Author_Id>
    <All_Authors>andriy v miranskyy, bora caglayan, ayse basar bener</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1980805642</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Discovering determinants of high volatility software</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071416</DOI>
    <Abstract>This topic paper presents a line of research that we are proposing that incorporates, in a very explicit and intentional way, human and organizational aspects in the prediction of troublesome (defect-prone or changeprone or volatile, depending on the environment) software modules. Much previous research in this area tries to identify these modules by looking at their structural characteristics, so that increased effort can be concentrated on those modules in order to reduce future maintenance costs.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>a gunes koru</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of maryland baltimore county</Affiliation_Name>
    <Author_Id>1998591381</Author_Id>
    <All_Authors>a gunes koru, sreedevi sampath, carolyn b seaman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1980805642</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Discovering determinants of high volatility software</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071416</DOI>
    <Abstract>This topic paper presents a line of research that we are proposing that incorporates, in a very explicit and intentional way, human and organizational aspects in the prediction of troublesome (defect-prone or changeprone or volatile, depending on the environment) software modules. Much previous research in this area tries to identify these modules by looking at their structural characteristics, so that increased effort can be concentrated on those modules in order to reduce future maintenance costs.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>sreedevi sampath</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of maryland baltimore county</Affiliation_Name>
    <Author_Id>2000270259</Author_Id>
    <All_Authors>a gunes koru, sreedevi sampath, carolyn b seaman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1980805642</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Discovering determinants of high volatility software</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071416</DOI>
    <Abstract>This topic paper presents a line of research that we are proposing that incorporates, in a very explicit and intentional way, human and organizational aspects in the prediction of troublesome (defect-prone or changeprone or volatile, depending on the environment) software modules. Much previous research in this area tries to identify these modules by looking at their structural characteristics, so that increased effort can be concentrated on those modules in order to reduce future maintenance costs.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>carolyn b seaman</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of maryland baltimore county</Affiliation_Name>
    <Author_Id>2311345609</Author_Id>
    <All_Authors>a gunes koru, sreedevi sampath, carolyn b seaman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1981070130</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Feedback: how does it impact software engineers?</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223008</DOI>
    <Abstract>Feedback happens all the time in software development environments, but little is known about the impact it has. Motivation theory identifies feedback as an important factor, but doesn't consider the impact of different feedback characteristics. We present the results of a scenario-based study with 16 software engineers. Our study suggests that positive feedback has an impact on job satisfaction while negative feedback impacts behaviour. Motivation and productivity were found to be linked in just 20% of positive feedback scenarios.</Abstract>
    <Abstract_Length>79</Abstract_Length>
    <Author_Name>rien sach</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2035091146</Author_Id>
    <All_Authors>rien sach, marian petre</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1981070130</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Feedback: how does it impact software engineers?</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223008</DOI>
    <Abstract>Feedback happens all the time in software development environments, but little is known about the impact it has. Motivation theory identifies feedback as an important factor, but doesn't consider the impact of different feedback characteristics. We present the results of a scenario-based study with 16 software engineers. Our study suggests that positive feedback has an impact on job satisfaction while negative feedback impacts behaviour. Motivation and productivity were found to be linked in just 20% of positive feedback scenarios.</Abstract>
    <Abstract_Length>79</Abstract_Length>
    <Author_Name>marian petre</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2086609251</Author_Id>
    <All_Authors>rien sach, marian petre</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1982175967</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Source-level debugging with the whyline</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370132</DOI>
    <Abstract>The visualizations of the Whyline are presented, which focus on supporting the exploration a source code and how it executes. The visualization is concise, simple to navigate, and mimics syntactic features of its target programming language for consistency. Two studies showed that users with the visualization completed a debugging task twice as fast as users without the visualization, partly due to features of the visualization. Applications of the visualizations to tasks other than debugging are discussed.</Abstract>
    <Abstract_Length>76</Abstract_Length>
    <Author_Name>brad a myers</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2117127927</Author_Id>
    <All_Authors>brad a myers, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1982175967</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Source-level debugging with the whyline</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370132</DOI>
    <Abstract>The visualizations of the Whyline are presented, which focus on supporting the exploration a source code and how it executes. The visualization is concise, simple to navigate, and mimics syntactic features of its target programming language for consistency. Two studies showed that users with the visualization completed a debugging task twice as fast as users without the visualization, partly due to features of the visualization. Applications of the visualizations to tasks other than debugging are discussed.</Abstract>
    <Abstract_Length>76</Abstract_Length>
    <Author_Name>andrew j ko</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2147219881</Author_Id>
    <All_Authors>brad a myers, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1984505681</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>MimEc: intelligent user notification of faults in the eclipse IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370133</DOI>
    <Abstract>The earlier in the software process a fault is detected, the cheaper the cost of fixing the fault. Automated fault detection tools can provide developers with information throughout development, however, programming is a cognitively complex process and inundating the developer with information may do more harm than good. In this paper, we present MimEc, a part of the AWARE plug-in for the Eclipse integrated development environment. MimEc presents fault information to developers while they are writing code. The purpose of MimEc is to display only those faults in which a developer may be interested, thereby increasing the likelihood the developer will address the fault. MimEc infers interest in a fault based on fault criticality, relevance of the fault to the developer's current working context, and the developer's interactions with the programming environment. MimEc is currently under development and will be evaluated in both academic and professional settings.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>lucas layman</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2075765358</Author_Id>
    <All_Authors>lucas layman, robert st amant, laurie williams</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1984505681</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>MimEc: intelligent user notification of faults in the eclipse IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370133</DOI>
    <Abstract>The earlier in the software process a fault is detected, the cheaper the cost of fixing the fault. Automated fault detection tools can provide developers with information throughout development, however, programming is a cognitively complex process and inundating the developer with information may do more harm than good. In this paper, we present MimEc, a part of the AWARE plug-in for the Eclipse integrated development environment. MimEc presents fault information to developers while they are writing code. The purpose of MimEc is to display only those faults in which a developer may be interested, thereby increasing the likelihood the developer will address the fault. MimEc infers interest in a fault based on fault criticality, relevance of the fault to the developer's current working context, and the developer's interactions with the programming environment. MimEc is currently under development and will be evaluated in both academic and professional settings.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>robert st amant</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2161367002</Author_Id>
    <All_Authors>lucas layman, robert st amant, laurie williams</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1984505681</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>MimEc: intelligent user notification of faults in the eclipse IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370133</DOI>
    <Abstract>The earlier in the software process a fault is detected, the cheaper the cost of fixing the fault. Automated fault detection tools can provide developers with information throughout development, however, programming is a cognitively complex process and inundating the developer with information may do more harm than good. In this paper, we present MimEc, a part of the AWARE plug-in for the Eclipse integrated development environment. MimEc presents fault information to developers while they are writing code. The purpose of MimEc is to display only those faults in which a developer may be interested, thereby increasing the likelihood the developer will address the fault. MimEc infers interest in a fault based on fault criticality, relevance of the fault to the developer's current working context, and the developer's interactions with the programming environment. MimEc is currently under development and will be evaluated in both academic and professional settings.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>laurie williams</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2175749388</Author_Id>
    <All_Authors>lucas layman, robert st amant, laurie williams</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1985969989</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Agile software engineering as creative work</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223015</DOI>
    <Abstract>A Software Engineering project depends significantly on team performance, as does any activity that involves human interaction. In the last years, the traditional perspective on software development is changing and Agile methods have received considerable attention. Among other attributes, the agilists claim that fostering Creativity is one of the keys to response to common problems and challenges of software development today. The development of new software products requires the generation of novel and useful ideas. In this paper, eXtreme Programming (XP) is analyzed and evaluated from the perspective of the creativity, in particular the creative performance and structure required at the teamwork level.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>claudio leon de la barra</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>pontifical catholic university of valparaiso</Affiliation_Name>
    <Author_Id>1994331254</Author_Id>
    <All_Authors>claudio leon de la barra, broderick crawford, ricardo soto, eric monfroy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1985969989</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Agile software engineering as creative work</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223015</DOI>
    <Abstract>A Software Engineering project depends significantly on team performance, as does any activity that involves human interaction. In the last years, the traditional perspective on software development is changing and Agile methods have received considerable attention. Among other attributes, the agilists claim that fostering Creativity is one of the keys to response to common problems and challenges of software development today. The development of new software products requires the generation of novel and useful ideas. In this paper, eXtreme Programming (XP) is analyzed and evaluated from the perspective of the creativity, in particular the creative performance and structure required at the teamwork level.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>broderick crawford</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>pontifical catholic university of valparaiso</Affiliation_Name>
    <Author_Id>2113753540</Author_Id>
    <All_Authors>claudio leon de la barra, broderick crawford, ricardo soto, eric monfroy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1985969989</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Agile software engineering as creative work</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223015</DOI>
    <Abstract>A Software Engineering project depends significantly on team performance, as does any activity that involves human interaction. In the last years, the traditional perspective on software development is changing and Agile methods have received considerable attention. Among other attributes, the agilists claim that fostering Creativity is one of the keys to response to common problems and challenges of software development today. The development of new software products requires the generation of novel and useful ideas. In this paper, eXtreme Programming (XP) is analyzed and evaluated from the perspective of the creativity, in particular the creative performance and structure required at the teamwork level.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>ricardo soto</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>pontifical catholic university of valparaiso</Affiliation_Name>
    <Author_Id>2118888680</Author_Id>
    <All_Authors>claudio leon de la barra, broderick crawford, ricardo soto, eric monfroy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1985969989</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Agile software engineering as creative work</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223015</DOI>
    <Abstract>A Software Engineering project depends significantly on team performance, as does any activity that involves human interaction. In the last years, the traditional perspective on software development is changing and Agile methods have received considerable attention. Among other attributes, the agilists claim that fostering Creativity is one of the keys to response to common problems and challenges of software development today. The development of new software products requires the generation of novel and useful ideas. In this paper, eXtreme Programming (XP) is analyzed and evaluated from the perspective of the creativity, in particular the creative performance and structure required at the teamwork level.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>eric monfroy</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>centre national de la recherche scientifique</Affiliation_Name>
    <Author_Id>2513030805</Author_Id>
    <All_Authors>claudio leon de la barra, broderick crawford, ricardo soto, eric monfroy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1986136221</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>App-directed learning: An exploratory study</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614736</DOI>
    <Abstract>Learning a new platform is a common, yet difficult task for software developers today. A range of resources, both official resources (i.e., those provided by the platform owner) and those provided by the wider developer community are available to help developers. To increase our understanding of the learning process and the resources developers use, we conducted an interview and diary study in which ten developers told us about their experience learning to develop Windows Phone applications. We report on a preliminary analysis of our data viewed through the lens of self-directed learning. Using this lens, we characterize the learning strategies of our subjects as app-directed, and describe some of the particular challenges our subjects faced due to this strategy.</Abstract>
    <Abstract_Length>119</Abstract_Length>
    <Author_Name>jonathan sillito</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>1801224773</Author_Id>
    <All_Authors>jonathan sillito, andrew begel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1986136221</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>App-directed learning: An exploratory study</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614736</DOI>
    <Abstract>Learning a new platform is a common, yet difficult task for software developers today. A range of resources, both official resources (i.e., those provided by the platform owner) and those provided by the wider developer community are available to help developers. To increase our understanding of the learning process and the resources developers use, we conducted an interview and diary study in which ten developers told us about their experience learning to develop Windows Phone applications. We report on a preliminary analysis of our data viewed through the lens of self-directed learning. Using this lens, we characterize the learning strategies of our subjects as app-directed, and describe some of the particular challenges our subjects faced due to this strategy.</Abstract>
    <Abstract_Length>119</Abstract_Length>
    <Author_Name>andrew begel</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>1970259043</Author_Id>
    <All_Authors>jonathan sillito, andrew begel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989192970</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A sketch of the programmer's coach: making programmers more effective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370139</DOI>
    <Abstract>As programmers work on source code, they ask an array of questions that are difficult to answer manually. To help answer these questions, programmers often employ software tools; often in attempting to use these tools, the programmers encounter many obstacles which frustrate their efforts and lead to less than optimal tool utilization. Possibly worse, programmers often intentionally under utilize available tools as they prefer to answer questions only with tools they have used before. We hypothesize that we can coach programmers towards a more systematic use of appropriate software tools that would enable the programmers to be more productive in the completion of their work. We propose to use activity logs collected automatically to deduce the questions a given programmer asks a frequently and then to coach the programmer automatically on appropriate, possibly unfamiliar, tools to answer those questions more effectively. By using activity logs to inform coaching decisions, our approach is based on an objective cost metric. We envision an environment that enables a programmer to learn how to use appropriate tools systematically.</Abstract>
    <Abstract_Length>174</Abstract_Length>
    <Author_Name>gail c murphy</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>2100357700</Author_Id>
    <All_Authors>gail c murphy, david c shepherd</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989192970</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A sketch of the programmer's coach: making programmers more effective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370139</DOI>
    <Abstract>As programmers work on source code, they ask an array of questions that are difficult to answer manually. To help answer these questions, programmers often employ software tools; often in attempting to use these tools, the programmers encounter many obstacles which frustrate their efforts and lead to less than optimal tool utilization. Possibly worse, programmers often intentionally under utilize available tools as they prefer to answer questions only with tools they have used before. We hypothesize that we can coach programmers towards a more systematic use of appropriate software tools that would enable the programmers to be more productive in the completion of their work. We propose to use activity logs collected automatically to deduce the questions a given programmer asks a frequently and then to coach the programmer automatically on appropriate, possibly unfamiliar, tools to answer those questions more effectively. By using activity logs to inform coaching decisions, our approach is based on an objective cost metric. We envision an environment that enables a programmer to learn how to use appropriate tools systematically.</Abstract>
    <Abstract_Length>174</Abstract_Length>
    <Author_Name>david c shepherd</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>2110721350</Author_Id>
    <All_Authors>gail c murphy, david c shepherd</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989289156</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Supporting collaboration in the development of complex engineering software</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984663</DOI>
    <Abstract>Software development in engineering firms is a prominent and vital activity, with the success of the business often being dependent on the tools being used. Developing this software requires collaboration between a number of stakeholders, including end-users and other software teams who are often remotely located. This research has used an ethnographic approach to studying communications between stakeholders involved in the development of this type of software. Findings show that users play a vital role in the development team due to their knowledge of the domain and work processes. Supporting this relationship remotely can be challenging, especially due to the reliance on ad-hoc communication strategies. This can sometimes lead to misunderstandings, design rationale being lost, and poor and efficient designs and processes. Lightweight tools that enable flexible design artefacts to be shared and discussed could assist this process and will be investigated in future work.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>victoria shipp</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of bath</Affiliation_Name>
    <Author_Id>2077564787</Author_Id>
    <All_Authors>victoria shipp, peter johnson</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989289156</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Supporting collaboration in the development of complex engineering software</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984663</DOI>
    <Abstract>Software development in engineering firms is a prominent and vital activity, with the success of the business often being dependent on the tools being used. Developing this software requires collaboration between a number of stakeholders, including end-users and other software teams who are often remotely located. This research has used an ethnographic approach to studying communications between stakeholders involved in the development of this type of software. Findings show that users play a vital role in the development team due to their knowledge of the domain and work processes. Supporting this relationship remotely can be challenging, especially due to the reliance on ad-hoc communication strategies. This can sometimes lead to misunderstandings, design rationale being lost, and poor and efficient designs and processes. Lightweight tools that enable flexible design artefacts to be shared and discussed could assist this process and will be investigated in future work.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>peter johnson</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of bath</Affiliation_Name>
    <Author_Id>2171282167</Author_Id>
    <All_Authors>victoria shipp, peter johnson</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989360578</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>How do we trace requirements: an initial study of analyst behavior in trace validation tasks</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984648</DOI>
    <Abstract>Traceability recovery is a tedious, error-prone, person-power intensive task, even if aided by automated traceability tools. Human analysts must vet candidate traceability links retrieved by such tools and must often go looking for links that such tools fail to locate as they build a traceability matrix. This paper examines a research version of the traceability tool REquirements TRacing On target (RETRO) that logs analyst actions. We examine the user logs in order to understand how analysts work on traceability recovery tasks. Such information is a pre-requisite to understanding how to better design traceability tools to best utilize analyst time while developing a high quality final traceability matrix.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>alex dekhtyar</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>california polytechnic state university</Affiliation_Name>
    <Author_Id>2076102544</Author_Id>
    <All_Authors>alex dekhtyar, weikeat kong, jane huffman hayes, jeff holden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989360578</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>How do we trace requirements: an initial study of analyst behavior in trace validation tasks</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984648</DOI>
    <Abstract>Traceability recovery is a tedious, error-prone, person-power intensive task, even if aided by automated traceability tools. Human analysts must vet candidate traceability links retrieved by such tools and must often go looking for links that such tools fail to locate as they build a traceability matrix. This paper examines a research version of the traceability tool REquirements TRacing On target (RETRO) that logs analyst actions. We examine the user logs in order to understand how analysts work on traceability recovery tasks. Such information is a pre-requisite to understanding how to better design traceability tools to best utilize analyst time while developing a high quality final traceability matrix.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>weikeat kong</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of kentucky</Affiliation_Name>
    <Author_Id>2112846882</Author_Id>
    <All_Authors>alex dekhtyar, weikeat kong, jane huffman hayes, jeff holden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989360578</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>How do we trace requirements: an initial study of analyst behavior in trace validation tasks</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984648</DOI>
    <Abstract>Traceability recovery is a tedious, error-prone, person-power intensive task, even if aided by automated traceability tools. Human analysts must vet candidate traceability links retrieved by such tools and must often go looking for links that such tools fail to locate as they build a traceability matrix. This paper examines a research version of the traceability tool REquirements TRacing On target (RETRO) that logs analyst actions. We examine the user logs in order to understand how analysts work on traceability recovery tasks. Such information is a pre-requisite to understanding how to better design traceability tools to best utilize analyst time while developing a high quality final traceability matrix.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>jane huffman hayes</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of kentucky</Affiliation_Name>
    <Author_Id>2151193050</Author_Id>
    <All_Authors>alex dekhtyar, weikeat kong, jane huffman hayes, jeff holden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989360578</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>How do we trace requirements: an initial study of analyst behavior in trace validation tasks</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984648</DOI>
    <Abstract>Traceability recovery is a tedious, error-prone, person-power intensive task, even if aided by automated traceability tools. Human analysts must vet candidate traceability links retrieved by such tools and must often go looking for links that such tools fail to locate as they build a traceability matrix. This paper examines a research version of the traceability tool REquirements TRacing On target (RETRO) that logs analyst actions. We examine the user logs in order to understand how analysts work on traceability recovery tasks. Such information is a pre-requisite to understanding how to better design traceability tools to best utilize analyst time while developing a high quality final traceability matrix.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>jeff holden</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>california polytechnic state university</Affiliation_Name>
    <Author_Id>2229146677</Author_Id>
    <All_Authors>alex dekhtyar, weikeat kong, jane huffman hayes, jeff holden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>gleison santos</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>universidade federal do estado do rio de janeiro</Affiliation_Name>
    <Author_Id>611355516</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>igor steinmacher</Author_Name>
    <Author_Position>6</Author_Position>
    <Author_Id>2000400706</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>tayana conte</Author_Name>
    <Author_Position>7</Author_Position>
    <Affiliation_Name>federal university of amazonas</Affiliation_Name>
    <Author_Id>2142750856</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>a edson oliveira</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>federal university of amazonas</Affiliation_Name>
    <Author_Id>2405358246</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>luis braga</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2431698203</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>davi viana</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>federal university of amazonas</Affiliation_Name>
    <Author_Id>2440590436</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989605146</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Knowledge management and organizational culture in a software organization: a case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.27</DOI>
    <Abstract>Software development activities are usually knowledge intensive. Knowledge management is essential to foster improvements and innovation on software development processes. Organizational Culture (OC) is a key factor that impacts the success of knowledge management, since it influences the way employees learn and share knowledge in the organization. The Competing Values Framework (CVF) was proposed to support the definition of organization's cultural outline. CVF aims to diagnose and facilitate Organizational Culture changes. Previous researches presented a theoretical model to correlate knowledge management to the CVF. However, the existing literature does not present evidences of this correlation. The goal of this work is to identify whether this correlation exists or not in the context of a software organization by means of a case study. We performed a comparison between the values obtained and those presented in the theoretical model. The comparison output enabled us to verify that the case study results diverged from the theoretical ones. Therefore, it was not possible to observe the theoretical model's propositions on the investigated software development organization.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>jacilane rabelo</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>federal university of amazonas</Affiliation_Name>
    <Author_Id>2490722793</Author_Id>
    <All_Authors>gleison santos, igor steinmacher, tayana conte, a edson oliveira, luis braga, davi viana, jacilane rabelo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989973809</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Facilitating collaboration between COTS stakeholders via principles of advanced ISD methodologies: the vendor perspective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.11</DOI>
    <Abstract>Commercial-off-the-Shelf (COTS) systems continue to evolve after acquisition while adapting to an ever-changing organizational environment. Many software changes are delivered through the change request (CR) knowledge-intensive process that can be viewed as a small development cycle. In this study we mapped COTS-related risks documented in literature to COTS-based systems development (CBSD) phases. We then analyzed evidence for knowledge gaps between stakeholders, such as misunderstanding systems and business aspects, which hinder CR delivery. For each gap we mapped related risks and proposed methods, taken from advanced information system development (ISD) methodologies focused on human, collaborative and knowledge aspects, as mitigation strategies. Our analysis indicates that these methods, which encourage collaboration and knowledge sharing, can serve as feasible mitigation strategies for the knowledge gaps found in the study. Taking a knowledge-centric perspective of the CBSD process by mitigating risks via human-centric development methods is the first step toward a new model for risk management in CBSD.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>irit hadar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>1246307506</Author_Id>
    <All_Authors>irit hadar, anat segalraviv, meira levy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989973809</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Facilitating collaboration between COTS stakeholders via principles of advanced ISD methodologies: the vendor perspective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.11</DOI>
    <Abstract>Commercial-off-the-Shelf (COTS) systems continue to evolve after acquisition while adapting to an ever-changing organizational environment. Many software changes are delivered through the change request (CR) knowledge-intensive process that can be viewed as a small development cycle. In this study we mapped COTS-related risks documented in literature to COTS-based systems development (CBSD) phases. We then analyzed evidence for knowledge gaps between stakeholders, such as misunderstanding systems and business aspects, which hinder CR delivery. For each gap we mapped related risks and proposed methods, taken from advanced information system development (ISD) methodologies focused on human, collaborative and knowledge aspects, as mitigation strategies. Our analysis indicates that these methods, which encourage collaboration and knowledge sharing, can serve as feasible mitigation strategies for the knowledge gaps found in the study. Taking a knowledge-centric perspective of the CBSD process by mitigating risks via human-centric development methods is the first step toward a new model for risk management in CBSD.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>anat segalraviv</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>2228818140</Author_Id>
    <All_Authors>irit hadar, anat segalraviv, meira levy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1989973809</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Facilitating collaboration between COTS stakeholders via principles of advanced ISD methodologies: the vendor perspective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.11</DOI>
    <Abstract>Commercial-off-the-Shelf (COTS) systems continue to evolve after acquisition while adapting to an ever-changing organizational environment. Many software changes are delivered through the change request (CR) knowledge-intensive process that can be viewed as a small development cycle. In this study we mapped COTS-related risks documented in literature to COTS-based systems development (CBSD) phases. We then analyzed evidence for knowledge gaps between stakeholders, such as misunderstanding systems and business aspects, which hinder CR delivery. For each gap we mapped related risks and proposed methods, taken from advanced information system development (ISD) methodologies focused on human, collaborative and knowledge aspects, as mitigation strategies. Our analysis indicates that these methods, which encourage collaboration and knowledge sharing, can serve as feasible mitigation strategies for the knowledge gaps found in the study. Taking a knowledge-centric perspective of the CBSD process by mitigating risks via human-centric development methods is the first step toward a new model for risk management in CBSD.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>meira levy</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>shenkar college of engineering and design</Affiliation_Name>
    <Author_Id>2569093161</Author_Id>
    <All_Authors>irit hadar, anat segalraviv, meira levy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1991406033</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Integrating usability-engineering into the software developing processes of SME: a case study of software developing SME in Germany</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.22</DOI>
    <Abstract>Usability is an important factor for product quality. For German small and medium enterprises (SME) in the software branch, cheaper producing vendors from foreign countries can be considered as serious competition. Improving the usability of software products is a good way to secure competitiveness. However, integrating usability-engineering into development is a challenge for SME. In this note, we present the empirical results of a research project study with focus on software engineering processes in German software SME and possible constraints and chances for integrating usability-engineering.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>volker wulf</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>656307113</Author_Id>
    <All_Authors>volker wulf, dominik hering, tobias schwartz, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1991406033</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Integrating usability-engineering into the software developing processes of SME: a case study of software developing SME in Germany</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.22</DOI>
    <Abstract>Usability is an important factor for product quality. For German small and medium enterprises (SME) in the software branch, cheaper producing vendors from foreign countries can be considered as serious competition. Improving the usability of software products is a good way to secure competitiveness. However, integrating usability-engineering into development is a challenge for SME. In this note, we present the empirical results of a research project study with focus on software engineering processes in German software SME and possible constraints and chances for integrating usability-engineering.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>dominik hering</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>1999804001</Author_Id>
    <All_Authors>volker wulf, dominik hering, tobias schwartz, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1991406033</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Integrating usability-engineering into the software developing processes of SME: a case study of software developing SME in Germany</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.22</DOI>
    <Abstract>Usability is an important factor for product quality. For German small and medium enterprises (SME) in the software branch, cheaper producing vendors from foreign countries can be considered as serious competition. Improving the usability of software products is a good way to secure competitiveness. However, integrating usability-engineering into development is a challenge for SME. In this note, we present the empirical results of a research project study with focus on software engineering processes in German software SME and possible constraints and chances for integrating usability-engineering.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>tobias schwartz</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2113522165</Author_Id>
    <All_Authors>volker wulf, dominik hering, tobias schwartz, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1991406033</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Integrating usability-engineering into the software developing processes of SME: a case study of software developing SME in Germany</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.22</DOI>
    <Abstract>Usability is an important factor for product quality. For German small and medium enterprises (SME) in the software branch, cheaper producing vendors from foreign countries can be considered as serious competition. Improving the usability of software products is a good way to secure competitiveness. However, integrating usability-engineering into development is a challenge for SME. In this note, we present the empirical results of a research project study with focus on software engineering processes in German software SME and possible constraints and chances for integrating usability-engineering.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>alexander boden</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2304405382</Author_Id>
    <All_Authors>volker wulf, dominik hering, tobias schwartz, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992072862</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A redefinition of roles and collaboration under model-driven development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223021</DOI>
    <Abstract>We report on a disruption in organizational dynamics arising from the introduction of model-driven development tools in General Motors. The introduction altered the balance of collaboration deeply, and the organization is still negotiating with its aftermath. Our report illustrates one consequence of tool adoption in groups, and that these consequences should be understood to facilitate technical change.</Abstract>
    <Abstract_Length>57</Abstract_Length>
    <Author_Name>daniela damian</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2005263414</Author_Id>
    <All_Authors>daniela damian, jorge aranda</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992072862</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A redefinition of roles and collaboration under model-driven development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223021</DOI>
    <Abstract>We report on a disruption in organizational dynamics arising from the introduction of model-driven development tools in General Motors. The introduction altered the balance of collaboration deeply, and the organization is still negotiating with its aftermath. Our report illustrates one consequence of tool adoption in groups, and that these consequences should be understood to facilitate technical change.</Abstract>
    <Abstract_Length>57</Abstract_Length>
    <Author_Name>jorge aranda</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2141203511</Author_Id>
    <All_Authors>daniela damian, jorge aranda</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992202328</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Competition on inter-organizational collaboration from an organizational-social-technical perspective</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223003</DOI>
    <Abstract>Benefiting from inter-organizational collaboration while remaining competitive are organizations' target in software industry nowadays. However, little is known about competition awareness and collaboration processes and practices in software-intensive organizations. This paper introduces the first step to understand the role and impact of competition on team collaboration in the context of inter-organizational software project. A case study was designed and initially performed. Initial findings revealed a set of propositions for future research. We found that collaboration initiates from technical coordination requirement and is influenced by technical, social and organizational factors. Meanwhile, competition comes from business strategy and competition awareness could negatively influence effectiveness of social-technical collaboration. Future works will focus on the mutual influence between competition and collaboration and role of global dispersion on this interaction.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>daniela s cruzes</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>norwegian university of science and technology</Affiliation_Name>
    <Author_Id>1969242783</Author_Id>
    <All_Authors>daniela s cruzes, reidar conradi, anh nguyen duc</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992202328</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Competition on inter-organizational collaboration from an organizational-social-technical perspective</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223003</DOI>
    <Abstract>Benefiting from inter-organizational collaboration while remaining competitive are organizations' target in software industry nowadays. However, little is known about competition awareness and collaboration processes and practices in software-intensive organizations. This paper introduces the first step to understand the role and impact of competition on team collaboration in the context of inter-organizational software project. A case study was designed and initially performed. Initial findings revealed a set of propositions for future research. We found that collaboration initiates from technical coordination requirement and is influenced by technical, social and organizational factors. Meanwhile, competition comes from business strategy and competition awareness could negatively influence effectiveness of social-technical collaboration. Future works will focus on the mutual influence between competition and collaboration and role of global dispersion on this interaction.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>reidar conradi</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>norwegian university of science and technology</Affiliation_Name>
    <Author_Id>2106335481</Author_Id>
    <All_Authors>daniela s cruzes, reidar conradi, anh nguyen duc</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992202328</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Competition on inter-organizational collaboration from an organizational-social-technical perspective</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223003</DOI>
    <Abstract>Benefiting from inter-organizational collaboration while remaining competitive are organizations' target in software industry nowadays. However, little is known about competition awareness and collaboration processes and practices in software-intensive organizations. This paper introduces the first step to understand the role and impact of competition on team collaboration in the context of inter-organizational software project. A case study was designed and initially performed. Initial findings revealed a set of propositions for future research. We found that collaboration initiates from technical coordination requirement and is influenced by technical, social and organizational factors. Meanwhile, competition comes from business strategy and competition awareness could negatively influence effectiveness of social-technical collaboration. Future works will focus on the mutual influence between competition and collaboration and role of global dispersion on this interaction.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>anh nguyen duc</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>norwegian university of science and technology</Affiliation_Name>
    <Author_Id>2229736928</Author_Id>
    <All_Authors>daniela s cruzes, reidar conradi, anh nguyen duc</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992326339</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How software architects collaborate: Insights from collaborative software design in practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614730</DOI>
    <Abstract>The increasingly complex software systems are developed by globally distributed engineering teams consisting of a number of members who collaborate to gather the requirements, as well as design, implement, and test the system. Unlike other development activities, collaborative software design has not yet been studied extensively, and thus it is not fully understood how it is conducted in practice. We have commenced a series of studies to address this. As the first step, we have interviewed architects at a global software solutions provider to observe how collaborative software design works in practice. In this paper, we report the observations and insights we gained from the interviews related to (1) the various roles of software architects in collaborative software design, (2) the project-specific networks of software architects, (3) the impacts of geographic distribution, and (4) the collaboration cost drivers. We also discuss how we are using these insights to shape up our subsequent research.</Abstract>
    <Abstract_Length>153</Abstract_Length>
    <Author_Name>ivo krka</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of southern california</Affiliation_Name>
    <Author_Id>259240390</Author_Id>
    <All_Authors>ivo krka, nenad medvidovic, jae young bang, naveen n kulkarni, srinivas padmanabhuni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992326339</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How software architects collaborate: Insights from collaborative software design in practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614730</DOI>
    <Abstract>The increasingly complex software systems are developed by globally distributed engineering teams consisting of a number of members who collaborate to gather the requirements, as well as design, implement, and test the system. Unlike other development activities, collaborative software design has not yet been studied extensively, and thus it is not fully understood how it is conducted in practice. We have commenced a series of studies to address this. As the first step, we have interviewed architects at a global software solutions provider to observe how collaborative software design works in practice. In this paper, we report the observations and insights we gained from the interviews related to (1) the various roles of software architects in collaborative software design, (2) the project-specific networks of software architects, (3) the impacts of geographic distribution, and (4) the collaboration cost drivers. We also discuss how we are using these insights to shape up our subsequent research.</Abstract>
    <Abstract_Length>153</Abstract_Length>
    <Author_Name>nenad medvidovic</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of southern california</Affiliation_Name>
    <Author_Id>2023055819</Author_Id>
    <All_Authors>ivo krka, nenad medvidovic, jae young bang, naveen n kulkarni, srinivas padmanabhuni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992326339</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How software architects collaborate: Insights from collaborative software design in practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614730</DOI>
    <Abstract>The increasingly complex software systems are developed by globally distributed engineering teams consisting of a number of members who collaborate to gather the requirements, as well as design, implement, and test the system. Unlike other development activities, collaborative software design has not yet been studied extensively, and thus it is not fully understood how it is conducted in practice. We have commenced a series of studies to address this. As the first step, we have interviewed architects at a global software solutions provider to observe how collaborative software design works in practice. In this paper, we report the observations and insights we gained from the interviews related to (1) the various roles of software architects in collaborative software design, (2) the project-specific networks of software architects, (3) the impacts of geographic distribution, and (4) the collaboration cost drivers. We also discuss how we are using these insights to shape up our subsequent research.</Abstract>
    <Abstract_Length>153</Abstract_Length>
    <Author_Name>jae young bang</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of southern california</Affiliation_Name>
    <Author_Id>2134651388</Author_Id>
    <All_Authors>ivo krka, nenad medvidovic, jae young bang, naveen n kulkarni, srinivas padmanabhuni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992326339</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How software architects collaborate: Insights from collaborative software design in practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614730</DOI>
    <Abstract>The increasingly complex software systems are developed by globally distributed engineering teams consisting of a number of members who collaborate to gather the requirements, as well as design, implement, and test the system. Unlike other development activities, collaborative software design has not yet been studied extensively, and thus it is not fully understood how it is conducted in practice. We have commenced a series of studies to address this. As the first step, we have interviewed architects at a global software solutions provider to observe how collaborative software design works in practice. In this paper, we report the observations and insights we gained from the interviews related to (1) the various roles of software architects in collaborative software design, (2) the project-specific networks of software architects, (3) the impacts of geographic distribution, and (4) the collaboration cost drivers. We also discuss how we are using these insights to shape up our subsequent research.</Abstract>
    <Abstract_Length>153</Abstract_Length>
    <Author_Name>naveen n kulkarni</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>infosys</Affiliation_Name>
    <Author_Id>2165313349</Author_Id>
    <All_Authors>ivo krka, nenad medvidovic, jae young bang, naveen n kulkarni, srinivas padmanabhuni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1992326339</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How software architects collaborate: Insights from collaborative software design in practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614730</DOI>
    <Abstract>The increasingly complex software systems are developed by globally distributed engineering teams consisting of a number of members who collaborate to gather the requirements, as well as design, implement, and test the system. Unlike other development activities, collaborative software design has not yet been studied extensively, and thus it is not fully understood how it is conducted in practice. We have commenced a series of studies to address this. As the first step, we have interviewed architects at a global software solutions provider to observe how collaborative software design works in practice. In this paper, we report the observations and insights we gained from the interviews related to (1) the various roles of software architects in collaborative software design, (2) the project-specific networks of software architects, (3) the impacts of geographic distribution, and (4) the collaboration cost drivers. We also discuss how we are using these insights to shape up our subsequent research.</Abstract>
    <Abstract_Length>153</Abstract_Length>
    <Author_Name>srinivas padmanabhuni</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>infosys</Affiliation_Name>
    <Author_Id>2169375033</Author_Id>
    <All_Authors>ivo krka, nenad medvidovic, jae young bang, naveen n kulkarni, srinivas padmanabhuni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1993272670</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Practices around customization of standard systems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370124</DOI>
    <Abstract>More and more software systems are developed by customizing a standard product that provide the major part of the functionality. The customization of Enterprise Resource Planning systems is such a product based software development practice. Little empirical research on the specificities of these software development practices is available. We present an empirical study on customization practices based on video recordings, interviews and a survey. The observed and reported practices challenge some of the principles of software engineering. Based on the analysis, we discuss the specificity of this kind of development, the role of communities of practice, and the resulting challenges for the field of software engineering.</Abstract>
    <Abstract_Length>106</Abstract_Length>
    <Author_Name>yvonne dittrich</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>146716645</Author_Id>
    <All_Authors>yvonne dittrich, sebastien vaucouleur</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1993272670</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Practices around customization of standard systems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370124</DOI>
    <Abstract>More and more software systems are developed by customizing a standard product that provide the major part of the functionality. The customization of Enterprise Resource Planning systems is such a product based software development practice. Little empirical research on the specificities of these software development practices is available. We present an empirical study on customization practices based on video recordings, interviews and a survey. The observed and reported practices challenge some of the principles of software engineering. Based on the analysis, we discuss the specificity of this kind of development, the role of communities of practice, and the resulting challenges for the field of software engineering.</Abstract>
    <Abstract_Length>106</Abstract_Length>
    <Author_Name>sebastien vaucouleur</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>1266764858</Author_Id>
    <All_Authors>yvonne dittrich, sebastien vaucouleur</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1993750715</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>An exploratory study of awareness interests about software modifications</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984662</DOI>
    <Abstract>As software engineers collaboratively develop software, they need to often  analyze past and present program modifications  implemented by other developers. While several techniques focus on tool support for investigating past and present software modifications, do these techniques indeed address developers' awareness interests that are important to them? We conducted an initial focus group study and a web survey to understand in which task contexts and how often particular types of awareness-interests arise. Our preliminary study results indicate that developers have  daily  information needs about code changes that affect or interfere with their code, yet it is extremely challenging for them to identify relevant events out of a large number of change-events.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>miryung kim</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of texas at austin</Affiliation_Name>
    <Author_Id>2138436890</Author_Id>
    <All_Authors>miryung kim</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1994422445</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Agile methods, organizational culture and agility: some insights</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593708</DOI>
    <Abstract>Software development depends on various factors and organizational culture is one of them. Recently agile software development, with its emphasis on agility, has received much attention. Research so far has focused on the constructs that define agility and also identified the reasons that limit teams from exhibiting all the constructs of agile software development. This lead to re-defining agility by using economic, quality, simplicity and the relationship with the environment it operates on. One of the factors that contribute to relationship with environment is organizational culture. Though relationship of organizational culture and software methods is not new, analyzing the relationship further in the new defined definition of agility can provide deep insights into software development. In this paper a qualitative research method of multiple case-studies consisting of 3 releases of one product development team was selected. Data was collected using participant-observation method. Research findings have identified some useful insights that could provide researchers and practitioners to develop software development life-cycle that incorporates existing agile methods and uses diverse set of methods to resolve issues including organizational issues. Thereby the new software development life-cycle would not distinguish between agile and plan-driven development methods and could shape itself in the changing context.</Abstract>
    <Abstract_Length>200</Abstract_Length>
    <Author_Name>lakshminarayana kompella</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ca technologies</Affiliation_Name>
    <Author_Id>2224733704</Author_Id>
    <All_Authors>lakshminarayana kompella</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1994588695</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Soft skills in software engineering: A study of its demand by software companies in Uruguay</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614749</DOI>
    <Abstract>Software development requires professionals with knowledge and experience on many different methodologies, tools, and techniques. However, the so-called soft skills, such as interpersonal skills, teamwork, problem solving and customer orientation to name just a few, are as important as, or even more important, than traditional qualifications and technical skills. In this paper we review a set of jobs advertisements offering job positions related to software engineering in order to identify what soft skills are most in demand by software companies in Uruguay. We also compare our findings with the ones reported in other recent studies carried out with data from other countries. This comparison shows that evidence exists about a common set of basic soft skills software companies demand when looking for new staff for software engineering activities.</Abstract>
    <Abstract_Length>128</Abstract_Length>
    <Author_Name>gerardo matturro</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>1999765295</Author_Id>
    <All_Authors>gerardo matturro</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1994696992</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Exploring software engineering practices in small and medium-sized organizations</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833326</DOI>
    <Abstract>Small organizations have been claimed to manage their requirements in ways that bear no relation to what the textbooks say, and what is taught in undergraduate courses. This paper explores software engineering (SE) practices in five small and medium-sized organizations in order to gain a deeper understanding on how cooperative and human aspects of the SE-related practices differ in small organizations compared to the larger ones. The paper illustrates, in detail, the central role of human collaboration in small organizations and the challenges an organization meets when it begins to grow and lose opportunities for face-to-face collaboration. The findings of this study suggest that studies on using social media are a valuable addition to software engineering research agenda.</Abstract>
    <Abstract_Length>118</Abstract_Length>
    <Author_Name>sami jantunen</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>lappeenranta university of technology</Affiliation_Name>
    <Author_Id>2054978375</Author_Id>
    <All_Authors>sami jantunen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995488392</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>The rise and fall of a central contributor: Dynamics of social organization and performance in the GENTOO community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614731</DOI>
    <Abstract>Social organization and division of labor crucially influence the performance of collaborative software engineering efforts. In this paper, we provide a quantitative analysis of the relation between social organization and performance in Gentoo, an Open Source community developing a Linux distribution. We study the structure and dynamics of collaborations as recorded in the project's bug tracking system over a period of ten years. We identify a period of increasing centralization after which most interactions in the community were mediated by a single central contributor. In this period of maximum centralization, the central contributor unexpectedly left the project, thus posing a significant challenge for the community. We quantify how the rise, the activity as well as the subsequent sudden dropout of this central contributor affected both the social organization and the bug handling performance of the Gentoo community. We analyze social organization from the perspective of network theory and augment our quantitative findings by interviews with prominent members of the Gentoo community which shared their personal insights.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>ingo scholtes</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>eth zurich</Affiliation_Name>
    <Author_Id>4524354</Author_Id>
    <All_Authors>ingo scholtes, claudio j tessone, marcelo serrano zanetti, frank schweitzer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995488392</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>The rise and fall of a central contributor: Dynamics of social organization and performance in the GENTOO community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614731</DOI>
    <Abstract>Social organization and division of labor crucially influence the performance of collaborative software engineering efforts. In this paper, we provide a quantitative analysis of the relation between social organization and performance in Gentoo, an Open Source community developing a Linux distribution. We study the structure and dynamics of collaborations as recorded in the project's bug tracking system over a period of ten years. We identify a period of increasing centralization after which most interactions in the community were mediated by a single central contributor. In this period of maximum centralization, the central contributor unexpectedly left the project, thus posing a significant challenge for the community. We quantify how the rise, the activity as well as the subsequent sudden dropout of this central contributor affected both the social organization and the bug handling performance of the Gentoo community. We analyze social organization from the perspective of network theory and augment our quantitative findings by interviews with prominent members of the Gentoo community which shared their personal insights.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>claudio j tessone</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>eth zurich</Affiliation_Name>
    <Author_Id>46731550</Author_Id>
    <All_Authors>ingo scholtes, claudio j tessone, marcelo serrano zanetti, frank schweitzer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995488392</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>The rise and fall of a central contributor: Dynamics of social organization and performance in the GENTOO community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614731</DOI>
    <Abstract>Social organization and division of labor crucially influence the performance of collaborative software engineering efforts. In this paper, we provide a quantitative analysis of the relation between social organization and performance in Gentoo, an Open Source community developing a Linux distribution. We study the structure and dynamics of collaborations as recorded in the project's bug tracking system over a period of ten years. We identify a period of increasing centralization after which most interactions in the community were mediated by a single central contributor. In this period of maximum centralization, the central contributor unexpectedly left the project, thus posing a significant challenge for the community. We quantify how the rise, the activity as well as the subsequent sudden dropout of this central contributor affected both the social organization and the bug handling performance of the Gentoo community. We analyze social organization from the perspective of network theory and augment our quantitative findings by interviews with prominent members of the Gentoo community which shared their personal insights.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>marcelo serrano zanetti</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>eth zurich</Affiliation_Name>
    <Author_Id>2113049723</Author_Id>
    <All_Authors>ingo scholtes, claudio j tessone, marcelo serrano zanetti, frank schweitzer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995488392</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>The rise and fall of a central contributor: Dynamics of social organization and performance in the GENTOO community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614731</DOI>
    <Abstract>Social organization and division of labor crucially influence the performance of collaborative software engineering efforts. In this paper, we provide a quantitative analysis of the relation between social organization and performance in Gentoo, an Open Source community developing a Linux distribution. We study the structure and dynamics of collaborations as recorded in the project's bug tracking system over a period of ten years. We identify a period of increasing centralization after which most interactions in the community were mediated by a single central contributor. In this period of maximum centralization, the central contributor unexpectedly left the project, thus posing a significant challenge for the community. We quantify how the rise, the activity as well as the subsequent sudden dropout of this central contributor affected both the social organization and the bug handling performance of the Gentoo community. We analyze social organization from the perspective of network theory and augment our quantitative findings by interviews with prominent members of the Gentoo community which shared their personal insights.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>frank schweitzer</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>eth zurich</Affiliation_Name>
    <Author_Id>2164726177</Author_Id>
    <All_Authors>ingo scholtes, claudio j tessone, marcelo serrano zanetti, frank schweitzer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995658248</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>A descriptive classification for end user-relevant decisions of large-scale IT projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614750</DOI>
    <Abstract>Large-scale IT projects with traditional development methods are still very common in practice. These projects mostly involve the end user in the beginning and at the end of the development. However, there are also user-relevant decisions in the phases between. Thus, it is important to investigate what decisions are made and which of them are user-relevant. Thus we suggested in our previous work a preliminary classification based on the TORE method to structure decisions. In this paper, we validate this classification and collected exemplary user-relevant decisions by experts in large-scale IT projects. As part of our research in user-developer communication, we conducted an interview series with twelve experts. The interviews confirmed that our previously suggested classification is comprehensive and helpful to structure decisions and revealed several amendments. The examples given by the experts enabled us to collect a comprehensive list of end user-relevant decisions, and thus lead to our descriptive classification.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>ulrike abelein</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>heidelberg university</Affiliation_Name>
    <Author_Id>2029228727</Author_Id>
    <All_Authors>ulrike abelein, barbara paech</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995658248</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>A descriptive classification for end user-relevant decisions of large-scale IT projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614750</DOI>
    <Abstract>Large-scale IT projects with traditional development methods are still very common in practice. These projects mostly involve the end user in the beginning and at the end of the development. However, there are also user-relevant decisions in the phases between. Thus, it is important to investigate what decisions are made and which of them are user-relevant. Thus we suggested in our previous work a preliminary classification based on the TORE method to structure decisions. In this paper, we validate this classification and collected exemplary user-relevant decisions by experts in large-scale IT projects. As part of our research in user-developer communication, we conducted an interview series with twelve experts. The interviews confirmed that our previously suggested classification is comprehensive and helpful to structure decisions and revealed several amendments. The examples given by the experts enabled us to collect a comprehensive list of end user-relevant decisions, and thus lead to our descriptive classification.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>barbara paech</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>heidelberg university</Affiliation_Name>
    <Author_Id>2282312329</Author_Id>
    <All_Authors>ulrike abelein, barbara paech</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>elisa s f cardozo</Author_Name>
    <Author_Position>5</Author_Position>
    <Author_Id>2020656081</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>fabio q b da silva</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2144104009</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>cleviton v f monteiro</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2212264021</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>miguel andrade filho</Author_Name>
    <Author_Position>8</Author_Position>
    <Author_Id>2223789968</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>dacio n m neto</Author_Name>
    <Author_Position>7</Author_Position>
    <Author_Id>2226586781</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>felipe farias</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2255654876</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>isabella r m dos santos</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2283762645</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995693085</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>A qualitative study of the determinants of self-managing team effectiveness in a scrum team</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984646</DOI>
    <Abstract>There are many evidences in the literature that the use self-managing teams has positive impacts on several dimensions of team effectiveness. Agile methods, supported by the Agile Manifesto, defend the use of self-managing teams in software development in substitution of hierarchically managed, traditional teams. The goal of this research was to study how a self-managing software team works in practice and how the behaviors of the software organization support or hinder the effectiveness of such teams. We performed a single case holistic case study, looking in depth into the actual behavior of a mature Scrum team in industry.   Using interviews and participant observation, we collected qualitative data from five team members in several interactions. We extract the behavior of the team and of the software company in terms of the determinants of self-managing team effectiveness defined in a theoretical model from the literature. We found evidence that 17 out of 24 determinants of this model exist in the studied context. We concluded that certain determinants can support or facilitate the adoption of methodologies like Scrum, while the use of Scrum may affect other determinants.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>andre r g do a leitao</Author_Name>
    <Author_Position>6</Author_Position>
    <Author_Id>2411331287</Author_Id>
    <All_Authors>elisa s f cardozo, fabio q b da silva, cleviton v f monteiro, miguel andrade filho, dacio n m neto, felipe farias, isabella r m dos santos, andre r g do a leitao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995705296</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>The need of a person oriented approach to software process assessment</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614752</DOI>
    <Abstract>This paper represents a coherent critique of software process assessment, focusing on the concerns and perceived shortcomings present. A call is made to re-direct attention and resources toward understanding the true nature of people in software process assessment. The important, possibly crucial role of people at an individual, team-based and organizational level in the assessment process that precedes software process improvement is discussed by considering such factors as the relationship between a person's perception of the software process, the learning process and motivation and using theory and empirical findings published in the literature. It is suggested that the poor recognition of the many human factors may be a major reason why the software process is so difficult to improve. It is argued that the clarification of such important issues will help to achieve a significant step forward in software process assessment and improvement; and lead to significant improvements in quality, satisfaction and performance. In order to systematize our position and future research, several statements are formulated concerning the importance of people.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>alberto sampaio</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>international student exchange programs</Affiliation_Name>
    <Author_Id>2126739160</Author_Id>
    <All_Authors>alberto sampaio, edwin gray, isabel sampaio</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995705296</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>The need of a person oriented approach to software process assessment</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614752</DOI>
    <Abstract>This paper represents a coherent critique of software process assessment, focusing on the concerns and perceived shortcomings present. A call is made to re-direct attention and resources toward understanding the true nature of people in software process assessment. The important, possibly crucial role of people at an individual, team-based and organizational level in the assessment process that precedes software process improvement is discussed by considering such factors as the relationship between a person's perception of the software process, the learning process and motivation and using theory and empirical findings published in the literature. It is suggested that the poor recognition of the many human factors may be a major reason why the software process is so difficult to improve. It is argued that the clarification of such important issues will help to achieve a significant step forward in software process assessment and improvement; and lead to significant improvements in quality, satisfaction and performance. In order to systematize our position and future research, several statements are formulated concerning the importance of people.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>edwin gray</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>environ</Affiliation_Name>
    <Author_Id>2250640859</Author_Id>
    <All_Authors>alberto sampaio, edwin gray, isabel sampaio</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1995705296</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>The need of a person oriented approach to software process assessment</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614752</DOI>
    <Abstract>This paper represents a coherent critique of software process assessment, focusing on the concerns and perceived shortcomings present. A call is made to re-direct attention and resources toward understanding the true nature of people in software process assessment. The important, possibly crucial role of people at an individual, team-based and organizational level in the assessment process that precedes software process improvement is discussed by considering such factors as the relationship between a person's perception of the software process, the learning process and motivation and using theory and empirical findings published in the literature. It is suggested that the poor recognition of the many human factors may be a major reason why the software process is so difficult to improve. It is argued that the clarification of such important issues will help to achieve a significant step forward in software process assessment and improvement; and lead to significant improvements in quality, satisfaction and performance. In order to systematize our position and future research, several statements are formulated concerning the importance of people.</Abstract>
    <Abstract_Length>171</Abstract_Length>
    <Author_Name>isabel sampaio</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>international student exchange programs</Affiliation_Name>
    <Author_Id>2406849757</Author_Id>
    <All_Authors>alberto sampaio, edwin gray, isabel sampaio</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1996868739</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Can social screencasting help developers learn new tools</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.18</DOI>
    <Abstract>An effective way to learn about software development tools is by directly observing peers' workflows. However, these  tool knowledge transfer  events happen infrequently because developers must be both colocated and available. We explore an online social screencasting system that removes the dependencies of colocation and availability while maintaining the beneficial tool knowledge transfer of  peer observation.  Our results from a formative study indicate these online observations happen more frequently than in-person observations, but their effects are only temporary. We conclude that while peer observation facilitates online knowledge transfer, it is not the only component --- other social factors may be involved.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>titus barik</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>1989569963</Author_Id>
    <All_Authors>titus barik, kevin lubick, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1996868739</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Can social screencasting help developers learn new tools</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.18</DOI>
    <Abstract>An effective way to learn about software development tools is by directly observing peers' workflows. However, these  tool knowledge transfer  events happen infrequently because developers must be both colocated and available. We explore an online social screencasting system that removes the dependencies of colocation and availability while maintaining the beneficial tool knowledge transfer of  peer observation.  Our results from a formative study indicate these online observations happen more frequently than in-person observations, but their effects are only temporary. We conclude that while peer observation facilitates online knowledge transfer, it is not the only component --- other social factors may be involved.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>kevin lubick</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2223736025</Author_Id>
    <All_Authors>titus barik, kevin lubick, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1996868739</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Can social screencasting help developers learn new tools</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.18</DOI>
    <Abstract>An effective way to learn about software development tools is by directly observing peers' workflows. However, these  tool knowledge transfer  events happen infrequently because developers must be both colocated and available. We explore an online social screencasting system that removes the dependencies of colocation and availability while maintaining the beneficial tool knowledge transfer of  peer observation.  Our results from a formative study indicate these online observations happen more frequently than in-person observations, but their effects are only temporary. We conclude that while peer observation facilitates online knowledge transfer, it is not the only component --- other social factors may be involved.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>emerson r murphyhill</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2342860276</Author_Id>
    <All_Authors>titus barik, kevin lubick, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1997231968</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Motivations for collaboration in software design decision making</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614748</DOI>
    <Abstract>Software design is a result of software design decisions made at different stages of the development process and these decisions are often made collaboratively. As part of an ongoing research project to understand and improve this collaborative process we have interviewed 13 designers about their design processes. In this paper we report on a preliminary analysis of our interview data focusing on why people collaborate around design decisions. We found that designers collaborate to improve their design decisions, save or share decision making effort, and in response to social or organizational work contexts.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>jonathan sillito</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>1801224773</Author_Id>
    <All_Authors>jonathan sillito, amani alali</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1997231968</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Motivations for collaboration in software design decision making</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614748</DOI>
    <Abstract>Software design is a result of software design decisions made at different stages of the development process and these decisions are often made collaboratively. As part of an ongoing research project to understand and improve this collaborative process we have interviewed 13 designers about their design processes. In this paper we report on a preliminary analysis of our interview data focusing on why people collaborate around design decisions. We found that designers collaborate to improve their design decisions, save or share decision making effort, and in response to social or organizational work contexts.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>amani alali</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2476486424</Author_Id>
    <All_Authors>jonathan sillito, amani alali</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1998841656</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Measuring OSS quality trough centrality</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370131</DOI>
    <Abstract>In this study, we explore whether the degree of centrality, betweenness and density of the open source software or OSS team communications network have any bearing on the quality of the software developed. We measure the quality of OSS in terms of number of defect fixed per software promotion, the number of defects reported at different severity levels and the average number of days for a defect to be fixed for each project team. The data required to conduct the analysis needs to be of OSS projects, their team structure and also contribution of the projects user community and immediate development team. We extract the communications pattern of OSS projects development teams from online forums or message boards as the developers are usually located in different geographic areas. We use SorceForge.net for collecting relevant coordination related data for this study; which is the central resource for hosting more than 100,000 open source development projects and with over 1 million registered users that participate in the development of high profile OSS projects. The outcome of this study suggests that there is a correlation between social network characteristics and strong and poor performing projects in an OSS environment.</Abstract>
    <Abstract_Length>196</Abstract_Length>
    <Author_Name>liaquat hossain</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of sydney</Affiliation_Name>
    <Author_Id>2003989378</Author_Id>
    <All_Authors>liaquat hossain, david zhou</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>1998841656</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Measuring OSS quality trough centrality</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370131</DOI>
    <Abstract>In this study, we explore whether the degree of centrality, betweenness and density of the open source software or OSS team communications network have any bearing on the quality of the software developed. We measure the quality of OSS in terms of number of defect fixed per software promotion, the number of defects reported at different severity levels and the average number of days for a defect to be fixed for each project team. The data required to conduct the analysis needs to be of OSS projects, their team structure and also contribution of the projects user community and immediate development team. We extract the communications pattern of OSS projects development teams from online forums or message boards as the developers are usually located in different geographic areas. We use SorceForge.net for collecting relevant coordination related data for this study; which is the central resource for hosting more than 100,000 open source development projects and with over 1 million registered users that participate in the development of high profile OSS projects. The outcome of this study suggests that there is a correlation between social network characteristics and strong and poor performing projects in an OSS environment.</Abstract>
    <Abstract_Length>196</Abstract_Length>
    <Author_Name>david zhou</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of sydney</Affiliation_Name>
    <Author_Id>2342135361</Author_Id>
    <All_Authors>liaquat hossain, david zhou</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2000152455</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Designing motivation strategies for software engineering teams: an empirical study</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833324</DOI>
    <Abstract>Background.   Even though the amount of researches related to the behavior of software development teams has significantly increased in recent years, researches focusing on  motivation  as an alternative to lead software projects to success are still rare.     Objective/Method:   This article describes a survey conducted to identify the relative importance of some factors that affect the motivation of software engineers at work. The conceptual underpinnings of human motivation used in the research are the Expectancy Theory and the Motivation-Hygiene Theory.     Results/Conclusion:   In the study, a cross-sectional survey was conducted involving 176 software engineers employed at 20 software firms from the State of Pernambuco, Brazil. Data collected with the survey revealed not only the order in which the set of motivators influences the software engineers' motivation and other peripheral findings, but also served as a basis to design three motivation strategies for software engineering teams.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>a cesar c franca</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>federal university of pernambuco</Affiliation_Name>
    <Author_Id>2007395943</Author_Id>
    <All_Authors>a cesar c franca, fabio q b da silva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2000152455</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Designing motivation strategies for software engineering teams: an empirical study</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833324</DOI>
    <Abstract>Background.   Even though the amount of researches related to the behavior of software development teams has significantly increased in recent years, researches focusing on  motivation  as an alternative to lead software projects to success are still rare.     Objective/Method:   This article describes a survey conducted to identify the relative importance of some factors that affect the motivation of software engineers at work. The conceptual underpinnings of human motivation used in the research are the Expectancy Theory and the Motivation-Hygiene Theory.     Results/Conclusion:   In the study, a cross-sectional survey was conducted involving 176 software engineers employed at 20 software firms from the State of Pernambuco, Brazil. Data collected with the survey revealed not only the order in which the set of motivators influences the software engineers' motivation and other peripheral findings, but also served as a basis to design three motivation strategies for software engineering teams.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>fabio q b da silva</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>federal university of pernambuco</Affiliation_Name>
    <Author_Id>2580425902</Author_Id>
    <All_Authors>a cesar c franca, fabio q b da silva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2000255305</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Social software in global software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833318</DOI>
    <Abstract>Social software (SoSo) is defined by Farkas as tools that (1) allow people to communicate, collaborate, and build community online (2) can be syndicated, shared, reused or remixed and (3) let people learn easily from and capitalize on the behavior and knowledge of others. [1]. SoSo include a wide variety of tools such as: instant messaging, internet forums, mailing lists, blogs, wikis, social network sites, social bookmarking, social libraries, virtual worlds. Though normally rather belonging to the private realm, the use of social software in corporate context has been reported, e.g. as a way to share knowledge [2, 3].</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>yvonne dittrich</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>it university</Affiliation_Name>
    <Author_Id>146716645</Author_Id>
    <All_Authors>yvonne dittrich, rosalba giuffrida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2000255305</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Social software in global software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833318</DOI>
    <Abstract>Social software (SoSo) is defined by Farkas as tools that (1) allow people to communicate, collaborate, and build community online (2) can be syndicated, shared, reused or remixed and (3) let people learn easily from and capitalize on the behavior and knowledge of others. [1]. SoSo include a wide variety of tools such as: instant messaging, internet forums, mailing lists, blogs, wikis, social network sites, social bookmarking, social libraries, virtual worlds. Though normally rather belonging to the private realm, the use of social software in corporate context has been reported, e.g. as a way to share knowledge [2, 3].</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>rosalba giuffrida</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>it university</Affiliation_Name>
    <Author_Id>2000571226</Author_Id>
    <All_Authors>yvonne dittrich, rosalba giuffrida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2001979442</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Understanding the role of requirements artifacts in kanban</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593707</DOI>
    <Abstract>User stories are a well-established way to record requirements in agile projects. They can be used as such to guide the daily work of developers or be split further into tasks, which usually represent more technical requirements. User stories and tasks guide communication and collaboration in software projects. However, there are several challenges with writing and using user stories in practice that are not well documented yet. Learning about these challenges could raise awareness for potential problems. Understanding how requirements artifacts are used for daily work could lead to better guidelines on writing stories that support daily work tasks. Moreover, user stories may not be appropriate to capture all kinds of requirements that are relevant for a project. We explore how to utilize requirements artifacts effectively, what their benefits and challenges are, and how their scope granularity affects their utility. For this, we studied a software project carried out in the Software Factory at the Department of Computer Science, University of Helsinki. We investigated the requirements artifacts and then interviewed the developers and the customer about their experiences. Story and task cards have helped the participants throughout the project. However, despite having a Kanban board and rich communication within the team, some requirements were still too implicit, which also led to misunderstandings. This and other challenges revealed by the study can guide future in-depth research.</Abstract>
    <Abstract_Length>225</Abstract_Length>
    <Author_Name>fabian fagerholm</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of helsinki</Affiliation_Name>
    <Author_Id>46253878</Author_Id>
    <All_Authors>fabian fagerholm, olga liskin, jurgen munch, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2001979442</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Understanding the role of requirements artifacts in kanban</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593707</DOI>
    <Abstract>User stories are a well-established way to record requirements in agile projects. They can be used as such to guide the daily work of developers or be split further into tasks, which usually represent more technical requirements. User stories and tasks guide communication and collaboration in software projects. However, there are several challenges with writing and using user stories in practice that are not well documented yet. Learning about these challenges could raise awareness for potential problems. Understanding how requirements artifacts are used for daily work could lead to better guidelines on writing stories that support daily work tasks. Moreover, user stories may not be appropriate to capture all kinds of requirements that are relevant for a project. We explore how to utilize requirements artifacts effectively, what their benefits and challenges are, and how their scope granularity affects their utility. For this, we studied a software project carried out in the Software Factory at the Department of Computer Science, University of Helsinki. We investigated the requirements artifacts and then interviewed the developers and the customer about their experiences. Story and task cards have helped the participants throughout the project. However, despite having a Kanban board and rich communication within the team, some requirements were still too implicit, which also led to misunderstandings. This and other challenges revealed by the study can guide future in-depth research.</Abstract>
    <Abstract_Length>225</Abstract_Length>
    <Author_Name>olga liskin</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>leibniz university of hanover</Affiliation_Name>
    <Author_Id>2027096212</Author_Id>
    <All_Authors>fabian fagerholm, olga liskin, jurgen munch, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2001979442</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Understanding the role of requirements artifacts in kanban</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593707</DOI>
    <Abstract>User stories are a well-established way to record requirements in agile projects. They can be used as such to guide the daily work of developers or be split further into tasks, which usually represent more technical requirements. User stories and tasks guide communication and collaboration in software projects. However, there are several challenges with writing and using user stories in practice that are not well documented yet. Learning about these challenges could raise awareness for potential problems. Understanding how requirements artifacts are used for daily work could lead to better guidelines on writing stories that support daily work tasks. Moreover, user stories may not be appropriate to capture all kinds of requirements that are relevant for a project. We explore how to utilize requirements artifacts effectively, what their benefits and challenges are, and how their scope granularity affects their utility. For this, we studied a software project carried out in the Software Factory at the Department of Computer Science, University of Helsinki. We investigated the requirements artifacts and then interviewed the developers and the customer about their experiences. Story and task cards have helped the participants throughout the project. However, despite having a Kanban board and rich communication within the team, some requirements were still too implicit, which also led to misunderstandings. This and other challenges revealed by the study can guide future in-depth research.</Abstract>
    <Abstract_Length>225</Abstract_Length>
    <Author_Name>jurgen munch</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of helsinki</Affiliation_Name>
    <Author_Id>2095595419</Author_Id>
    <All_Authors>fabian fagerholm, olga liskin, jurgen munch, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2001979442</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Understanding the role of requirements artifacts in kanban</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593707</DOI>
    <Abstract>User stories are a well-established way to record requirements in agile projects. They can be used as such to guide the daily work of developers or be split further into tasks, which usually represent more technical requirements. User stories and tasks guide communication and collaboration in software projects. However, there are several challenges with writing and using user stories in practice that are not well documented yet. Learning about these challenges could raise awareness for potential problems. Understanding how requirements artifacts are used for daily work could lead to better guidelines on writing stories that support daily work tasks. Moreover, user stories may not be appropriate to capture all kinds of requirements that are relevant for a project. We explore how to utilize requirements artifacts effectively, what their benefits and challenges are, and how their scope granularity affects their utility. For this, we studied a software project carried out in the Software Factory at the Department of Computer Science, University of Helsinki. We investigated the requirements artifacts and then interviewed the developers and the customer about their experiences. Story and task cards have helped the participants throughout the project. However, despite having a Kanban board and rich communication within the team, some requirements were still too implicit, which also led to misunderstandings. This and other challenges revealed by the study can guide future in-depth research.</Abstract>
    <Abstract_Length>225</Abstract_Length>
    <Author_Name>kurt schneider</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>leibniz university of hanover</Affiliation_Name>
    <Author_Id>2181639357</Author_Id>
    <All_Authors>fabian fagerholm, olga liskin, jurgen munch, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2002158216</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Social media in transparent work environments</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614733</DOI>
    <Abstract>Social media is being integrated into work environments making them more transparent. When the work environment is transparent, it has the potential to allow projects to transmit information about work artifacts and events quickly through a large network. Using signaling theory, we propose a theory that users interpret this information and then make work-related decisions about attention and effort allocation in a principled manner. In the open source context of voluntary participation, broadcast activity information act as signals that allow developers to make highly informed choices about where to expend their attention and effort and with whom to collaborate. We propose four potential signals from literature and interviews with developers in our research setting and discuss the implications for social media in software development environments.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>james d herbsleb</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>202682525</Author_Id>
    <All_Authors>james d herbsleb, laura dabbish, jason tsay</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2002158216</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Social media in transparent work environments</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614733</DOI>
    <Abstract>Social media is being integrated into work environments making them more transparent. When the work environment is transparent, it has the potential to allow projects to transmit information about work artifacts and events quickly through a large network. Using signaling theory, we propose a theory that users interpret this information and then make work-related decisions about attention and effort allocation in a principled manner. In the open source context of voluntary participation, broadcast activity information act as signals that allow developers to make highly informed choices about where to expend their attention and effort and with whom to collaborate. We propose four potential signals from literature and interviews with developers in our research setting and discuss the implications for social media in software development environments.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>laura dabbish</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>1231469998</Author_Id>
    <All_Authors>james d herbsleb, laura dabbish, jason tsay</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2002158216</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Social media in transparent work environments</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614733</DOI>
    <Abstract>Social media is being integrated into work environments making them more transparent. When the work environment is transparent, it has the potential to allow projects to transmit information about work artifacts and events quickly through a large network. Using signaling theory, we propose a theory that users interpret this information and then make work-related decisions about attention and effort allocation in a principled manner. In the open source context of voluntary participation, broadcast activity information act as signals that allow developers to make highly informed choices about where to expend their attention and effort and with whom to collaborate. We propose four potential signals from literature and interviews with developers in our research setting and discuss the implications for social media in software development environments.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>jason tsay</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2116883008</Author_Id>
    <All_Authors>james d herbsleb, laura dabbish, jason tsay</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2003285671</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Sharing usability information in interactive system development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370117</DOI>
    <Abstract>In this paper we report on a preliminary study of usability information sharing in interactive system development. The study was conducted at a large technology company in the United States. The purpose of the study was to understand the usability information sharing practices of various members of multidisciplinary interactive system development teams. We found that the different job roles, specifically, usability expert, developer, and project manager share usability information in many ways.</Abstract>
    <Abstract_Length>72</Abstract_Length>
    <Author_Name>john m carroll</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>pennsylvania state university</Affiliation_Name>
    <Author_Id>2144459651</Author_Id>
    <All_Authors>john m carroll, paula m bach, jiang hao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2003285671</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Sharing usability information in interactive system development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370117</DOI>
    <Abstract>In this paper we report on a preliminary study of usability information sharing in interactive system development. The study was conducted at a large technology company in the United States. The purpose of the study was to understand the usability information sharing practices of various members of multidisciplinary interactive system development teams. We found that the different job roles, specifically, usability expert, developer, and project manager share usability information in many ways.</Abstract>
    <Abstract_Length>72</Abstract_Length>
    <Author_Name>paula m bach</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>pennsylvania state university</Affiliation_Name>
    <Author_Id>2149572791</Author_Id>
    <All_Authors>john m carroll, paula m bach, jiang hao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2003285671</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Sharing usability information in interactive system development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370117</DOI>
    <Abstract>In this paper we report on a preliminary study of usability information sharing in interactive system development. The study was conducted at a large technology company in the United States. The purpose of the study was to understand the usability information sharing practices of various members of multidisciplinary interactive system development teams. We found that the different job roles, specifically, usability expert, developer, and project manager share usability information in many ways.</Abstract>
    <Abstract_Length>72</Abstract_Length>
    <Author_Name>jiang hao</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>pennsylvania state university</Affiliation_Name>
    <Author_Id>2225893718</Author_Id>
    <All_Authors>john m carroll, paula m bach, jiang hao</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2003474436</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Agile offsharing: Using pair work to overcome nearshoring difficulties</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614755</DOI>
    <Abstract>A major problem in distributed development situations, in particular offshoring situations, is often creating a proper understanding of the requirements at the remote site. It is difficult even if such understanding is available at the local site. This note argues why cross-site, synchronous, closely-coupled pair work at an engineering level, such as pair programming, may be a method for solving this problem and that corresponding research should be carried out.</Abstract>
    <Abstract_Length>70</Abstract_Length>
    <Author_Name>lutz prechelt</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>328104153</Author_Id>
    <All_Authors>lutz prechelt</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2005569402</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>The human side of software as a service: building a tighter fit between human experiences and SOA design practices</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.31</DOI>
    <Abstract>Software as a Service (SaaS) is now recognized as an effective model for the development, deployment, and customization of software. It has been reported that it reduces the costs as well as ensures the long-term sustainability of software systems. Monolithic software systems are seen as a set of interrelated and geographically distributed services over the Internet. Developers and providers can easily customize services while being able to accommodate a large range of stakeholders. At the core of this service orientation of the whole field of software development are the Service-Oriented Architecture (SOA) design principles. These principles detail what we should do, but not how and by whom it has to be done. From a human perspective -- all stakeholders -- we argue that the current SOA design principles can be linked and benefit from the user experience/user-centric design. Such combination can lead to a user experience-centric and SOA-based design approach that guarantees that SaaS is secure, yet trustable, useful, usable and accessible. In this position paper, we reviewed SOA/SaaS from the human dimension with the goal to bridging the gaps between SOA design principles and the User Experience (UX) design communities including Human-Computer Interaction (HCI) and service design. One practical goal is to enhance the SOA, as a technological platform with elements of UX including the social aspects of their interactions within the organizational structure and processes.</Abstract>
    <Abstract_Length>227</Abstract_Length>
    <Author_Name>ahmed seffah</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>lappeenranta university of technology</Affiliation_Name>
    <Author_Id>1993444766</Author_Id>
    <All_Authors>ahmed seffah, victoria karaseva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2005569402</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>The human side of software as a service: building a tighter fit between human experiences and SOA design practices</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.31</DOI>
    <Abstract>Software as a Service (SaaS) is now recognized as an effective model for the development, deployment, and customization of software. It has been reported that it reduces the costs as well as ensures the long-term sustainability of software systems. Monolithic software systems are seen as a set of interrelated and geographically distributed services over the Internet. Developers and providers can easily customize services while being able to accommodate a large range of stakeholders. At the core of this service orientation of the whole field of software development are the Service-Oriented Architecture (SOA) design principles. These principles detail what we should do, but not how and by whom it has to be done. From a human perspective -- all stakeholders -- we argue that the current SOA design principles can be linked and benefit from the user experience/user-centric design. Such combination can lead to a user experience-centric and SOA-based design approach that guarantees that SaaS is secure, yet trustable, useful, usable and accessible. In this position paper, we reviewed SOA/SaaS from the human dimension with the goal to bridging the gaps between SOA design principles and the User Experience (UX) design communities including Human-Computer Interaction (HCI) and service design. One practical goal is to enhance the SOA, as a technological platform with elements of UX including the social aspects of their interactions within the organizational structure and processes.</Abstract>
    <Abstract_Length>227</Abstract_Length>
    <Author_Name>victoria karaseva</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>lappeenranta university of technology</Affiliation_Name>
    <Author_Id>2232311829</Author_Id>
    <All_Authors>ahmed seffah, victoria karaseva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2007384730</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Do XP customer-developer interactions impact motivation? findings from an industrial case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593718</DOI>
    <Abstract>As part of a larger research project to understand and improve motivation in an XP-based, software development organization, we undertook a study to investigate the impact of customer-developer interactions on motivation in this organization. Among the impacts found, an individual’s perceived level of control within the interaction emerged as significant. We describe the specific behaviors which shape an individual’s perceived control, and thus motivation, in our context, and investigate the underlying causes for these behaviors by assessing them in accordance with extant social-psychological theory. We find that the very nature of XP itself imparts strong psychological pressures on participants which can positively affect their interactions, and thus, motivation. However, these pressures also contribute to de-motivation in our context, when their effects on customer-developer interactions are not appropriately monitored and mitigated.</Abstract>
    <Abstract_Length>130</Abstract_Length>
    <Author_Name>k j bell</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>seneca college</Affiliation_Name>
    <Author_Id>2119409237</Author_Id>
    <All_Authors>k j bell, denise m woit</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2007384730</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Do XP customer-developer interactions impact motivation? findings from an industrial case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593718</DOI>
    <Abstract>As part of a larger research project to understand and improve motivation in an XP-based, software development organization, we undertook a study to investigate the impact of customer-developer interactions on motivation in this organization. Among the impacts found, an individual’s perceived level of control within the interaction emerged as significant. We describe the specific behaviors which shape an individual’s perceived control, and thus motivation, in our context, and investigate the underlying causes for these behaviors by assessing them in accordance with extant social-psychological theory. We find that the very nature of XP itself imparts strong psychological pressures on participants which can positively affect their interactions, and thus, motivation. However, these pressures also contribute to de-motivation in our context, when their effects on customer-developer interactions are not appropriately monitored and mitigated.</Abstract>
    <Abstract_Length>130</Abstract_Length>
    <Author_Name>denise m woit</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ryerson university</Affiliation_Name>
    <Author_Id>2589315164</Author_Id>
    <All_Authors>k j bell, denise m woit</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2009581584</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>The economy of collective attention for situated knowledge collaboration in software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370142</DOI>
    <Abstract>Because the knowledge required for the construction of a complex software system is often widely distributed among its members, programmers routinely engage in collaboration with each other to acquire knowledge resided in the heads of their peers to accomplish their own programming tasks. We call this kind of collaboration situated knowledge collaboration. Situated knowledge collaboration comes with costs and the costs vary depending on the communication mechanism used. To understand the cost-benefit structure of different communication mechanisms in support of situated knowledge collaboration, we propose the conceptual framework of collective attention economy. The analytic power of the conceptual framework is illustrated in the comparison of two communication mechanisms.</Abstract>
    <Abstract_Length>108</Abstract_Length>
    <Author_Name>kumiyo nakakoji</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of tokyo</Affiliation_Name>
    <Author_Id>190126267</Author_Id>
    <All_Authors>kumiyo nakakoji, yunwen ye, yasuhiro yamamoto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2009581584</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>The economy of collective attention for situated knowledge collaboration in software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370142</DOI>
    <Abstract>Because the knowledge required for the construction of a complex software system is often widely distributed among its members, programmers routinely engage in collaboration with each other to acquire knowledge resided in the heads of their peers to accomplish their own programming tasks. We call this kind of collaboration situated knowledge collaboration. Situated knowledge collaboration comes with costs and the costs vary depending on the communication mechanism used. To understand the cost-benefit structure of different communication mechanisms in support of situated knowledge collaboration, we propose the conceptual framework of collective attention economy. The analytic power of the conceptual framework is illustrated in the comparison of two communication mechanisms.</Abstract>
    <Abstract_Length>108</Abstract_Length>
    <Author_Name>yunwen ye</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of colorado boulder</Affiliation_Name>
    <Author_Id>2124465687</Author_Id>
    <All_Authors>kumiyo nakakoji, yunwen ye, yasuhiro yamamoto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2009581584</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>The economy of collective attention for situated knowledge collaboration in software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370142</DOI>
    <Abstract>Because the knowledge required for the construction of a complex software system is often widely distributed among its members, programmers routinely engage in collaboration with each other to acquire knowledge resided in the heads of their peers to accomplish their own programming tasks. We call this kind of collaboration situated knowledge collaboration. Situated knowledge collaboration comes with costs and the costs vary depending on the communication mechanism used. To understand the cost-benefit structure of different communication mechanisms in support of situated knowledge collaboration, we propose the conceptual framework of collective attention economy. The analytic power of the conceptual framework is illustrated in the comparison of two communication mechanisms.</Abstract>
    <Abstract_Length>108</Abstract_Length>
    <Author_Name>yasuhiro yamamoto</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of tokyo</Affiliation_Name>
    <Author_Id>2181935708</Author_Id>
    <All_Authors>kumiyo nakakoji, yunwen ye, yasuhiro yamamoto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010105258</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Attitude and usage of collaboration tools in GSE: a practitioner oriented theory</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223011</DOI>
    <Abstract>Collaboration tools support global software engineering (GSE) by providing relevant information and work context to developers, essentially seeking to provide a local context for developers working globally. Although many collaborative tools have been developed, we have insufficient knowledge of how they are used in practice. In this paper, we review the recent empirical studies on collaboration tools for GSE. Then we theorize a conceptual framework that aims to explain how the unique contextual dimensions of GSE (e.g. culture diversity and adaptation, etc.) influence practitioners' attitudes toward, and usage of, the tools. The conceptual framework will guide our future empirical studies, and it will be refined by the empirical evidence collected in these studies.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>david f redmiles</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>311754748</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer, sabrina marczak, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010105258</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Attitude and usage of collaboration tools in GSE: a practitioner oriented theory</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223011</DOI>
    <Abstract>Collaboration tools support global software engineering (GSE) by providing relevant information and work context to developers, essentially seeking to provide a local context for developers working globally. Although many collaborative tools have been developed, we have insufficient knowledge of how they are used in practice. In this paper, we review the recent empirical studies on collaboration tools for GSE. Then we theorize a conceptual framework that aims to explain how the unique contextual dimensions of GSE (e.g. culture diversity and adaptation, etc.) influence practitioners' attitudes toward, and usage of, the tools. The conceptual framework will guide our future empirical studies, and it will be refined by the empirical evidence collected in these studies.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>ban alani</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>1981493853</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer, sabrina marczak, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010105258</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Attitude and usage of collaboration tools in GSE: a practitioner oriented theory</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223011</DOI>
    <Abstract>Collaboration tools support global software engineering (GSE) by providing relevant information and work context to developers, essentially seeking to provide a local context for developers working globally. Although many collaborative tools have been developed, we have insufficient knowledge of how they are used in practice. In this paper, we review the recent empirical studies on collaboration tools for GSE. Then we theorize a conceptual framework that aims to explain how the unique contextual dimensions of GSE (e.g. culture diversity and adaptation, etc.) influence practitioners' attitudes toward, and usage of, the tools. The conceptual framework will guide our future empirical studies, and it will be refined by the empirical evidence collected in these studies.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>erik trainer</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2116316123</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer, sabrina marczak, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010105258</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Attitude and usage of collaboration tools in GSE: a practitioner oriented theory</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223011</DOI>
    <Abstract>Collaboration tools support global software engineering (GSE) by providing relevant information and work context to developers, essentially seeking to provide a local context for developers working globally. Although many collaborative tools have been developed, we have insufficient knowledge of how they are used in practice. In this paper, we review the recent empirical studies on collaboration tools for GSE. Then we theorize a conceptual framework that aims to explain how the unique contextual dimensions of GSE (e.g. culture diversity and adaptation, etc.) influence practitioners' attitudes toward, and usage of, the tools. The conceptual framework will guide our future empirical studies, and it will be refined by the empirical evidence collected in these studies.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>sabrina marczak</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>pontificia universidade catolica do rio grande do sul</Affiliation_Name>
    <Author_Id>2206271674</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer, sabrina marczak, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010105258</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Attitude and usage of collaboration tools in GSE: a practitioner oriented theory</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223011</DOI>
    <Abstract>Collaboration tools support global software engineering (GSE) by providing relevant information and work context to developers, essentially seeking to provide a local context for developers working globally. Although many collaborative tools have been developed, we have insufficient knowledge of how they are used in practice. In this paper, we review the recent empirical studies on collaboration tools for GSE. Then we theorize a conceptual framework that aims to explain how the unique contextual dimensions of GSE (e.g. culture diversity and adaptation, etc.) influence practitioners' attitudes toward, and usage of, the tools. The conceptual framework will guide our future empirical studies, and it will be refined by the empirical evidence collected in these studies.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>yi wang</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2585802649</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer, sabrina marczak, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010179211</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Fathoming software evangelists with the D-index</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.26</DOI>
    <Abstract>The increased importance represented by open-source and crowd-sourced software developers and software development in general, inspired us to consider the following dilemma: can we "compute" virtuous software developers? The D-Index is our preliminary attempt. Essentially, the D-Index meaningfully equates several indicators for the virtues of a developer, such as, contributed code, its quality, mentoring in online learning communities, community engagement. Our preliminary evaluation of the index suggests that establishing the virtues for certain developers eases the identification of software "evangelists", key success enablers for software communities.</Abstract>
    <Abstract_Length>86</Abstract_Length>
    <Author_Name>damian andrew tamburri</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>vu university amsterdam</Affiliation_Name>
    <Author_Id>2055140049</Author_Id>
    <All_Authors>damian andrew tamburri, elisabetta di nitto, ferran borreguero, chengyu zheng, dmitrii stebliuk</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010179211</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Fathoming software evangelists with the D-index</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.26</DOI>
    <Abstract>The increased importance represented by open-source and crowd-sourced software developers and software development in general, inspired us to consider the following dilemma: can we "compute" virtuous software developers? The D-Index is our preliminary attempt. Essentially, the D-Index meaningfully equates several indicators for the virtues of a developer, such as, contributed code, its quality, mentoring in online learning communities, community engagement. Our preliminary evaluation of the index suggests that establishing the virtues for certain developers eases the identification of software "evangelists", key success enablers for software communities.</Abstract>
    <Abstract_Length>86</Abstract_Length>
    <Author_Name>elisabetta di nitto</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>instituto politecnico nacional</Affiliation_Name>
    <Author_Id>2110075340</Author_Id>
    <All_Authors>damian andrew tamburri, elisabetta di nitto, ferran borreguero, chengyu zheng, dmitrii stebliuk</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010179211</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Fathoming software evangelists with the D-index</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.26</DOI>
    <Abstract>The increased importance represented by open-source and crowd-sourced software developers and software development in general, inspired us to consider the following dilemma: can we "compute" virtuous software developers? The D-Index is our preliminary attempt. Essentially, the D-Index meaningfully equates several indicators for the virtues of a developer, such as, contributed code, its quality, mentoring in online learning communities, community engagement. Our preliminary evaluation of the index suggests that establishing the virtues for certain developers eases the identification of software "evangelists", key success enablers for software communities.</Abstract>
    <Abstract_Length>86</Abstract_Length>
    <Author_Name>ferran borreguero</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>instituto politecnico nacional</Affiliation_Name>
    <Author_Id>2248272339</Author_Id>
    <All_Authors>damian andrew tamburri, elisabetta di nitto, ferran borreguero, chengyu zheng, dmitrii stebliuk</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010179211</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Fathoming software evangelists with the D-index</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.26</DOI>
    <Abstract>The increased importance represented by open-source and crowd-sourced software developers and software development in general, inspired us to consider the following dilemma: can we "compute" virtuous software developers? The D-Index is our preliminary attempt. Essentially, the D-Index meaningfully equates several indicators for the virtues of a developer, such as, contributed code, its quality, mentoring in online learning communities, community engagement. Our preliminary evaluation of the index suggests that establishing the virtues for certain developers eases the identification of software "evangelists", key success enablers for software communities.</Abstract>
    <Abstract_Length>86</Abstract_Length>
    <Author_Name>chengyu zheng</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>instituto politecnico nacional</Affiliation_Name>
    <Author_Id>2283899918</Author_Id>
    <All_Authors>damian andrew tamburri, elisabetta di nitto, ferran borreguero, chengyu zheng, dmitrii stebliuk</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010179211</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Fathoming software evangelists with the D-index</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.26</DOI>
    <Abstract>The increased importance represented by open-source and crowd-sourced software developers and software development in general, inspired us to consider the following dilemma: can we "compute" virtuous software developers? The D-Index is our preliminary attempt. Essentially, the D-Index meaningfully equates several indicators for the virtues of a developer, such as, contributed code, its quality, mentoring in online learning communities, community engagement. Our preliminary evaluation of the index suggests that establishing the virtues for certain developers eases the identification of software "evangelists", key success enablers for software communities.</Abstract>
    <Abstract_Length>86</Abstract_Length>
    <Author_Name>dmitrii stebliuk</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>instituto politecnico nacional</Affiliation_Name>
    <Author_Id>2346830749</Author_Id>
    <All_Authors>damian andrew tamburri, elisabetta di nitto, ferran borreguero, chengyu zheng, dmitrii stebliuk</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010813215</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Modeling work-ethics spread in software organizations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593714</DOI>
    <Abstract>Most organizations – whether software or otherwise – have a statement of mission, a vision for the future, and values that help them get there. People, on the other hand, have a wide range of ideas, beliefs and objectives. How does one reconcile the two? Otherwise put: how do work practices and ethics that are important from an organizational standpoint get inculcated in employees? We propose a Human Behavior Change model and apply it to the context of ethics spread in software organizations. The model is founded upon an internal cost-reward function of individuals and transmission effect between people that contributes to the decision to change and comply with certain ethics and practices. We use Agent Based Modeling and Simulation (ABMS) technique to represent our model. We experiment with virtual teams and create various scenarios to understand ethic spread. Although our larger aim is to model behavior change, in this early stage of our work, we build models to know how ethics spread through change in compliance behavior. We base our study on existing literature, a limited survey, some assumptions and simulation. Through simulation, we also seek to ask associated questions related to team size and compliance, spread of counter-ethics, message mechanism and speed of spread and the ‘mean time to change’ for different types of individuals.</Abstract>
    <Abstract_Length>217</Abstract_Length>
    <Author_Name>meghendra singh</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2226599669</Author_Id>
    <All_Authors>meghendra singh, sandeep athavale</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2010813215</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Modeling work-ethics spread in software organizations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593714</DOI>
    <Abstract>Most organizations – whether software or otherwise – have a statement of mission, a vision for the future, and values that help them get there. People, on the other hand, have a wide range of ideas, beliefs and objectives. How does one reconcile the two? Otherwise put: how do work practices and ethics that are important from an organizational standpoint get inculcated in employees? We propose a Human Behavior Change model and apply it to the context of ethics spread in software organizations. The model is founded upon an internal cost-reward function of individuals and transmission effect between people that contributes to the decision to change and comply with certain ethics and practices. We use Agent Based Modeling and Simulation (ABMS) technique to represent our model. We experiment with virtual teams and create various scenarios to understand ethic spread. Although our larger aim is to model behavior change, in this early stage of our work, we build models to know how ethics spread through change in compliance behavior. We base our study on existing literature, a limited survey, some assumptions and simulation. Through simulation, we also seek to ask associated questions related to team size and compliance, spread of counter-ethics, message mechanism and speed of spread and the ‘mean time to change’ for different types of individuals.</Abstract>
    <Abstract_Length>217</Abstract_Length>
    <Author_Name>sandeep athavale</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2552030605</Author_Id>
    <All_Authors>meghendra singh, sandeep athavale</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2012429071</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>How does Kanban impact communication and collaboration in software engineering teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614747</DOI>
    <Abstract>Highly iterative development processes such as Kanban have gained significant importance in industry. However, the impact of such processes on team collaboration and communication is widely unknown. In this paper, we analyze how the Kanban process aids software team's behaviors - in particular, communication and collaboration. The team under study developed a mobile payment software product in six iterations over seven weeks. The data were collected by a questionnaire, repeated at the end of each iteration. The results indicate that Kanban has a positive effect at the beginning to get the team working together to identify and coordinate the work. Later phases, when the team members have established good rapport among them, the importance for facilitating team collaboration could not be shown. Results also indicate that Kanban helps team members to collectively identify and surface the missing tasks to keep the pace of the development harmonized across the whole team, resulting into increased collaboration. Besides presenting the study and the results, the article gives an outlook on future work.</Abstract>
    <Abstract_Length>169</Abstract_Length>
    <Author_Name>fabian fagerholm</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of helsinki</Affiliation_Name>
    <Author_Id>46253878</Author_Id>
    <All_Authors>fabian fagerholm, nilay oza, jurgen munch</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2012429071</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>How does Kanban impact communication and collaboration in software engineering teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614747</DOI>
    <Abstract>Highly iterative development processes such as Kanban have gained significant importance in industry. However, the impact of such processes on team collaboration and communication is widely unknown. In this paper, we analyze how the Kanban process aids software team's behaviors - in particular, communication and collaboration. The team under study developed a mobile payment software product in six iterations over seven weeks. The data were collected by a questionnaire, repeated at the end of each iteration. The results indicate that Kanban has a positive effect at the beginning to get the team working together to identify and coordinate the work. Later phases, when the team members have established good rapport among them, the importance for facilitating team collaboration could not be shown. Results also indicate that Kanban helps team members to collectively identify and surface the missing tasks to keep the pace of the development harmonized across the whole team, resulting into increased collaboration. Besides presenting the study and the results, the article gives an outlook on future work.</Abstract>
    <Abstract_Length>169</Abstract_Length>
    <Author_Name>nilay oza</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of helsinki</Affiliation_Name>
    <Author_Id>2054408852</Author_Id>
    <All_Authors>fabian fagerholm, nilay oza, jurgen munch</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2012429071</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>How does Kanban impact communication and collaboration in software engineering teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614747</DOI>
    <Abstract>Highly iterative development processes such as Kanban have gained significant importance in industry. However, the impact of such processes on team collaboration and communication is widely unknown. In this paper, we analyze how the Kanban process aids software team's behaviors - in particular, communication and collaboration. The team under study developed a mobile payment software product in six iterations over seven weeks. The data were collected by a questionnaire, repeated at the end of each iteration. The results indicate that Kanban has a positive effect at the beginning to get the team working together to identify and coordinate the work. Later phases, when the team members have established good rapport among them, the importance for facilitating team collaboration could not be shown. Results also indicate that Kanban helps team members to collectively identify and surface the missing tasks to keep the pace of the development harmonized across the whole team, resulting into increased collaboration. Besides presenting the study and the results, the article gives an outlook on future work.</Abstract>
    <Abstract_Length>169</Abstract_Length>
    <Author_Name>jurgen munch</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of helsinki</Affiliation_Name>
    <Author_Id>2095595419</Author_Id>
    <All_Authors>fabian fagerholm, nilay oza, jurgen munch</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2013659036</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Workplace warriors: identifying team practices of appropriation in software ecosystems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984656</DOI>
    <Abstract>Since the 1990s, the forms of production, distribution, configuration and appropriation of software have changed fundamentally. Nowadays, software is often embedded in  software ecosystems , i.e. in complex interrelations between different stakeholders who are connected by a shared technological platform. In our paper, we investigate how small software teams deal with the challenges of appropriating and configuring software in the Eclipse ecosystem for their daily work. We empirically identify three different approaches for dealing with appropriation in software ecosystems which are represented by the "ideal types"  lone warrior ,  centralized organization , and  collegial collaboration . Based on a discussion of these strategies and the underlying appropriation practices we found in the field, we suggest theoretical and practical implications for supporting appropriation in software ecosystems.</Abstract>
    <Abstract_Length>129</Abstract_Length>
    <Author_Name>sebastian draxler</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>1926255104</Author_Id>
    <All_Authors>sebastian draxler, gunnar stevens, alexander boden, adrian jung</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2013659036</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Workplace warriors: identifying team practices of appropriation in software ecosystems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984656</DOI>
    <Abstract>Since the 1990s, the forms of production, distribution, configuration and appropriation of software have changed fundamentally. Nowadays, software is often embedded in  software ecosystems , i.e. in complex interrelations between different stakeholders who are connected by a shared technological platform. In our paper, we investigate how small software teams deal with the challenges of appropriating and configuring software in the Eclipse ecosystem for their daily work. We empirically identify three different approaches for dealing with appropriation in software ecosystems which are represented by the "ideal types"  lone warrior ,  centralized organization , and  collegial collaboration . Based on a discussion of these strategies and the underlying appropriation practices we found in the field, we suggest theoretical and practical implications for supporting appropriation in software ecosystems.</Abstract>
    <Abstract_Length>129</Abstract_Length>
    <Author_Name>gunnar stevens</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2172061795</Author_Id>
    <All_Authors>sebastian draxler, gunnar stevens, alexander boden, adrian jung</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2013659036</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Workplace warriors: identifying team practices of appropriation in software ecosystems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984656</DOI>
    <Abstract>Since the 1990s, the forms of production, distribution, configuration and appropriation of software have changed fundamentally. Nowadays, software is often embedded in  software ecosystems , i.e. in complex interrelations between different stakeholders who are connected by a shared technological platform. In our paper, we investigate how small software teams deal with the challenges of appropriating and configuring software in the Eclipse ecosystem for their daily work. We empirically identify three different approaches for dealing with appropriation in software ecosystems which are represented by the "ideal types"  lone warrior ,  centralized organization , and  collegial collaboration . Based on a discussion of these strategies and the underlying appropriation practices we found in the field, we suggest theoretical and practical implications for supporting appropriation in software ecosystems.</Abstract>
    <Abstract_Length>129</Abstract_Length>
    <Author_Name>alexander boden</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2304405382</Author_Id>
    <All_Authors>sebastian draxler, gunnar stevens, alexander boden, adrian jung</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2013659036</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Workplace warriors: identifying team practices of appropriation in software ecosystems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984656</DOI>
    <Abstract>Since the 1990s, the forms of production, distribution, configuration and appropriation of software have changed fundamentally. Nowadays, software is often embedded in  software ecosystems , i.e. in complex interrelations between different stakeholders who are connected by a shared technological platform. In our paper, we investigate how small software teams deal with the challenges of appropriating and configuring software in the Eclipse ecosystem for their daily work. We empirically identify three different approaches for dealing with appropriation in software ecosystems which are represented by the "ideal types"  lone warrior ,  centralized organization , and  collegial collaboration . Based on a discussion of these strategies and the underlying appropriation practices we found in the field, we suggest theoretical and practical implications for supporting appropriation in software ecosystems.</Abstract>
    <Abstract_Length>129</Abstract_Length>
    <Author_Name>adrian jung</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2496360122</Author_Id>
    <All_Authors>sebastian draxler, gunnar stevens, alexander boden, adrian jung</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2015449862</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A culture of involving the vox populi for evolution of workforce policy</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593717</DOI>
    <Abstract>In this paper, we present a pilot study of software and other industries – such as research, advertising and education – designed to understand factors influencing work ethics, policy making, employee engagement and organizational culture, and to begin uncovering the interaction effects thereof. Past research reveals that these factors are highly relevant to both productivity and attrition. So we collected and analyzed data from 56 employees via a survey on self-beliefs and reports of work ethics related to both self and team. Preliminary analyses using demographics and psychographics were undertaken. Interestingly, we found that the two industries differed very little, on the variables measured. An interactionist perspective – according to which human attitude and behavior are a function of the fit between personality and the environment – and paying close heed to the voice of the employees or the vox populi are recommended.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>aditi kumar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2224806988</Author_Id>
    <All_Authors>aditi kumar, deepa athle, vinay katiyar</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2015449862</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A culture of involving the vox populi for evolution of workforce policy</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593717</DOI>
    <Abstract>In this paper, we present a pilot study of software and other industries – such as research, advertising and education – designed to understand factors influencing work ethics, policy making, employee engagement and organizational culture, and to begin uncovering the interaction effects thereof. Past research reveals that these factors are highly relevant to both productivity and attrition. So we collected and analyzed data from 56 employees via a survey on self-beliefs and reports of work ethics related to both self and team. Preliminary analyses using demographics and psychographics were undertaken. Interestingly, we found that the two industries differed very little, on the variables measured. An interactionist perspective – according to which human attitude and behavior are a function of the fit between personality and the environment – and paying close heed to the voice of the employees or the vox populi are recommended.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>deepa athle</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2229470916</Author_Id>
    <All_Authors>aditi kumar, deepa athle, vinay katiyar</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2015449862</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A culture of involving the vox populi for evolution of workforce policy</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593717</DOI>
    <Abstract>In this paper, we present a pilot study of software and other industries – such as research, advertising and education – designed to understand factors influencing work ethics, policy making, employee engagement and organizational culture, and to begin uncovering the interaction effects thereof. Past research reveals that these factors are highly relevant to both productivity and attrition. So we collected and analyzed data from 56 employees via a survey on self-beliefs and reports of work ethics related to both self and team. Preliminary analyses using demographics and psychographics were undertaken. Interestingly, we found that the two industries differed very little, on the variables measured. An interactionist perspective – according to which human attitude and behavior are a function of the fit between personality and the environment – and paying close heed to the voice of the employees or the vox populi are recommended.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>vinay katiyar</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2428638663</Author_Id>
    <All_Authors>aditi kumar, deepa athle, vinay katiyar</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017003061</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Which bug should I fix: helping new developers onboard a new project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984661</DOI>
    <Abstract>A typical entry point for new developers in an open source project is to contribute a bug fix. However, finding an appropriate bug and an appropriate fix for that bug requires a good understanding of the project, which is nontrivial. Here, we extend Tesseract - an interactive project exploration environment - to allow new developers to search over bug descriptions in a project to quickly identify and explore bugs of interest and their related resources. More specifically, we extended Tesseract with search capabilities that enable synonyms and similar-bugs search over bug descriptions in a bug repository. The goal is to enable users to identify bugs of interest, resources related to that bug, (e.g., related files, contributing developers, communication records), and visually explore the appropriate socio-technical dependencies for the selected bug in an interactive manner. Here we present our search extension to Tesseract.</Abstract>
    <Abstract_Length>142</Abstract_Length>
    <Author_Name>anita sarma</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of nebraska lincoln</Affiliation_Name>
    <Author_Id>2150694261</Author_Id>
    <All_Authors>anita sarma, jianguo wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017003061</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Which bug should I fix: helping new developers onboard a new project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984661</DOI>
    <Abstract>A typical entry point for new developers in an open source project is to contribute a bug fix. However, finding an appropriate bug and an appropriate fix for that bug requires a good understanding of the project, which is nontrivial. Here, we extend Tesseract - an interactive project exploration environment - to allow new developers to search over bug descriptions in a project to quickly identify and explore bugs of interest and their related resources. More specifically, we extended Tesseract with search capabilities that enable synonyms and similar-bugs search over bug descriptions in a bug repository. The goal is to enable users to identify bugs of interest, resources related to that bug, (e.g., related files, contributing developers, communication records), and visually explore the appropriate socio-technical dependencies for the selected bug in an interactive manner. Here we present our search extension to Tesseract.</Abstract>
    <Abstract_Length>142</Abstract_Length>
    <Author_Name>jianguo wang</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of nebraska lincoln</Affiliation_Name>
    <Author_Id>2234024317</Author_Id>
    <All_Authors>anita sarma, jianguo wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017083356</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Examining life at the code face</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370116</DOI>
    <Abstract>In this paper, we present the work of a research team at the University of Limerick, Ireland, focusing on work practices in a distributed software development environment. Adopting ethnographically-informed methods, the researchers have observed the activity of a software development team from an Irish subsidiary of a multinational company over a period of 18 months. The paper presents our perspective on the existing literature, the theoretical foundations of our work, and the approach we have taken. This research work is ongoing and in this paper we provide a selection of vignettes which the authors found of interest for a deeper analysis. Our aim is to understand the impact of the global distribution of software development on collaborative work practices in this particular work setting.</Abstract>
    <Abstract_Length>124</Abstract_Length>
    <Author_Name>liam j bannon</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of limerick</Affiliation_Name>
    <Author_Id>337117278</Author_Id>
    <All_Authors>liam j bannon, gabriela avram, anders sigfridsson, anne sheehan, daniel k sullivan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017083356</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Examining life at the code face</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370116</DOI>
    <Abstract>In this paper, we present the work of a research team at the University of Limerick, Ireland, focusing on work practices in a distributed software development environment. Adopting ethnographically-informed methods, the researchers have observed the activity of a software development team from an Irish subsidiary of a multinational company over a period of 18 months. The paper presents our perspective on the existing literature, the theoretical foundations of our work, and the approach we have taken. This research work is ongoing and in this paper we provide a selection of vignettes which the authors found of interest for a deeper analysis. Our aim is to understand the impact of the global distribution of software development on collaborative work practices in this particular work setting.</Abstract>
    <Abstract_Length>124</Abstract_Length>
    <Author_Name>gabriela avram</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of limerick</Affiliation_Name>
    <Author_Id>1644127405</Author_Id>
    <All_Authors>liam j bannon, gabriela avram, anders sigfridsson, anne sheehan, daniel k sullivan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017083356</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Examining life at the code face</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370116</DOI>
    <Abstract>In this paper, we present the work of a research team at the University of Limerick, Ireland, focusing on work practices in a distributed software development environment. Adopting ethnographically-informed methods, the researchers have observed the activity of a software development team from an Irish subsidiary of a multinational company over a period of 18 months. The paper presents our perspective on the existing literature, the theoretical foundations of our work, and the approach we have taken. This research work is ongoing and in this paper we provide a selection of vignettes which the authors found of interest for a deeper analysis. Our aim is to understand the impact of the global distribution of software development on collaborative work practices in this particular work setting.</Abstract>
    <Abstract_Length>124</Abstract_Length>
    <Author_Name>anders sigfridsson</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of limerick</Affiliation_Name>
    <Author_Id>2087786446</Author_Id>
    <All_Authors>liam j bannon, gabriela avram, anders sigfridsson, anne sheehan, daniel k sullivan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017083356</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Examining life at the code face</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370116</DOI>
    <Abstract>In this paper, we present the work of a research team at the University of Limerick, Ireland, focusing on work practices in a distributed software development environment. Adopting ethnographically-informed methods, the researchers have observed the activity of a software development team from an Irish subsidiary of a multinational company over a period of 18 months. The paper presents our perspective on the existing literature, the theoretical foundations of our work, and the approach we have taken. This research work is ongoing and in this paper we provide a selection of vignettes which the authors found of interest for a deeper analysis. Our aim is to understand the impact of the global distribution of software development on collaborative work practices in this particular work setting.</Abstract>
    <Abstract_Length>124</Abstract_Length>
    <Author_Name>anne sheehan</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of limerick</Affiliation_Name>
    <Author_Id>2102882617</Author_Id>
    <All_Authors>liam j bannon, gabriela avram, anders sigfridsson, anne sheehan, daniel k sullivan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2017083356</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Examining life at the code face</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370116</DOI>
    <Abstract>In this paper, we present the work of a research team at the University of Limerick, Ireland, focusing on work practices in a distributed software development environment. Adopting ethnographically-informed methods, the researchers have observed the activity of a software development team from an Irish subsidiary of a multinational company over a period of 18 months. The paper presents our perspective on the existing literature, the theoretical foundations of our work, and the approach we have taken. This research work is ongoing and in this paper we provide a selection of vignettes which the authors found of interest for a deeper analysis. Our aim is to understand the impact of the global distribution of software development on collaborative work practices in this particular work setting.</Abstract>
    <Abstract_Length>124</Abstract_Length>
    <Author_Name>daniel k sullivan</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of limerick</Affiliation_Name>
    <Author_Id>2153302726</Author_Id>
    <All_Authors>liam j bannon, gabriela avram, anders sigfridsson, anne sheehan, daniel k sullivan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2018851841</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>6</Citations_Count>
    <Display_Name>Towards emotion-based collaborative software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.32</DOI>
    <Abstract>There is a symbiotic relationship between collaborative software engineering and the recent research in detection of four kinds of task-based emotions: interruptibility, difficulty perception, frustration, and attention. Predictions of these emotions can trigger opportunistic collaborations, make collaborations more purposeful, influence how activities are scheduled, and give implicit feedback from collaborators. Conversely, concepts from software engineering can further advance the nascent area of emotion detection by creating reusable analysis, annotation and prediction tools and architectures that make the notion of multi-iteration application- and emotion-independent prediction tractable.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>prasun dewan</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of north carolina at chapel hill</Affiliation_Name>
    <Author_Id>2159107207</Author_Id>
    <All_Authors>prasun dewan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2019554308</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Del.icio.us development tools</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370123</DOI>
    <Abstract>Developers need better knowledge tools to answer their information needs, rather than continuing to rely so heavily on communication with coworkers. Web sites, like the social bookmarking site Del.icio.us, might provide a way forward. They are designed to provide each user an individual incentive for entering data, but provide even more value by combining data from different users into collective knowledge. Several research projects hint that designing knowledge tools for developers using this principle would be more cost effective and provide better incentive structures for capturing knowledge.</Abstract>
    <Abstract_Length>87</Abstract_Length>
    <Author_Name>robert deline</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2163972128</Author_Id>
    <All_Authors>robert deline</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2020934373</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Teambugs: a collaborative bug tracking tool</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984659</DOI>
    <Abstract>Bug trackers are considered to be one of the primary coordination tools in software development. Interactions with the bug tracker occur throughout the development process, in different settings, from the meeting room to the developer's desk. In this paper, we look at previous field studies of bug trackers and identify the key challenges in supporting coordination. We then describe through several scenarios TeamBugs, a new bug tracker tool. We conclude by raising several research questions for future work.</Abstract>
    <Abstract_Length>78</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>andre van der hoek, gerald bortis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2020934373</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Teambugs: a collaborative bug tracking tool</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984659</DOI>
    <Abstract>Bug trackers are considered to be one of the primary coordination tools in software development. Interactions with the bug tracker occur throughout the development process, in different settings, from the meeting room to the developer's desk. In this paper, we look at previous field studies of bug trackers and identify the key challenges in supporting coordination. We then describe through several scenarios TeamBugs, a new bug tracker tool. We conclude by raising several research questions for future work.</Abstract>
    <Abstract_Length>78</Abstract_Length>
    <Author_Name>gerald bortis</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2231843505</Author_Id>
    <All_Authors>andre van der hoek, gerald bortis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2021188219</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Characteristics of sustainable OSS projects: a theoretical and empirical study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.9</DOI>
    <Abstract>How can we attract developers? What can we do to incentivize developers to write code? We started the study by introducing the population pyramid visualization to software development communities, called  software population pyramids , and found a typical pattern in shapes. This pattern comes from the differences in attracting coding contributors and discussion contributors. To understand the causes of the differences, we then build game-theoretical models of the contribution situation. Based on these results, we again analyzed the projects empirically to support the outcome of the models, and found empirical evidence. The answers to the initial questions are clear. To incentivize developers to code, the projects should prepare documents, or the projects or third parties should hire developers, and these are what sustainable projects in GitHub did in reality. In addition, making innovations to reduce the writing costs can also have an impact in attracting coding contributors.</Abstract>
    <Abstract_Length>148</Abstract_Length>
    <Author_Name>taiki todo</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>kyushu university</Affiliation_Name>
    <Author_Id>2117235574</Author_Id>
    <All_Authors>taiki todo, hideaki hata, kenichi matsumoto, saya onoue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2021188219</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Characteristics of sustainable OSS projects: a theoretical and empirical study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.9</DOI>
    <Abstract>How can we attract developers? What can we do to incentivize developers to write code? We started the study by introducing the population pyramid visualization to software development communities, called  software population pyramids , and found a typical pattern in shapes. This pattern comes from the differences in attracting coding contributors and discussion contributors. To understand the causes of the differences, we then build game-theoretical models of the contribution situation. Based on these results, we again analyzed the projects empirically to support the outcome of the models, and found empirical evidence. The answers to the initial questions are clear. To incentivize developers to code, the projects should prepare documents, or the projects or third parties should hire developers, and these are what sustainable projects in GitHub did in reality. In addition, making innovations to reduce the writing costs can also have an impact in attracting coding contributors.</Abstract>
    <Abstract_Length>148</Abstract_Length>
    <Author_Name>hideaki hata</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2132915310</Author_Id>
    <All_Authors>taiki todo, hideaki hata, kenichi matsumoto, saya onoue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2021188219</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Characteristics of sustainable OSS projects: a theoretical and empirical study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.9</DOI>
    <Abstract>How can we attract developers? What can we do to incentivize developers to write code? We started the study by introducing the population pyramid visualization to software development communities, called  software population pyramids , and found a typical pattern in shapes. This pattern comes from the differences in attracting coding contributors and discussion contributors. To understand the causes of the differences, we then build game-theoretical models of the contribution situation. Based on these results, we again analyzed the projects empirically to support the outcome of the models, and found empirical evidence. The answers to the initial questions are clear. To incentivize developers to code, the projects should prepare documents, or the projects or third parties should hire developers, and these are what sustainable projects in GitHub did in reality. In addition, making innovations to reduce the writing costs can also have an impact in attracting coding contributors.</Abstract>
    <Abstract_Length>148</Abstract_Length>
    <Author_Name>kenichi matsumoto</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2134938672</Author_Id>
    <All_Authors>taiki todo, hideaki hata, kenichi matsumoto, saya onoue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2021188219</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Characteristics of sustainable OSS projects: a theoretical and empirical study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.9</DOI>
    <Abstract>How can we attract developers? What can we do to incentivize developers to write code? We started the study by introducing the population pyramid visualization to software development communities, called  software population pyramids , and found a typical pattern in shapes. This pattern comes from the differences in attracting coding contributors and discussion contributors. To understand the causes of the differences, we then build game-theoretical models of the contribution situation. Based on these results, we again analyzed the projects empirically to support the outcome of the models, and found empirical evidence. The answers to the initial questions are clear. To incentivize developers to code, the projects should prepare documents, or the projects or third parties should hire developers, and these are what sustainable projects in GitHub did in reality. In addition, making innovations to reduce the writing costs can also have an impact in attracting coding contributors.</Abstract>
    <Abstract_Length>148</Abstract_Length>
    <Author_Name>saya onoue</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2232432266</Author_Id>
    <All_Authors>taiki todo, hideaki hata, kenichi matsumoto, saya onoue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2021207254</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>On the nature of roles in software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593721</DOI>
    <Abstract>The extensive use of software and the ever increasing complexity of software development in today’s world requires a diversity of people from different domains to closely collaborate and create quality software. Unfortunately, a lack of clarity in the different types of roles in software engineering (SE), their diversity and the competencies required by people to perform the roles is a major problem not just for software but for the people involved in the entire process. The main intent of this paper is to discuss different kinds of roles in SE with an aim to understand the challenges of people performing roles from multiple perspectives. To this end, we propose an ontology based framework for modeling roles in SE, which could be adapted for different organizations, projects, domains, environments and even cultures. We discuss several ontologies of this framework (context, role, team, organization, process, competency, persona, history, domain) and conclude this paper with a few research directions.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>kesav v nori</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>international institute of information technology hyderabad</Affiliation_Name>
    <Author_Id>1979494401</Author_Id>
    <All_Authors>kesav v nori, sridhar chimalakonda</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2021207254</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>On the nature of roles in software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593721</DOI>
    <Abstract>The extensive use of software and the ever increasing complexity of software development in today’s world requires a diversity of people from different domains to closely collaborate and create quality software. Unfortunately, a lack of clarity in the different types of roles in software engineering (SE), their diversity and the competencies required by people to perform the roles is a major problem not just for software but for the people involved in the entire process. The main intent of this paper is to discuss different kinds of roles in SE with an aim to understand the challenges of people performing roles from multiple perspectives. To this end, we propose an ontology based framework for modeling roles in SE, which could be adapted for different organizations, projects, domains, environments and even cultures. We discuss several ontologies of this framework (context, role, team, organization, process, competency, persona, history, domain) and conclude this paper with a few research directions.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>sridhar chimalakonda</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>international institute of information technology hyderabad</Affiliation_Name>
    <Author_Id>2060134365</Author_Id>
    <All_Authors>kesav v nori, sridhar chimalakonda</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2022897498</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Mining and visualizing developer networks from version control systems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984647</DOI>
    <Abstract>Social network analysis has many applications in software engineering and is often performed through the use of visualizations. Discovery of these networks, however, presents a challenge since the relationships are initially not known. We present an approach for mining and visualizing networks of software developers from version control systems. It computes similarities among developers based on common file changes, constructs the network of collaborating developers and applies filtering techniques to improve the modularity of the network. We validate the approach on two projects from industry and demonstrate its use in a case study of an open-source project. Results indicate that the approach performs well in revealing the structure of development teams and improving the modularity in visualizations of developer networks.</Abstract>
    <Abstract_Length>120</Abstract_Length>
    <Author_Name>alberto sillitti</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>120576184</Author_Id>
    <All_Authors>alberto sillitti, andrejs jermakovics, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2022897498</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Mining and visualizing developer networks from version control systems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984647</DOI>
    <Abstract>Social network analysis has many applications in software engineering and is often performed through the use of visualizations. Discovery of these networks, however, presents a challenge since the relationships are initially not known. We present an approach for mining and visualizing networks of software developers from version control systems. It computes similarities among developers based on common file changes, constructs the network of collaborating developers and applies filtering techniques to improve the modularity of the network. We validate the approach on two projects from industry and demonstrate its use in a case study of an open-source project. Results indicate that the approach performs well in revealing the structure of development teams and improving the modularity in visualizations of developer networks.</Abstract>
    <Abstract_Length>120</Abstract_Length>
    <Author_Name>andrejs jermakovics</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>250772930</Author_Id>
    <All_Authors>alberto sillitti, andrejs jermakovics, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2022897498</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Mining and visualizing developer networks from version control systems</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984647</DOI>
    <Abstract>Social network analysis has many applications in software engineering and is often performed through the use of visualizations. Discovery of these networks, however, presents a challenge since the relationships are initially not known. We present an approach for mining and visualizing networks of software developers from version control systems. It computes similarities among developers based on common file changes, constructs the network of collaborating developers and applies filtering techniques to improve the modularity of the network. We validate the approach on two projects from industry and demonstrate its use in a case study of an open-source project. Results indicate that the approach performs well in revealing the structure of development teams and improving the modularity in visualizations of developer networks.</Abstract>
    <Abstract_Length>120</Abstract_Length>
    <Author_Name>giancarlo succi</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>2310608531</Author_Id>
    <All_Authors>alberto sillitti, andrejs jermakovics, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2023636027</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>21</Citations_Count>
    <Display_Name>Scrum to support mobile application development projects in a just-in-time learning context</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833315</DOI>
    <Abstract>Developing mobile applications is a challenging endeavor where technology and creativity are essential. Agile methodologies seem to be particularly adapted to the development of mobile applications; mobile applications have a limited scope and user interaction and time to market are particularly important. In this paper, we describe a study that evaluates the use of Scrum for software success in mobile application development. We defined an innovative model of working with Scrum in a class setting at Pace University involving a professional Scrum Master of the New York software industry and a real product owner. The mobile application that was developed targeted the growing mobile market in Africa. We explored the overall experience, adoption of Scrum and difficulties encountered by teams using Scrum for the first time. The paper reports on our findings and summarizes guidelines for instructors interested in replicating our work.</Abstract>
    <Abstract_Length>142</Abstract_Length>
    <Author_Name>christelle scharff</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>pace university</Affiliation_Name>
    <Author_Id>1985887921</Author_Id>
    <All_Authors>christelle scharff, ravi verma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2023636027</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>21</Citations_Count>
    <Display_Name>Scrum to support mobile application development projects in a just-in-time learning context</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833315</DOI>
    <Abstract>Developing mobile applications is a challenging endeavor where technology and creativity are essential. Agile methodologies seem to be particularly adapted to the development of mobile applications; mobile applications have a limited scope and user interaction and time to market are particularly important. In this paper, we describe a study that evaluates the use of Scrum for software success in mobile application development. We defined an innovative model of working with Scrum in a class setting at Pace University involving a professional Scrum Master of the New York software industry and a real product owner. The mobile application that was developed targeted the growing mobile market in Africa. We explored the overall experience, adoption of Scrum and difficulties encountered by teams using Scrum for the first time. The paper reports on our findings and summarizes guidelines for instructors interested in replicating our work.</Abstract>
    <Abstract_Length>142</Abstract_Length>
    <Author_Name>ravi verma</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2495906847</Author_Id>
    <All_Authors>christelle scharff, ravi verma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2025255333</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>A qualitative study about the life cycle of lessons learned</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614734</DOI>
    <Abstract>Software activities are executed by people and demand great knowledge. For this reason, knowledge dissemination activities are important in software organizations. One of the ways of sharing knowledge is through the practice of lessons learned dissemination. The form of dissemination could help to clarify questions about how lessons learned are shared in the organization. This paper aims to analyze the life cycle of lessons learned in a software organization, in order to understand how they are treated during the course of the projects. Results show that discussions of the lessons encourage the exchange of knowledge between the team members. However, it is necessary to improve the form of knowledge dissemination in all the organization, as well as encourage learning this knowledge.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>tayana conte</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2142750856</Author_Id>
    <All_Authors>tayana conte, andreia vieira, davi viana, jacilane rabelo, ellen barroso, mario dib</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2025255333</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>A qualitative study about the life cycle of lessons learned</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614734</DOI>
    <Abstract>Software activities are executed by people and demand great knowledge. For this reason, knowledge dissemination activities are important in software organizations. One of the ways of sharing knowledge is through the practice of lessons learned dissemination. The form of dissemination could help to clarify questions about how lessons learned are shared in the organization. This paper aims to analyze the life cycle of lessons learned in a software organization, in order to understand how they are treated during the course of the projects. Results show that discussions of the lessons encourage the exchange of knowledge between the team members. However, it is necessary to improve the form of knowledge dissemination in all the organization, as well as encourage learning this knowledge.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>andreia vieira</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2157105607</Author_Id>
    <All_Authors>tayana conte, andreia vieira, davi viana, jacilane rabelo, ellen barroso, mario dib</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2025255333</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>A qualitative study about the life cycle of lessons learned</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614734</DOI>
    <Abstract>Software activities are executed by people and demand great knowledge. For this reason, knowledge dissemination activities are important in software organizations. One of the ways of sharing knowledge is through the practice of lessons learned dissemination. The form of dissemination could help to clarify questions about how lessons learned are shared in the organization. This paper aims to analyze the life cycle of lessons learned in a software organization, in order to understand how they are treated during the course of the projects. Results show that discussions of the lessons encourage the exchange of knowledge between the team members. However, it is necessary to improve the form of knowledge dissemination in all the organization, as well as encourage learning this knowledge.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>davi viana</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2212197377</Author_Id>
    <All_Authors>tayana conte, andreia vieira, davi viana, jacilane rabelo, ellen barroso, mario dib</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2025255333</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>A qualitative study about the life cycle of lessons learned</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614734</DOI>
    <Abstract>Software activities are executed by people and demand great knowledge. For this reason, knowledge dissemination activities are important in software organizations. One of the ways of sharing knowledge is through the practice of lessons learned dissemination. The form of dissemination could help to clarify questions about how lessons learned are shared in the organization. This paper aims to analyze the life cycle of lessons learned in a software organization, in order to understand how they are treated during the course of the projects. Results show that discussions of the lessons encourage the exchange of knowledge between the team members. However, it is necessary to improve the form of knowledge dissemination in all the organization, as well as encourage learning this knowledge.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>jacilane rabelo</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2308453247</Author_Id>
    <All_Authors>tayana conte, andreia vieira, davi viana, jacilane rabelo, ellen barroso, mario dib</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2025255333</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>A qualitative study about the life cycle of lessons learned</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614734</DOI>
    <Abstract>Software activities are executed by people and demand great knowledge. For this reason, knowledge dissemination activities are important in software organizations. One of the ways of sharing knowledge is through the practice of lessons learned dissemination. The form of dissemination could help to clarify questions about how lessons learned are shared in the organization. This paper aims to analyze the life cycle of lessons learned in a software organization, in order to understand how they are treated during the course of the projects. Results show that discussions of the lessons encourage the exchange of knowledge between the team members. However, it is necessary to improve the form of knowledge dissemination in all the organization, as well as encourage learning this knowledge.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>ellen barroso</Author_Name>
    <Author_Position>5</Author_Position>
    <Author_Id>2397661333</Author_Id>
    <All_Authors>tayana conte, andreia vieira, davi viana, jacilane rabelo, ellen barroso, mario dib</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2025255333</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>A qualitative study about the life cycle of lessons learned</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614734</DOI>
    <Abstract>Software activities are executed by people and demand great knowledge. For this reason, knowledge dissemination activities are important in software organizations. One of the ways of sharing knowledge is through the practice of lessons learned dissemination. The form of dissemination could help to clarify questions about how lessons learned are shared in the organization. This paper aims to analyze the life cycle of lessons learned in a software organization, in order to understand how they are treated during the course of the projects. Results show that discussions of the lessons encourage the exchange of knowledge between the team members. However, it is necessary to improve the form of knowledge dissemination in all the organization, as well as encourage learning this knowledge.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>mario dib</Author_Name>
    <Author_Position>6</Author_Position>
    <Author_Id>2404029926</Author_Id>
    <All_Authors>tayana conte, andreia vieira, davi viana, jacilane rabelo, ellen barroso, mario dib</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2026997812</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Aduno: Real-time collaborative work design in a shared workspace</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614751</DOI>
    <Abstract>In this paper we describe the design and evaluation of Aduno, a shared workspace tool that allows distributed software teams to collaboratively establish and prioritize work items for the purposes of task management and planning during the design phase. Aduno is highly visual and real-time, offering features that are often lacking from other popular collaborative development tools. Aduno also links to Github's issue tracker and easily translates work items on a whiteboard to project work items. Here, we describe the concept and design of Aduno and present its initial evaluation.</Abstract>
    <Abstract_Length>90</Abstract_Length>
    <Author_Name>eirini kalliamvakou</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>11477973</Author_Id>
    <All_Authors>eirini kalliamvakou, daniela damian, braden simpson, nathan lambert</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2026997812</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Aduno: Real-time collaborative work design in a shared workspace</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614751</DOI>
    <Abstract>In this paper we describe the design and evaluation of Aduno, a shared workspace tool that allows distributed software teams to collaboratively establish and prioritize work items for the purposes of task management and planning during the design phase. Aduno is highly visual and real-time, offering features that are often lacking from other popular collaborative development tools. Aduno also links to Github's issue tracker and easily translates work items on a whiteboard to project work items. Here, we describe the concept and design of Aduno and present its initial evaluation.</Abstract>
    <Abstract_Length>90</Abstract_Length>
    <Author_Name>daniela damian</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2005263414</Author_Id>
    <All_Authors>eirini kalliamvakou, daniela damian, braden simpson, nathan lambert</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2026997812</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Aduno: Real-time collaborative work design in a shared workspace</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614751</DOI>
    <Abstract>In this paper we describe the design and evaluation of Aduno, a shared workspace tool that allows distributed software teams to collaboratively establish and prioritize work items for the purposes of task management and planning during the design phase. Aduno is highly visual and real-time, offering features that are often lacking from other popular collaborative development tools. Aduno also links to Github's issue tracker and easily translates work items on a whiteboard to project work items. Here, we describe the concept and design of Aduno and present its initial evaluation.</Abstract>
    <Abstract_Length>90</Abstract_Length>
    <Author_Name>braden simpson</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2304017996</Author_Id>
    <All_Authors>eirini kalliamvakou, daniela damian, braden simpson, nathan lambert</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2026997812</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Aduno: Real-time collaborative work design in a shared workspace</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614751</DOI>
    <Abstract>In this paper we describe the design and evaluation of Aduno, a shared workspace tool that allows distributed software teams to collaboratively establish and prioritize work items for the purposes of task management and planning during the design phase. Aduno is highly visual and real-time, offering features that are often lacking from other popular collaborative development tools. Aduno also links to Github's issue tracker and easily translates work items on a whiteboard to project work items. Here, we describe the concept and design of Aduno and present its initial evaluation.</Abstract>
    <Abstract_Length>90</Abstract_Length>
    <Author_Name>nathan lambert</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2350420467</Author_Id>
    <All_Authors>eirini kalliamvakou, daniela damian, braden simpson, nathan lambert</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2029488227</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Cooperation and coordination concerns in a distributed software development project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370134</DOI>
    <Abstract>Enabling effective coordination of work in large distributed software projects requires cooperation between participants across multiple teams, sites, and skill sets. To determine how practicing software engineers, in a distributed software development setting, maintain awareness of dependencies and coordinate to resolve dependencies in their work, we conducted a field study that used interviews and informal observation of a distributed software team. In this paper we present key interesting themes that emerged from the qualitative analysis: proximity, modification request authoring patterns, and uncooperative behaviours. We discuss these findings and outline future quantitative research plans to triangulate the methods used by software developers with recorded activities in engineering repositories to increase the generalizability of the research findings.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>lucas d panjer</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>92633879</Author_Id>
    <All_Authors>lucas d panjer, daniela damian, margaretanne d storey</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2029488227</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Cooperation and coordination concerns in a distributed software development project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370134</DOI>
    <Abstract>Enabling effective coordination of work in large distributed software projects requires cooperation between participants across multiple teams, sites, and skill sets. To determine how practicing software engineers, in a distributed software development setting, maintain awareness of dependencies and coordinate to resolve dependencies in their work, we conducted a field study that used interviews and informal observation of a distributed software team. In this paper we present key interesting themes that emerged from the qualitative analysis: proximity, modification request authoring patterns, and uncooperative behaviours. We discuss these findings and outline future quantitative research plans to triangulate the methods used by software developers with recorded activities in engineering repositories to increase the generalizability of the research findings.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>daniela damian</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2005263414</Author_Id>
    <All_Authors>lucas d panjer, daniela damian, margaretanne d storey</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2029488227</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Cooperation and coordination concerns in a distributed software development project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370134</DOI>
    <Abstract>Enabling effective coordination of work in large distributed software projects requires cooperation between participants across multiple teams, sites, and skill sets. To determine how practicing software engineers, in a distributed software development setting, maintain awareness of dependencies and coordinate to resolve dependencies in their work, we conducted a field study that used interviews and informal observation of a distributed software team. In this paper we present key interesting themes that emerged from the qualitative analysis: proximity, modification request authoring patterns, and uncooperative behaviours. We discuss these findings and outline future quantitative research plans to triangulate the methods used by software developers with recorded activities in engineering repositories to increase the generalizability of the research findings.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>margaretanne d storey</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2123850919</Author_Id>
    <All_Authors>lucas d panjer, daniela damian, margaretanne d storey</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2031624663</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Cooperative work in software testing</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370138</DOI>
    <Abstract>Substantial effort in the development of any large system is invested in testing. Studies of testing tend to be either technical or concerned with the cognitive ability of testers. Our experience is that testing is not technical but socio-technical, involving a great deal of human and organisational effort, and that testing is not simply the kind of decontextualised 'puzzle solving' many cognitive approaches imply. We believe that cooperative work is foundational to getting testing done. In this position paper, we use data from four ethnographic studies to discuss just what that cooperative work is.</Abstract>
    <Abstract_Length>94</Abstract_Length>
    <Author_Name>mark rouncefield</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>lancaster university</Affiliation_Name>
    <Author_Id>1997633568</Author_Id>
    <All_Authors>mark rouncefield, john rooksby, ian sommerville, david b martin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2031624663</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Cooperative work in software testing</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370138</DOI>
    <Abstract>Substantial effort in the development of any large system is invested in testing. Studies of testing tend to be either technical or concerned with the cognitive ability of testers. Our experience is that testing is not technical but socio-technical, involving a great deal of human and organisational effort, and that testing is not simply the kind of decontextualised 'puzzle solving' many cognitive approaches imply. We believe that cooperative work is foundational to getting testing done. In this position paper, we use data from four ethnographic studies to discuss just what that cooperative work is.</Abstract>
    <Abstract_Length>94</Abstract_Length>
    <Author_Name>john rooksby</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>lancaster university</Affiliation_Name>
    <Author_Id>2023476688</Author_Id>
    <All_Authors>mark rouncefield, john rooksby, ian sommerville, david b martin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2031624663</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Cooperative work in software testing</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370138</DOI>
    <Abstract>Substantial effort in the development of any large system is invested in testing. Studies of testing tend to be either technical or concerned with the cognitive ability of testers. Our experience is that testing is not technical but socio-technical, involving a great deal of human and organisational effort, and that testing is not simply the kind of decontextualised 'puzzle solving' many cognitive approaches imply. We believe that cooperative work is foundational to getting testing done. In this position paper, we use data from four ethnographic studies to discuss just what that cooperative work is.</Abstract>
    <Abstract_Length>94</Abstract_Length>
    <Author_Name>ian sommerville</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of st andrews</Affiliation_Name>
    <Author_Id>2093398104</Author_Id>
    <All_Authors>mark rouncefield, john rooksby, ian sommerville, david b martin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2031624663</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Cooperative work in software testing</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370138</DOI>
    <Abstract>Substantial effort in the development of any large system is invested in testing. Studies of testing tend to be either technical or concerned with the cognitive ability of testers. Our experience is that testing is not technical but socio-technical, involving a great deal of human and organisational effort, and that testing is not simply the kind of decontextualised 'puzzle solving' many cognitive approaches imply. We believe that cooperative work is foundational to getting testing done. In this position paper, we use data from four ethnographic studies to discuss just what that cooperative work is.</Abstract>
    <Abstract_Length>94</Abstract_Length>
    <Author_Name>david b martin</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2126678161</Author_Id>
    <All_Authors>mark rouncefield, john rooksby, ian sommerville, david b martin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2031962963</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Exploring FLOW distance in project communication</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.20</DOI>
    <Abstract>Collaboration in a software project is affected by team spirit, perceived closeness or distance between team members, and by the effectiveness of working together. Communication style and the degree of indirection in communication could have an impact on all of the above-mentioned parameters. A FLOW model represents the paths, modes, and media used in the communication of a particular project. The models cover document-based as well as direct and oral communication. This paper explores ways of defining and using FLOW distance as an indicator for diagnosis and prediction of project dynamics.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>olga liskin</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>leibniz university of hanover</Affiliation_Name>
    <Author_Id>2027096212</Author_Id>
    <All_Authors>olga liskin, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2031962963</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Exploring FLOW distance in project communication</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.20</DOI>
    <Abstract>Collaboration in a software project is affected by team spirit, perceived closeness or distance between team members, and by the effectiveness of working together. Communication style and the degree of indirection in communication could have an impact on all of the above-mentioned parameters. A FLOW model represents the paths, modes, and media used in the communication of a particular project. The models cover document-based as well as direct and oral communication. This paper explores ways of defining and using FLOW distance as an indicator for diagnosis and prediction of project dynamics.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>kurt schneider</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>leibniz university of hanover</Affiliation_Name>
    <Author_Id>2181639357</Author_Id>
    <All_Authors>olga liskin, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2034935446</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Author_Name>muhammad ali babar</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>lancaster university</Affiliation_Name>
    <Author_Id>2168643441</Author_Id>
    <All_Authors>muhammad ali babar, mansooreh zahedi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2034935446</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Author_Name>mansooreh zahedi</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>2229354327</Author_Id>
    <All_Authors>muhammad ali babar, mansooreh zahedi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2035680126</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Exploring causes of frustration for software developers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.19</DOI>
    <Abstract>When learning to program, frustrating experiences contribute to negative learning outcomes and poor retention in the field. Defining a common framework that explains why these experiences occur can lead to better interventions and learning mechanisms. To begin constructing such a framework, we asked 45 software developers about the severity of their frustration and to recall their most recent frustrating programming experience. As a result, 67% considered their frustration to be severe. Further, we distilled the reported experiences into 11 categories, which include issues with mapping behaviors to code and broken programming tools. Finally, we discuss future directions for defining our framework and designing future interventions.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>denae ford</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2251208103</Author_Id>
    <All_Authors>denae ford, chris parnin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2035680126</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Exploring causes of frustration for software developers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.19</DOI>
    <Abstract>When learning to program, frustrating experiences contribute to negative learning outcomes and poor retention in the field. Defining a common framework that explains why these experiences occur can lead to better interventions and learning mechanisms. To begin constructing such a framework, we asked 45 software developers about the severity of their frustration and to recall their most recent frustrating programming experience. As a result, 67% considered their frustration to be severe. Further, we distilled the reported experiences into 11 categories, which include issues with mapping behaviors to code and broken programming tools. Finally, we discuss future directions for defining our framework and designing future interventions.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>chris parnin</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2570187561</Author_Id>
    <All_Authors>denae ford, chris parnin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2038999496</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>The mystery of the writing that isn't on the wall: differences in public representations in traditional and agile software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223005</DOI>
    <Abstract>This paper considers the use of public displays, such as whiteboards and papers pinned to walls, by different software development teams, based on evidence from a number of empirical studies. This paper outlines differences in use observed between traditional and agile teams and begins to identify the implications that they may have for software development.</Abstract>
    <Abstract_Length>55</Abstract_Length>
    <Author_Name>marian petre</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2086609251</Author_Id>
    <All_Authors>marian petre, helen sharp, sallyann freudenberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2038999496</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>The mystery of the writing that isn't on the wall: differences in public representations in traditional and agile software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223005</DOI>
    <Abstract>This paper considers the use of public displays, such as whiteboards and papers pinned to walls, by different software development teams, based on evidence from a number of empirical studies. This paper outlines differences in use observed between traditional and agile teams and begins to identify the implications that they may have for software development.</Abstract>
    <Abstract_Length>55</Abstract_Length>
    <Author_Name>helen sharp</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2104824474</Author_Id>
    <All_Authors>marian petre, helen sharp, sallyann freudenberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2038999496</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>The mystery of the writing that isn't on the wall: differences in public representations in traditional and agile software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223005</DOI>
    <Abstract>This paper considers the use of public displays, such as whiteboards and papers pinned to walls, by different software development teams, based on evidence from a number of empirical studies. This paper outlines differences in use observed between traditional and agile teams and begins to identify the implications that they may have for software development.</Abstract>
    <Abstract_Length>55</Abstract_Length>
    <Author_Name>sallyann freudenberg</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2306320414</Author_Id>
    <All_Authors>marian petre, helen sharp, sallyann freudenberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2039176016</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Scrum down: a software engineer and a sociologist explore the implementation of an agile method</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370118</DOI>
    <Abstract>This paper provides an overview and position statement on the work undertaken as part of a project to explore the implementation of Scrum in the context of an interactive digital media software development company. The project is being undertaken in the Communication and Computing Research Centre at Sheffield Hallam University.</Abstract>
    <Abstract_Length>50</Abstract_Length>
    <Author_Name>christopher d bates</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>sheffield hallam university</Affiliation_Name>
    <Author_Id>2106428130</Author_Id>
    <All_Authors>christopher d bates, simeon yates</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2039176016</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Scrum down: a software engineer and a sociologist explore the implementation of an agile method</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370118</DOI>
    <Abstract>This paper provides an overview and position statement on the work undertaken as part of a project to explore the implementation of Scrum in the context of an interactive digital media software development company. The project is being undertaken in the Communication and Computing Research Centre at Sheffield Hallam University.</Abstract>
    <Abstract_Length>50</Abstract_Length>
    <Author_Name>simeon yates</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>sheffield hallam university</Affiliation_Name>
    <Author_Id>2112424259</Author_Id>
    <All_Authors>christopher d bates, simeon yates</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2040456583</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Studying human and social aspects of testing in a service-based software company: case study</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833327</DOI>
    <Abstract>This paper presents a case study that reports the findings of a preliminary ethnographic study (35 days of fieldwork over a period of two months) conducted at a service-based software company. The focus of the study was on understanding the human-dimension and social aspects involved in software testing. In this paper, we present the design of the study, our observations, and the analysis of the findings. We also discuss the differences between the senior and junior participants' attitudes towards testing, how the seniors' attitudes influence the juniors' attitudes, and reasons that seem to motivate juniors to work on testing projects. Additionally, we report our findings about the relationship between enthusiasm and responsibility with ownership, the relationship between the developer and test engineer, the communication gaps faced by test engineers in various situations, and how hierarchical structuring in an organization may influence enthusiasm of the test engineers.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>mary jean harrold</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>georgia institute of technology</Affiliation_Name>
    <Author_Id>421534652</Author_Id>
    <All_Authors>mary jean harrold, hina shah</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2040456583</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Studying human and social aspects of testing in a service-based software company: case study</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833327</DOI>
    <Abstract>This paper presents a case study that reports the findings of a preliminary ethnographic study (35 days of fieldwork over a period of two months) conducted at a service-based software company. The focus of the study was on understanding the human-dimension and social aspects involved in software testing. In this paper, we present the design of the study, our observations, and the analysis of the findings. We also discuss the differences between the senior and junior participants' attitudes towards testing, how the seniors' attitudes influence the juniors' attitudes, and reasons that seem to motivate juniors to work on testing projects. Additionally, we report our findings about the relationship between enthusiasm and responsibility with ownership, the relationship between the developer and test engineer, the communication gaps faced by test engineers in various situations, and how hierarchical structuring in an organization may influence enthusiasm of the test engineers.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>hina shah</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>georgia institute of technology</Affiliation_Name>
    <Author_Id>2111356176</Author_Id>
    <All_Authors>mary jean harrold, hina shah</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2042404769</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Animating organizational patterns</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.8</DOI>
    <Abstract>Organizational patterns are the key to a stepwise adoption of agile and lean approaches and to a piecemeal growth of agile and lean organization of work. However, their text description is not easy to comprehend. In this paper, we introduce our initial efforts towards establishing an approach to animate organizational patterns as text adventure games. Players pass through a series of scenes described using Erickson's conversational hypnosis language patterns in order to better evoke their experience. The game scenario space is expressed using UML state machine diagrams. The approach is presented on adventure games we created for the Architect Also Implements organizational pattern.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>valentino vranic</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>slovak university of technology in bratislava</Affiliation_Name>
    <Author_Id>2057566357</Author_Id>
    <All_Authors>valentino vranic, tomas frtala</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2042404769</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Animating organizational patterns</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.8</DOI>
    <Abstract>Organizational patterns are the key to a stepwise adoption of agile and lean approaches and to a piecemeal growth of agile and lean organization of work. However, their text description is not easy to comprehend. In this paper, we introduce our initial efforts towards establishing an approach to animate organizational patterns as text adventure games. Players pass through a series of scenes described using Erickson's conversational hypnosis language patterns in order to better evoke their experience. The game scenario space is expressed using UML state machine diagrams. The approach is presented on adventure games we created for the Architect Also Implements organizational pattern.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>tomas frtala</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>slovak university of technology in bratislava</Affiliation_Name>
    <Author_Id>2342490650</Author_Id>
    <All_Authors>valentino vranic, tomas frtala</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043038918</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>The concept of "ba" applied to software knowledge</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593713</DOI>
    <Abstract>Software development is a knowledge-intensive activity. Software products usually start as a simple idea, or a vision, and then progress towards a final deliverable product. Along this evolution, there is a lot of knowledge that is captured, organized, and shared, leading to new knowledge, both as a whole and within specific development activities. The concept of "Ba" provides a foundation to advance individual and collective knowledge, which describes knowledge creation as a spiral involving tacit and explicit knowledge: the Socialization, Externalization, Combination, Internalization model (a.k.a. SECI model). By applying this foundation to software development, we found issues that may hinder the effective knowledge management cycle. In this paper, we present a vision and a set of requirements for tools to overcome such issues and therefore better support the whole process of software knowledge evolution.</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>ademar aguiar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of porto</Affiliation_Name>
    <Author_Id>2118326149</Author_Id>
    <All_Authors>ademar aguiar, hugo sereno, nuno flores</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043038918</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>The concept of "ba" applied to software knowledge</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593713</DOI>
    <Abstract>Software development is a knowledge-intensive activity. Software products usually start as a simple idea, or a vision, and then progress towards a final deliverable product. Along this evolution, there is a lot of knowledge that is captured, organized, and shared, leading to new knowledge, both as a whole and within specific development activities. The concept of "Ba" provides a foundation to advance individual and collective knowledge, which describes knowledge creation as a spiral involving tacit and explicit knowledge: the Socialization, Externalization, Combination, Internalization model (a.k.a. SECI model). By applying this foundation to software development, we found issues that may hinder the effective knowledge management cycle. In this paper, we present a vision and a set of requirements for tools to overcome such issues and therefore better support the whole process of software knowledge evolution.</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>hugo sereno</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of porto</Affiliation_Name>
    <Author_Id>2227478756</Author_Id>
    <All_Authors>ademar aguiar, hugo sereno, nuno flores</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043038918</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>The concept of "ba" applied to software knowledge</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593713</DOI>
    <Abstract>Software development is a knowledge-intensive activity. Software products usually start as a simple idea, or a vision, and then progress towards a final deliverable product. Along this evolution, there is a lot of knowledge that is captured, organized, and shared, leading to new knowledge, both as a whole and within specific development activities. The concept of "Ba" provides a foundation to advance individual and collective knowledge, which describes knowledge creation as a spiral involving tacit and explicit knowledge: the Socialization, Externalization, Combination, Internalization model (a.k.a. SECI model). By applying this foundation to software development, we found issues that may hinder the effective knowledge management cycle. In this paper, we present a vision and a set of requirements for tools to overcome such issues and therefore better support the whole process of software knowledge evolution.</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>nuno flores</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of porto</Affiliation_Name>
    <Author_Id>2308422922</Author_Id>
    <All_Authors>ademar aguiar, hugo sereno, nuno flores</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043429202</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Analyzing the friendliness of exchanges in an online software developer community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614756</DOI>
    <Abstract>Many online communities struggle with conflicts - e.g. between newcomers and elders - at some point. In July 2012, the Stack Exchange organization attempted to assess the overall “niceness” of the Stack Overflow community by rating the “friendliness” of 7,000 comments made on the site over a 4 year period. We performed a deeper examination of the comment dataset published by Stack Exchange. We find a high degree of comment repetition in the Stack Overflow database and suggest some simple heuristics that may help in automatically identifying unfriendly comments, providing managers of developer communities with simple means that could counter hostility.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>christoph treude</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>mcgill university</Affiliation_Name>
    <Author_Id>293351943</Author_Id>
    <All_Authors>christoph treude, margaretanne d storey, brendan cleary, leif singer, carlos gomez</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043429202</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Analyzing the friendliness of exchanges in an online software developer community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614756</DOI>
    <Abstract>Many online communities struggle with conflicts - e.g. between newcomers and elders - at some point. In July 2012, the Stack Exchange organization attempted to assess the overall “niceness” of the Stack Overflow community by rating the “friendliness” of 7,000 comments made on the site over a 4 year period. We performed a deeper examination of the comment dataset published by Stack Exchange. We find a high degree of comment repetition in the Stack Overflow database and suggest some simple heuristics that may help in automatically identifying unfriendly comments, providing managers of developer communities with simple means that could counter hostility.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>margaretanne d storey</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2123850919</Author_Id>
    <All_Authors>christoph treude, margaretanne d storey, brendan cleary, leif singer, carlos gomez</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043429202</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Analyzing the friendliness of exchanges in an online software developer community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614756</DOI>
    <Abstract>Many online communities struggle with conflicts - e.g. between newcomers and elders - at some point. In July 2012, the Stack Exchange organization attempted to assess the overall “niceness” of the Stack Overflow community by rating the “friendliness” of 7,000 comments made on the site over a 4 year period. We performed a deeper examination of the comment dataset published by Stack Exchange. We find a high degree of comment repetition in the Stack Overflow database and suggest some simple heuristics that may help in automatically identifying unfriendly comments, providing managers of developer communities with simple means that could counter hostility.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>brendan cleary</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2159141221</Author_Id>
    <All_Authors>christoph treude, margaretanne d storey, brendan cleary, leif singer, carlos gomez</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043429202</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Analyzing the friendliness of exchanges in an online software developer community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614756</DOI>
    <Abstract>Many online communities struggle with conflicts - e.g. between newcomers and elders - at some point. In July 2012, the Stack Exchange organization attempted to assess the overall “niceness” of the Stack Overflow community by rating the “friendliness” of 7,000 comments made on the site over a 4 year period. We performed a deeper examination of the comment dataset published by Stack Exchange. We find a high degree of comment repetition in the Stack Overflow database and suggest some simple heuristics that may help in automatically identifying unfriendly comments, providing managers of developer communities with simple means that could counter hostility.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>leif singer</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2258479832</Author_Id>
    <All_Authors>christoph treude, margaretanne d storey, brendan cleary, leif singer, carlos gomez</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043429202</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Analyzing the friendliness of exchanges in an online software developer community</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614756</DOI>
    <Abstract>Many online communities struggle with conflicts - e.g. between newcomers and elders - at some point. In July 2012, the Stack Exchange organization attempted to assess the overall “niceness” of the Stack Overflow community by rating the “friendliness” of 7,000 comments made on the site over a 4 year period. We performed a deeper examination of the comment dataset published by Stack Exchange. We find a high degree of comment repetition in the Stack Overflow database and suggest some simple heuristics that may help in automatically identifying unfriendly comments, providing managers of developer communities with simple means that could counter hostility.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>carlos gomez</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2506411441</Author_Id>
    <All_Authors>christoph treude, margaretanne d storey, brendan cleary, leif singer, carlos gomez</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043994035</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Wolf: supporting impact analysis activities in distributed software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223019</DOI>
    <Abstract>Software development activities face several challenges when they take place in geographically distributed settings. These challenges are often related to communication, collaboration and, especially, information diffusion among team members. This is especially important in impact analysis activities where all stakeholders need to align their work to understand the impact of a change. To properly support this, it is necessary to understand the different ways in which impact analysis activities are performed. In our previous work we identified two views of impact analysis: an organizational and an individual view. The first view is important for managers to understand the impact of the changes in the activities of the team, whereas the second refers to the developers' strategies to deal with the impact of changes in their daily work. This paper discusses these views and based on them describes a tool, called Wolf, to support impact analysis activities. Our tool, based on semi-automatically generated traceability links, provides different visualizations to support communication, collaboration and information diffusion among stakeholders thereby facilitating impact analysis activities in geographically distributed settings.</Abstract>
    <Abstract_Length>175</Abstract_Length>
    <Author_Name>mayara figueiredo</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2097577166</Author_Id>
    <All_Authors>mayara figueiredo, cleidson r b de souza</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2043994035</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Wolf: supporting impact analysis activities in distributed software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223019</DOI>
    <Abstract>Software development activities face several challenges when they take place in geographically distributed settings. These challenges are often related to communication, collaboration and, especially, information diffusion among team members. This is especially important in impact analysis activities where all stakeholders need to align their work to understand the impact of a change. To properly support this, it is necessary to understand the different ways in which impact analysis activities are performed. In our previous work we identified two views of impact analysis: an organizational and an individual view. The first view is important for managers to understand the impact of the changes in the activities of the team, whereas the second refers to the developers' strategies to deal with the impact of changes in their daily work. This paper discusses these views and based on them describes a tool, called Wolf, to support impact analysis activities. Our tool, based on semi-automatically generated traceability links, provides different visualizations to support communication, collaboration and information diffusion among stakeholders thereby facilitating impact analysis activities in geographically distributed settings.</Abstract>
    <Abstract_Length>175</Abstract_Length>
    <Author_Name>cleidson r b de souza</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2131028410</Author_Id>
    <All_Authors>mayara figueiredo, cleidson r b de souza</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2044967531</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>First results from an investigation into the validity of developer reputation derived from wiki articles and source code</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223007</DOI>
    <Abstract>The internal quality of software is often neglected by developers for various reasons like time pressure or a general dislike for certain activities. Yet internal quality is important to speed up development and to keep software maintainable. We present a way to use reputation systems to improve the internal quality of software by putting artifacts like wiki articles and source code under their control. Specifically, we show that reputation scores derived from such artifacts reflect actual reputation in the developer community using data from a work group wiki and an open source project.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>christian r prause</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2046795489</Author_Id>
    <All_Authors>christian r prause, markus eisenhauer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2044967531</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>First results from an investigation into the validity of developer reputation derived from wiki articles and source code</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223007</DOI>
    <Abstract>The internal quality of software is often neglected by developers for various reasons like time pressure or a general dislike for certain activities. Yet internal quality is important to speed up development and to keep software maintainable. We present a way to use reputation systems to improve the internal quality of software by putting artifacts like wiki articles and source code under their control. Specifically, we show that reputation scores derived from such artifacts reflect actual reputation in the developer community using data from a work group wiki and an open source project.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>markus eisenhauer</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2084802738</Author_Id>
    <All_Authors>christian r prause, markus eisenhauer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2046110714</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Some non-usage data for a distributed editor: the saros outreach</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984651</DOI>
    <Abstract>After contacting more than 40 companies and 11 OSS projects regarding using our distributed editor Saros, we find that almost all of those many who have a use case for it, are reluctant to even try it out. It appears that distance matters even by anticipatory obedience.</Abstract>
    <Abstract_Length>47</Abstract_Length>
    <Author_Name>lutz prechelt</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>328104153</Author_Id>
    <All_Authors>lutz prechelt</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2046300231</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Software engineering in developing communities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833311</DOI>
    <Abstract>This paper reflects on our work in deriving targeted methodologies to develop IT applications and content in a developing world environment. This paper argues that a common thread over more than a decade of experience in building Information and Communication Technology systems has been a community centred approach. We relate this to the African philosophy of ubuntu. These approaches are wrapped into an iterative Action Research paradigm to include the communities of users directly.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>edwin h blake</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of cape town</Affiliation_Name>
    <Author_Id>2170411567</Author_Id>
    <All_Authors>edwin h blake</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2046936849</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>Balancing acts: walking the Agile tightrope</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833312</DOI>
    <Abstract>Self-organizing teams are one of the critical success factors on Agile projects - and yet, little is known about the self-organizing nature of Agile teams and the challenges they face in industrial practice. Based on a Grounded Theory study of 40 Agile practitioners across 16 software development organizations in New Zealand and India, we describe how self-organizing Agile teams perform balancing acts between (a) freedom and responsibility (b) cross-functionality and specialization, and (c) continuous learning and iteration pressure, in an effort to maintain their self-organizing nature. We discuss the relationship between these three balancing acts and the fundamental conditions of self-organizing teams - autonomy, cross-fertilization, and self-transcendence.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>james noble</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>victoria university of wellington</Affiliation_Name>
    <Author_Id>2103426042</Author_Id>
    <All_Authors>james noble, rashina hoda, stuart marshall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2046936849</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>Balancing acts: walking the Agile tightrope</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833312</DOI>
    <Abstract>Self-organizing teams are one of the critical success factors on Agile projects - and yet, little is known about the self-organizing nature of Agile teams and the challenges they face in industrial practice. Based on a Grounded Theory study of 40 Agile practitioners across 16 software development organizations in New Zealand and India, we describe how self-organizing Agile teams perform balancing acts between (a) freedom and responsibility (b) cross-functionality and specialization, and (c) continuous learning and iteration pressure, in an effort to maintain their self-organizing nature. We discuss the relationship between these three balancing acts and the fundamental conditions of self-organizing teams - autonomy, cross-fertilization, and self-transcendence.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>rashina hoda</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>victoria university of wellington</Affiliation_Name>
    <Author_Id>2109764959</Author_Id>
    <All_Authors>james noble, rashina hoda, stuart marshall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2046936849</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>Balancing acts: walking the Agile tightrope</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833312</DOI>
    <Abstract>Self-organizing teams are one of the critical success factors on Agile projects - and yet, little is known about the self-organizing nature of Agile teams and the challenges they face in industrial practice. Based on a Grounded Theory study of 40 Agile practitioners across 16 software development organizations in New Zealand and India, we describe how self-organizing Agile teams perform balancing acts between (a) freedom and responsibility (b) cross-functionality and specialization, and (c) continuous learning and iteration pressure, in an effort to maintain their self-organizing nature. We discuss the relationship between these three balancing acts and the fundamental conditions of self-organizing teams - autonomy, cross-fertilization, and self-transcendence.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>stuart marshall</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>victoria university of wellington</Affiliation_Name>
    <Author_Id>2149454733</Author_Id>
    <All_Authors>james noble, rashina hoda, stuart marshall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2047298882</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Social aspects of a continuous inspection platform for software source code</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370136</DOI>
    <Abstract>Determining responsibility for a piece of source code is difficult when software is being developed collaboratively with weak code ownership. Nonetheless, a major factor for preventing "cowboy coding" and careless development of code is liability. We propose a tool for statistically acquiring per developer per document accountabilities and enable learning and self-monitoring processes within a development team while maintaining anonymity to a certain degree to not endanger team spirit.   In this paper we want to examine possible social effects on the development team that employment of our tool has.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>christian r prause</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2046795489</Author_Id>
    <All_Authors>christian r prause, markus eisenhauer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2047298882</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Social aspects of a continuous inspection platform for software source code</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370136</DOI>
    <Abstract>Determining responsibility for a piece of source code is difficult when software is being developed collaboratively with weak code ownership. Nonetheless, a major factor for preventing "cowboy coding" and careless development of code is liability. We propose a tool for statistically acquiring per developer per document accountabilities and enable learning and self-monitoring processes within a development team while maintaining anonymity to a certain degree to not endanger team spirit.   In this paper we want to examine possible social effects on the development team that employment of our tool has.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>markus eisenhauer</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2084802738</Author_Id>
    <All_Authors>christian r prause, markus eisenhauer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2047734408</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Factors affecting team evolution during software projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593715</DOI>
    <Abstract>Forming teams from a large groups of developers and testers pose an important problem for software project management. There are only a few empirical studies on the topic of team evolution and the factors affecting it in software projects. In this paper, we analyzed the evolution of globally distributed testing and coding teams developing large enterprise software product. Our findings indicate that, during the software development process, testing and coding teams are naturally formed through the informal interaction of people. This informal structure is not necessarily a reflection of the formal organizational structure. Therefore, we recommend software development organizations to take into consideration this informal and, most of the time, effective natural team building structure and perhaps to consider collaborative (non-hierarchical) task assignment during SDLC.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>andriy v miranskyy</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>1495808708</Author_Id>
    <All_Authors>andriy v miranskyy, bora caglayan, ayse basar bener</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2047734408</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Factors affecting team evolution during software projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593715</DOI>
    <Abstract>Forming teams from a large groups of developers and testers pose an important problem for software project management. There are only a few empirical studies on the topic of team evolution and the factors affecting it in software projects. In this paper, we analyzed the evolution of globally distributed testing and coding teams developing large enterprise software product. Our findings indicate that, during the software development process, testing and coding teams are naturally formed through the informal interaction of people. This informal structure is not necessarily a reflection of the formal organizational structure. Therefore, we recommend software development organizations to take into consideration this informal and, most of the time, effective natural team building structure and perhaps to consider collaborative (non-hierarchical) task assignment during SDLC.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>bora caglayan</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ryerson university</Affiliation_Name>
    <Author_Id>2005165943</Author_Id>
    <All_Authors>andriy v miranskyy, bora caglayan, ayse basar bener</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2047734408</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Factors affecting team evolution during software projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593715</DOI>
    <Abstract>Forming teams from a large groups of developers and testers pose an important problem for software project management. There are only a few empirical studies on the topic of team evolution and the factors affecting it in software projects. In this paper, we analyzed the evolution of globally distributed testing and coding teams developing large enterprise software product. Our findings indicate that, during the software development process, testing and coding teams are naturally formed through the informal interaction of people. This informal structure is not necessarily a reflection of the formal organizational structure. Therefore, we recommend software development organizations to take into consideration this informal and, most of the time, effective natural team building structure and perhaps to consider collaborative (non-hierarchical) task assignment during SDLC.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>ayse basar bener</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ryerson university</Affiliation_Name>
    <Author_Id>2120101566</Author_Id>
    <All_Authors>andriy v miranskyy, bora caglayan, ayse basar bener</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2049596576</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>An approach for collaborative code reviews using multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223031</DOI>
    <Abstract>Code reviews are an effective mechanism to improve software quality, but often fall short in the development of software. To improve the desirability and ease of code reviews, we introduce an approach that explores how multi-touch interfaces can support code reviews and can make them more collaborative. Our approach provides users with features to collaboratively find and investigate code smells, annotate source code and generate review reports using gesture recognition and a Microsoft Surface Table. In a preliminary evaluation, subjects generally liked the prototypical implementation of our approach for performing code review tasks.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>michael wursch</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>1967413752</Author_Id>
    <All_Authors>michael wursch, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2049596576</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>An approach for collaborative code reviews using multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223031</DOI>
    <Abstract>Code reviews are an effective mechanism to improve software quality, but often fall short in the development of software. To improve the desirability and ease of code reviews, we introduce an approach that explores how multi-touch interfaces can support code reviews and can make them more collaborative. Our approach provides users with features to collaboratively find and investigate code smells, annotate source code and generate review reports using gesture recognition and a Microsoft Surface Table. In a preliminary evaluation, subjects generally liked the prototypical implementation of our approach for performing code review tasks.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>thomas fritz</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2039624714</Author_Id>
    <All_Authors>michael wursch, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2049596576</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>An approach for collaborative code reviews using multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223031</DOI>
    <Abstract>Code reviews are an effective mechanism to improve software quality, but often fall short in the development of software. To improve the desirability and ease of code reviews, we introduce an approach that explores how multi-touch interfaces can support code reviews and can make them more collaborative. Our approach provides users with features to collaboratively find and investigate code smells, annotate source code and generate review reports using gesture recognition and a Microsoft Surface Table. In a preliminary evaluation, subjects generally liked the prototypical implementation of our approach for performing code review tasks.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>harald c gall</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2158171975</Author_Id>
    <All_Authors>michael wursch, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2049596576</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>An approach for collaborative code reviews using multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223031</DOI>
    <Abstract>Code reviews are an effective mechanism to improve software quality, but often fall short in the development of software. To improve the desirability and ease of code reviews, we introduce an approach that explores how multi-touch interfaces can support code reviews and can make them more collaborative. Our approach provides users with features to collaboratively find and investigate code smells, annotate source code and generate review reports using gesture recognition and a Microsoft Surface Table. In a preliminary evaluation, subjects generally liked the prototypical implementation of our approach for performing code review tasks.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>sebastian c muller</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2187278534</Author_Id>
    <All_Authors>michael wursch, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2049756221</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Towards real-time integration</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833320</DOI>
    <Abstract>Today, most developers work in parallel inside private workspaces to ensure stability during programming, but this provokes isolation from what co-workers are doing. Isolation may result in conflicts, which must be detected as early as possible to avoid bugs and expensive rework. Currently, frequent integration and awareness are used for early conflict detection. Frequent integration detects actual conflicts using automated builds, although only when merging checked in changes. Awareness informs about ongoing changes in private workspaces, however developers must find actual conflicts by themselves.   This paper proposes the novel concept of  real-time integration . This automates the detection of actual conflicts emerging during programming, involving checked in and ongoing changes, and affecting two or more developers. Cooperative resolution of conflicts is explicitly supported by sharing fine-grained changes among private workspaces. Software versions will also improve quality as integration builds are run before checking in.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>mario luis guimaraes</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>technical university of lisbon</Affiliation_Name>
    <Author_Id>2176112928</Author_Id>
    <All_Authors>mario luis guimaraes, antonio ritosilva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2049756221</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Towards real-time integration</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833320</DOI>
    <Abstract>Today, most developers work in parallel inside private workspaces to ensure stability during programming, but this provokes isolation from what co-workers are doing. Isolation may result in conflicts, which must be detected as early as possible to avoid bugs and expensive rework. Currently, frequent integration and awareness are used for early conflict detection. Frequent integration detects actual conflicts using automated builds, although only when merging checked in changes. Awareness informs about ongoing changes in private workspaces, however developers must find actual conflicts by themselves.   This paper proposes the novel concept of  real-time integration . This automates the detection of actual conflicts emerging during programming, involving checked in and ongoing changes, and affecting two or more developers. Cooperative resolution of conflicts is explicitly supported by sharing fine-grained changes among private workspaces. Software versions will also improve quality as integration builds are run before checking in.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>antonio ritosilva</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>technical university of lisbon</Affiliation_Name>
    <Author_Id>2250682522</Author_Id>
    <All_Authors>mario luis guimaraes, antonio ritosilva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2050514837</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Team: towards a software engineering semantic web</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370129</DOI>
    <Abstract>Large software development projects are complex endeavours that involve numerous participants which can work across several sites and act in various roles. Each participant produces and consumes information relevant for the success of the project. In such settings, an effective and efficient allocation of knowledge is a hard challenge, especially if there is no central authority, which enforces standards for the whole ecosystem. We consider semantic technologies as an important enabler to improve information and knowledge sharing in such scenarios, by helping to exchange and interconnect software engineering knowledge across the web. In this paper, we describe the corresponding vision of a Software Engineering Semantic Web and the role of intelligent IDEs in order to benefit from and contribute to it.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>walid maalej</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>technische universitat munchen</Affiliation_Name>
    <Author_Id>1079826502</Author_Id>
    <All_Authors>walid maalej, ljiljana stojanovi, hansjorg happel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2050514837</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Team: towards a software engineering semantic web</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370129</DOI>
    <Abstract>Large software development projects are complex endeavours that involve numerous participants which can work across several sites and act in various roles. Each participant produces and consumes information relevant for the success of the project. In such settings, an effective and efficient allocation of knowledge is a hard challenge, especially if there is no central authority, which enforces standards for the whole ecosystem. We consider semantic technologies as an important enabler to improve information and knowledge sharing in such scenarios, by helping to exchange and interconnect software engineering knowledge across the web. In this paper, we describe the corresponding vision of a Software Engineering Semantic Web and the role of intelligent IDEs in order to benefit from and contribute to it.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>ljiljana stojanovi</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2230594654</Author_Id>
    <All_Authors>walid maalej, ljiljana stojanovi, hansjorg happel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2050514837</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Team: towards a software engineering semantic web</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370129</DOI>
    <Abstract>Large software development projects are complex endeavours that involve numerous participants which can work across several sites and act in various roles. Each participant produces and consumes information relevant for the success of the project. In such settings, an effective and efficient allocation of knowledge is a hard challenge, especially if there is no central authority, which enforces standards for the whole ecosystem. We consider semantic technologies as an important enabler to improve information and knowledge sharing in such scenarios, by helping to exchange and interconnect software engineering knowledge across the web. In this paper, we describe the corresponding vision of a Software Engineering Semantic Web and the role of intelligent IDEs in order to benefit from and contribute to it.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>hansjorg happel</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2263767511</Author_Id>
    <All_Authors>walid maalej, ljiljana stojanovi, hansjorg happel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2053465203</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Promoting developer-specific awareness</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370130</DOI>
    <Abstract>Maintaining a developer's awareness of changes in the software on which she depends is challenging. Awareness is often impeded at two ends of the spectrum: a lack of information, when the changes only become apparent when a build breaks or bugs appear; or an excess of information, where the changes are announced but the majority of the changes are not relevant to the developer in her particular project and context. In the middle ground lies the possibility of support for developer-specific awareness (DSA), wherein information about the changes is filtered on the basis of the developer's own code and interests. This paper discusses how the DSA problem is manifested in software development and briefly examines the design space involved in providing DSA notifications. A particular point in the space is proposed for a target implementation, called the YooHoo awareness system, that will help developers in loose organizations to keep apprised of any code changes that are specifically relevant to the source code for which they are responsible.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>robert j walker</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2102868281</Author_Id>
    <All_Authors>robert j walker, reid holmes</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2053465203</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Promoting developer-specific awareness</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370130</DOI>
    <Abstract>Maintaining a developer's awareness of changes in the software on which she depends is challenging. Awareness is often impeded at two ends of the spectrum: a lack of information, when the changes only become apparent when a build breaks or bugs appear; or an excess of information, where the changes are announced but the majority of the changes are not relevant to the developer in her particular project and context. In the middle ground lies the possibility of support for developer-specific awareness (DSA), wherein information about the changes is filtered on the basis of the developer's own code and interests. This paper discusses how the DSA problem is manifested in software development and briefly examines the design space involved in providing DSA notifications. A particular point in the space is proposed for a target implementation, called the YooHoo awareness system, that will help developers in loose organizations to keep apprised of any code changes that are specifically relevant to the source code for which they are responsible.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>reid holmes</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2260674364</Author_Id>
    <All_Authors>robert j walker, reid holmes</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2053619615</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Perceptions of diversity on GitHub: a user survey</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.14</DOI>
    <Abstract>Understanding one's work environment is important for one's success, especially when working in teams. In virtual collaborative environments this amounts to being aware of the technical and social attributes of one's team members. Focusing on Open Source Software teams, naturally very diverse both socially and technically, we report the results of a user survey that tries to resolve how teamwork and individual attributes are perceived by developers collaborating on G it H ub , and how those perceptions influence their work. Our findings can be used as complementary data to quantitative studies of developers' behavior on G it H ub .</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>vladimir filkov</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california davis</Affiliation_Name>
    <Author_Id>2030124443</Author_Id>
    <All_Authors>vladimir filkov, alexander serebrenik, bogdan vasilescu</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2053619615</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Perceptions of diversity on GitHub: a user survey</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.14</DOI>
    <Abstract>Understanding one's work environment is important for one's success, especially when working in teams. In virtual collaborative environments this amounts to being aware of the technical and social attributes of one's team members. Focusing on Open Source Software teams, naturally very diverse both socially and technically, we report the results of a user survey that tries to resolve how teamwork and individual attributes are perceived by developers collaborating on G it H ub , and how those perceptions influence their work. Our findings can be used as complementary data to quantitative studies of developers' behavior on G it H ub .</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>alexander serebrenik</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>eindhoven university of technology</Affiliation_Name>
    <Author_Id>2047031519</Author_Id>
    <All_Authors>vladimir filkov, alexander serebrenik, bogdan vasilescu</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2053619615</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Perceptions of diversity on GitHub: a user survey</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.14</DOI>
    <Abstract>Understanding one's work environment is important for one's success, especially when working in teams. In virtual collaborative environments this amounts to being aware of the technical and social attributes of one's team members. Focusing on Open Source Software teams, naturally very diverse both socially and technically, we report the results of a user survey that tries to resolve how teamwork and individual attributes are perceived by developers collaborating on G it H ub , and how those perceptions influence their work. Our findings can be used as complementary data to quantitative studies of developers' behavior on G it H ub .</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>bogdan vasilescu</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california davis</Affiliation_Name>
    <Author_Id>2061854288</Author_Id>
    <All_Authors>vladimir filkov, alexander serebrenik, bogdan vasilescu</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2056035852</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Sketching and conceptions of software design</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.15</DOI>
    <Abstract>In this paper, we describe a study of sketching and design within a software organization in which hundreds of hours of video of development activity in situ were captured and analyzed. We use the study as a basis from which to question how researcher conceptions of software design---what it is, when and where it occurs, and how it is accounted---affect the way in which design is empirically studied. When researcher conceptions of design substantially differ from the actual design practices of those who are studied, researchers are at risk of seeing only what they are looking for and in this way miss the very design practices carried out by software developers in their quotidian work that the researchers were hoping to characterize.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>josh d tenenberg</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of washington tacoma</Affiliation_Name>
    <Author_Id>524990007</Author_Id>
    <All_Authors>josh d tenenberg, david socha</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2056035852</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Sketching and conceptions of software design</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.15</DOI>
    <Abstract>In this paper, we describe a study of sketching and design within a software organization in which hundreds of hours of video of development activity in situ were captured and analyzed. We use the study as a basis from which to question how researcher conceptions of software design---what it is, when and where it occurs, and how it is accounted---affect the way in which design is empirically studied. When researcher conceptions of design substantially differ from the actual design practices of those who are studied, researchers are at risk of seeing only what they are looking for and in this way miss the very design practices carried out by software developers in their quotidian work that the researchers were hoping to characterize.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>david socha</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of washington bothell</Affiliation_Name>
    <Author_Id>2015071743</Author_Id>
    <All_Authors>josh d tenenberg, david socha</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2057201793</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Soft skills in software development teams: a survey of the points of view of team leaders and team members</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.30</DOI>
    <Abstract>Besides technical knowledge and experience, the so-called "soft skills" of team members are also an important factor in software engineering projects. The study of this subject is gaining the attention of researchers and practitioners in recent years. In this paper we report a field study in which we interviewed 35 software engineering practitioners from software companies in Uruguay to know their points of view about what are the soft skills they consider the most valued to have by the leader and the other members of software development teams. As a result, Leadership, Communication skills, Customer orientation, Interpersonal skills, and Teamwork are the most valued for team leaders, while Analytic, problem-solving, Commitment, responsibility, Eagerness to learn, Motivation, and Teamwork are the most valued ones for team members.</Abstract>
    <Abstract_Length>126</Abstract_Length>
    <Author_Name>gerardo matturro</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>1999765295</Author_Id>
    <All_Authors>gerardo matturro, carina fontan, florencia raschetti</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2057201793</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Soft skills in software development teams: a survey of the points of view of team leaders and team members</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.30</DOI>
    <Abstract>Besides technical knowledge and experience, the so-called "soft skills" of team members are also an important factor in software engineering projects. The study of this subject is gaining the attention of researchers and practitioners in recent years. In this paper we report a field study in which we interviewed 35 software engineering practitioners from software companies in Uruguay to know their points of view about what are the soft skills they consider the most valued to have by the leader and the other members of software development teams. As a result, Leadership, Communication skills, Customer orientation, Interpersonal skills, and Teamwork are the most valued for team leaders, while Analytic, problem-solving, Commitment, responsibility, Eagerness to learn, Motivation, and Teamwork are the most valued ones for team members.</Abstract>
    <Abstract_Length>126</Abstract_Length>
    <Author_Name>carina fontan</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2225217596</Author_Id>
    <All_Authors>gerardo matturro, carina fontan, florencia raschetti</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2057201793</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Soft skills in software development teams: a survey of the points of view of team leaders and team members</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.30</DOI>
    <Abstract>Besides technical knowledge and experience, the so-called "soft skills" of team members are also an important factor in software engineering projects. The study of this subject is gaining the attention of researchers and practitioners in recent years. In this paper we report a field study in which we interviewed 35 software engineering practitioners from software companies in Uruguay to know their points of view about what are the soft skills they consider the most valued to have by the leader and the other members of software development teams. As a result, Leadership, Communication skills, Customer orientation, Interpersonal skills, and Teamwork are the most valued for team leaders, while Analytic, problem-solving, Commitment, responsibility, Eagerness to learn, Motivation, and Teamwork are the most valued ones for team members.</Abstract>
    <Abstract_Length>126</Abstract_Length>
    <Author_Name>florencia raschetti</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2230363008</Author_Id>
    <All_Authors>gerardo matturro, carina fontan, florencia raschetti</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2058885776</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Differences in Jazz project leaders' competencies and behaviors: A preliminary empirical investigation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614725</DOI>
    <Abstract>Studying the human factors that impact on software development, and assigning individuals with specific competencies and qualities to particular software roles, have been shown to aid software project performance. For instance, prior evidence suggests that extroverted software project leaders are most successful. Role assignment based on individuals' competencies and behaviors may be especially relevant in distributed software development contexts where teams are often affected by distance, cultural, and personality issues. Project leaders in these environments need to possess high levels of interpersonal, intra-personal and organizational competencies if they are to appropriately manage such issues and maintain positive project performance. With a view to understanding and explaining the specific competencies and behaviors that are required of project leaders in these settings, we used psycholinguistic and directed content analysis to study the way six successful IBM Rational Jazz leaders operated while coordinating their three distributed projects. Contrary to previous evidence reported in personality studies, our results did not reveal universal competencies and behaviors among these Jazz leaders. Instead, Jazz project leaders' competencies and behaviors varied with their project portfolio of tasks. Our findings suggest that a pragmatic approach that considers the nature of the software tasks being developed is likely to be a more effective strategy for assigning leaders to distributed software teams, as against a strategy that promotes a specific personality type. We discuss these findings and outline implications for distributed software project governance.</Abstract>
    <Abstract_Length>233</Abstract_Length>
    <Author_Name>stephen g macdonell</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2015981232</Author_Id>
    <All_Authors>stephen g macdonell, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2058885776</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Differences in Jazz project leaders' competencies and behaviors: A preliminary empirical investigation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614725</DOI>
    <Abstract>Studying the human factors that impact on software development, and assigning individuals with specific competencies and qualities to particular software roles, have been shown to aid software project performance. For instance, prior evidence suggests that extroverted software project leaders are most successful. Role assignment based on individuals' competencies and behaviors may be especially relevant in distributed software development contexts where teams are often affected by distance, cultural, and personality issues. Project leaders in these environments need to possess high levels of interpersonal, intra-personal and organizational competencies if they are to appropriately manage such issues and maintain positive project performance. With a view to understanding and explaining the specific competencies and behaviors that are required of project leaders in these settings, we used psycholinguistic and directed content analysis to study the way six successful IBM Rational Jazz leaders operated while coordinating their three distributed projects. Contrary to previous evidence reported in personality studies, our results did not reveal universal competencies and behaviors among these Jazz leaders. Instead, Jazz project leaders' competencies and behaviors varied with their project portfolio of tasks. Our findings suggest that a pragmatic approach that considers the nature of the software tasks being developed is likely to be a more effective strategy for assigning leaders to distributed software teams, as against a strategy that promotes a specific personality type. We discuss these findings and outline implications for distributed software project governance.</Abstract>
    <Abstract_Length>233</Abstract_Length>
    <Author_Name>sherlock a licorish</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2305935943</Author_Id>
    <All_Authors>stephen g macdonell, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2059538265</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Impact of collaborative traces on trustworthiness</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984649</DOI>
    <Abstract>We investigated how trust among software developers would be affected by providing them with visualizations of  collaborative traces . We define collaborative traces to be representations of the past and current activity of a group of developers manipulating software development artifacts. In this paper, we report two main findings. First, we report the results of our controlled experiment in which collaborative traces were visualized. Second, we present an overview of tools which aim to represent collaborative software engineering traces. Our experiment provides evidence that collaborative traces can support the development of several factors of trust identified in our field study. However, we also identified some shortcomings of our current visualizations, gaining insights into future improvements. From our review of tools that represent collaborative traces, we observed that such representations can drive the design of tools that aim to support trust. We also present a table of tools; the table can be used to guide discussion and the design of tools that promote trust in software development.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>david f redmiles</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>311754748</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2059538265</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Impact of collaborative traces on trustworthiness</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984649</DOI>
    <Abstract>We investigated how trust among software developers would be affected by providing them with visualizations of  collaborative traces . We define collaborative traces to be representations of the past and current activity of a group of developers manipulating software development artifacts. In this paper, we report two main findings. First, we report the results of our controlled experiment in which collaborative traces were visualized. Second, we present an overview of tools which aim to represent collaborative software engineering traces. Our experiment provides evidence that collaborative traces can support the development of several factors of trust identified in our field study. However, we also identified some shortcomings of our current visualizations, gaining insights into future improvements. From our review of tools that represent collaborative traces, we observed that such representations can drive the design of tools that aim to support trust. We also present a table of tools; the table can be used to guide discussion and the design of tools that promote trust in software development.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>ban alani</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>1981493853</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2059538265</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>11</Citations_Count>
    <Display_Name>Impact of collaborative traces on trustworthiness</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984649</DOI>
    <Abstract>We investigated how trust among software developers would be affected by providing them with visualizations of  collaborative traces . We define collaborative traces to be representations of the past and current activity of a group of developers manipulating software development artifacts. In this paper, we report two main findings. First, we report the results of our controlled experiment in which collaborative traces were visualized. Second, we present an overview of tools which aim to represent collaborative software engineering traces. Our experiment provides evidence that collaborative traces can support the development of several factors of trust identified in our field study. However, we also identified some shortcomings of our current visualizations, gaining insights into future improvements. From our review of tools that represent collaborative traces, we observed that such representations can drive the design of tools that aim to support trust. We also present a table of tools; the table can be used to guide discussion and the design of tools that promote trust in software development.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>erik trainer</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2116316123</Author_Id>
    <All_Authors>david f redmiles, ban alani, erik trainer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2063077004</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Questions about object structure during coding activities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833321</DOI>
    <Abstract>Recent tools have been designed to help developers understand the potential runtime structure of objects in a system at compile time. Such tools let developers interactively explore diagrams of object structure. But do developers ask questions about object structure? If so, when?   We conducted a small pilot study of developers working on coding tasks designed to require thinking about relationships between objects. Developers did indeed ask a number of questions about various types of relationships such as containment, ownership, object identities and aliasing. Finally, some of our results revealed usability challenges tools should address to more effectively answer these questions.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>thomas d latoza</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>168727994</Author_Id>
    <All_Authors>thomas d latoza, nariman ammar, marwan abiantoun</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2063077004</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Questions about object structure during coding activities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833321</DOI>
    <Abstract>Recent tools have been designed to help developers understand the potential runtime structure of objects in a system at compile time. Such tools let developers interactively explore diagrams of object structure. But do developers ask questions about object structure? If so, when?   We conducted a small pilot study of developers working on coding tasks designed to require thinking about relationships between objects. Developers did indeed ask a number of questions about various types of relationships such as containment, ownership, object identities and aliasing. Finally, some of our results revealed usability challenges tools should address to more effectively answer these questions.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>nariman ammar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>wayne state university</Affiliation_Name>
    <Author_Id>2135630659</Author_Id>
    <All_Authors>thomas d latoza, nariman ammar, marwan abiantoun</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2063077004</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Questions about object structure during coding activities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833321</DOI>
    <Abstract>Recent tools have been designed to help developers understand the potential runtime structure of objects in a system at compile time. Such tools let developers interactively explore diagrams of object structure. But do developers ask questions about object structure? If so, when?   We conducted a small pilot study of developers working on coding tasks designed to require thinking about relationships between objects. Developers did indeed ask a number of questions about various types of relationships such as containment, ownership, object identities and aliasing. Finally, some of our results revealed usability challenges tools should address to more effectively answer these questions.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>marwan abiantoun</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>wayne state university</Affiliation_Name>
    <Author_Id>2468959635</Author_Id>
    <All_Authors>thomas d latoza, nariman ammar, marwan abiantoun</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2064744566</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Motivation of software engineers: A qualitative case study of a research and development organisation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614726</DOI>
    <Abstract>Understanding motivation of software engineers has important implications for industrial practice. This complex construct seems to be affected by diverse environmental conditions and can affect multiple dimensions of work effectiveness. In this article, we present a grounded theory that describes the motivation of software engineers working in a not-for-profit private research and development organisation. We carried out a holistic case study for seven months, using structured interviews, diary studies, and documental analysis for data collection, and grounded theory techniques for data analysis and synthesis. The results point to task variety and technical challenges as the main drivers of motivation, and inequity and high workload (caused by poor estimations in the software process) as the main obstacles to motivation in the organisation.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>a cesar c franca</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2007395943</Author_Id>
    <All_Authors>a cesar c franca, fabio q b da silva, ana carina araujo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2064744566</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Motivation of software engineers: A qualitative case study of a research and development organisation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614726</DOI>
    <Abstract>Understanding motivation of software engineers has important implications for industrial practice. This complex construct seems to be affected by diverse environmental conditions and can affect multiple dimensions of work effectiveness. In this article, we present a grounded theory that describes the motivation of software engineers working in a not-for-profit private research and development organisation. We carried out a holistic case study for seven months, using structured interviews, diary studies, and documental analysis for data collection, and grounded theory techniques for data analysis and synthesis. The results point to task variety and technical challenges as the main drivers of motivation, and inequity and high workload (caused by poor estimations in the software process) as the main obstacles to motivation in the organisation.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>fabio q b da silva</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2144104009</Author_Id>
    <All_Authors>a cesar c franca, fabio q b da silva, ana carina araujo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2064744566</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Motivation of software engineers: A qualitative case study of a research and development organisation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614726</DOI>
    <Abstract>Understanding motivation of software engineers has important implications for industrial practice. This complex construct seems to be affected by diverse environmental conditions and can affect multiple dimensions of work effectiveness. In this article, we present a grounded theory that describes the motivation of software engineers working in a not-for-profit private research and development organisation. We carried out a holistic case study for seven months, using structured interviews, diary studies, and documental analysis for data collection, and grounded theory techniques for data analysis and synthesis. The results point to task variety and technical challenges as the main drivers of motivation, and inequity and high workload (caused by poor estimations in the software process) as the main obstacles to motivation in the organisation.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>ana carina araujo</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2245309919</Author_Id>
    <All_Authors>a cesar c franca, fabio q b da silva, ana carina araujo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066040773</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Understanding cheap talk and the emergence of trust in global software engineering: An evolutionary game theory perspective</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614753</DOI>
    <Abstract>While studying global software engineering teams, we found that informal non-work related conversations are positively associated with trust. We sought to investigate this phenomenon more carefully. To this end, we employed evolutionary game theory. In that literature, the kind of non-work related conversations we observed are referred to as “cheap talk”. We modified the original Stag-hunt game, and have it “play” repeatedly by a fixed population. Doing so, we are able to demonstrate how cheap talk in remote collaborations over the Internet is powerful enough to facilitate the emergence of trust and improve the probability of collaboration. We elaborate on the conditions for success and discuss both theoretical and practical implications of our findings for collaboration.</Abstract>
    <Abstract_Length>116</Abstract_Length>
    <Author_Name>david f redmiles</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>311754748</Author_Id>
    <All_Authors>david f redmiles, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066040773</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Understanding cheap talk and the emergence of trust in global software engineering: An evolutionary game theory perspective</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614753</DOI>
    <Abstract>While studying global software engineering teams, we found that informal non-work related conversations are positively associated with trust. We sought to investigate this phenomenon more carefully. To this end, we employed evolutionary game theory. In that literature, the kind of non-work related conversations we observed are referred to as “cheap talk”. We modified the original Stag-hunt game, and have it “play” repeatedly by a fixed population. Doing so, we are able to demonstrate how cheap talk in remote collaborations over the Internet is powerful enough to facilitate the emergence of trust and improve the probability of collaboration. We elaborate on the conditions for success and discuss both theoretical and practical implications of our findings for collaboration.</Abstract>
    <Abstract_Length>116</Abstract_Length>
    <Author_Name>yi wang</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2585802649</Author_Id>
    <All_Authors>david f redmiles, yi wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066045860</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Improving developer participation rates in surveys</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614738</DOI>
    <Abstract>Doing high quality research about the human side of software engineering necessitates the participation of real software developers in studies, but getting high levels of participation is a challenge for software engineering researchers. In this paper, we discuss several factors that software engineering researchers can use when recruiting participants, drawn from a combination of general research on survey design, research on persuasion, and our experience in conducting surveys. We study these factors by performing post-hoc analysis on several previously conducted surveys. Our results provide insight into the factors associated with increased response rates, which are neither wholly composed of factors associated strictly with persuasion research, nor those of conventional wisdom in software engineering.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>thomas zimmermann</Author_Name>
    <Author_Position>5</Author_Position>
    <Author_Id>2014339847</Author_Id>
    <All_Authors>thomas zimmermann, robert tyler loftin, christian bird, edward k smith, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066045860</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Improving developer participation rates in surveys</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614738</DOI>
    <Abstract>Doing high quality research about the human side of software engineering necessitates the participation of real software developers in studies, but getting high levels of participation is a challenge for software engineering researchers. In this paper, we discuss several factors that software engineering researchers can use when recruiting participants, drawn from a combination of general research on survey design, research on persuasion, and our experience in conducting surveys. We study these factors by performing post-hoc analysis on several previously conducted surveys. Our results provide insight into the factors associated with increased response rates, which are neither wholly composed of factors associated strictly with persuasion research, nor those of conventional wisdom in software engineering.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>robert tyler loftin</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2073881835</Author_Id>
    <All_Authors>thomas zimmermann, robert tyler loftin, christian bird, edward k smith, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066045860</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Improving developer participation rates in surveys</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614738</DOI>
    <Abstract>Doing high quality research about the human side of software engineering necessitates the participation of real software developers in studies, but getting high levels of participation is a challenge for software engineering researchers. In this paper, we discuss several factors that software engineering researchers can use when recruiting participants, drawn from a combination of general research on survey design, research on persuasion, and our experience in conducting surveys. We study these factors by performing post-hoc analysis on several previously conducted surveys. Our results provide insight into the factors associated with increased response rates, which are neither wholly composed of factors associated strictly with persuasion research, nor those of conventional wisdom in software engineering.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>christian bird</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2142366035</Author_Id>
    <All_Authors>thomas zimmermann, robert tyler loftin, christian bird, edward k smith, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066045860</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Improving developer participation rates in surveys</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614738</DOI>
    <Abstract>Doing high quality research about the human side of software engineering necessitates the participation of real software developers in studies, but getting high levels of participation is a challenge for software engineering researchers. In this paper, we discuss several factors that software engineering researchers can use when recruiting participants, drawn from a combination of general research on survey design, research on persuasion, and our experience in conducting surveys. We study these factors by performing post-hoc analysis on several previously conducted surveys. Our results provide insight into the factors associated with increased response rates, which are neither wholly composed of factors associated strictly with persuasion research, nor those of conventional wisdom in software engineering.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>edward k smith</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of maryland college park</Affiliation_Name>
    <Author_Id>2164851866</Author_Id>
    <All_Authors>thomas zimmermann, robert tyler loftin, christian bird, edward k smith, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066045860</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>18</Citations_Count>
    <Display_Name>Improving developer participation rates in surveys</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614738</DOI>
    <Abstract>Doing high quality research about the human side of software engineering necessitates the participation of real software developers in studies, but getting high levels of participation is a challenge for software engineering researchers. In this paper, we discuss several factors that software engineering researchers can use when recruiting participants, drawn from a combination of general research on survey design, research on persuasion, and our experience in conducting surveys. We study these factors by performing post-hoc analysis on several previously conducted surveys. Our results provide insight into the factors associated with increased response rates, which are neither wholly composed of factors associated strictly with persuasion research, nor those of conventional wisdom in software engineering.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>emerson r murphyhill</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2342860276</Author_Id>
    <All_Authors>thomas zimmermann, robert tyler loftin, christian bird, edward k smith, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066637661</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>An empirical study into social success factors for agile software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.24</DOI>
    <Abstract>Though many warn that Agile at larger scale is problematic or at least more challenging than in smaller projects, Agile software development seems to become the norm, also for large and complex projects.   Based on literature and qualitative interviews, we constructed a conceptual model of social factors that may be of influence on the success of software development projects in general, and of Agile projects in particular. We also included project size as a candidate success factor.   We tested the model on a set of 40 projects from 19 Dutch organizations, comprising a total of 141 project members, Scrum Masters and product owners.   We found that project size does not determine Agile project success. Rather, value congruence, degree of adoption of Agile practices, and transformational leadership proved to be the most important predictors for Agile project success.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>per van der wijst</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>tilburg university</Affiliation_Name>
    <Author_Id>431282862</Author_Id>
    <All_Authors>per van der wijst, aske plaat, joost visser, evelyn van kelle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066637661</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>An empirical study into social success factors for agile software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.24</DOI>
    <Abstract>Though many warn that Agile at larger scale is problematic or at least more challenging than in smaller projects, Agile software development seems to become the norm, also for large and complex projects.   Based on literature and qualitative interviews, we constructed a conceptual model of social factors that may be of influence on the success of software development projects in general, and of Agile projects in particular. We also included project size as a candidate success factor.   We tested the model on a set of 40 projects from 19 Dutch organizations, comprising a total of 141 project members, Scrum Masters and product owners.   We found that project size does not determine Agile project success. Rather, value congruence, degree of adoption of Agile practices, and transformational leadership proved to be the most important predictors for Agile project success.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>aske plaat</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>leiden university</Affiliation_Name>
    <Author_Id>2022989828</Author_Id>
    <All_Authors>per van der wijst, aske plaat, joost visser, evelyn van kelle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066637661</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>An empirical study into social success factors for agile software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.24</DOI>
    <Abstract>Though many warn that Agile at larger scale is problematic or at least more challenging than in smaller projects, Agile software development seems to become the norm, also for large and complex projects.   Based on literature and qualitative interviews, we constructed a conceptual model of social factors that may be of influence on the success of software development projects in general, and of Agile projects in particular. We also included project size as a candidate success factor.   We tested the model on a set of 40 projects from 19 Dutch organizations, comprising a total of 141 project members, Scrum Masters and product owners.   We found that project size does not determine Agile project success. Rather, value congruence, degree of adoption of Agile practices, and transformational leadership proved to be the most important predictors for Agile project success.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>joost visser</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>radboud university nijmegen</Affiliation_Name>
    <Author_Id>2115720218</Author_Id>
    <All_Authors>per van der wijst, aske plaat, joost visser, evelyn van kelle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2066637661</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>An empirical study into social success factors for agile software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.24</DOI>
    <Abstract>Though many warn that Agile at larger scale is problematic or at least more challenging than in smaller projects, Agile software development seems to become the norm, also for large and complex projects.   Based on literature and qualitative interviews, we constructed a conceptual model of social factors that may be of influence on the success of software development projects in general, and of Agile projects in particular. We also included project size as a candidate success factor.   We tested the model on a set of 40 projects from 19 Dutch organizations, comprising a total of 141 project members, Scrum Masters and product owners.   We found that project size does not determine Agile project success. Rather, value congruence, degree of adoption of Agile practices, and transformational leadership proved to be the most important predictors for Agile project success.</Abstract>
    <Abstract_Length>143</Abstract_Length>
    <Author_Name>evelyn van kelle</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>tilburg university</Affiliation_Name>
    <Author_Id>2226248484</Author_Id>
    <All_Authors>per van der wijst, aske plaat, joost visser, evelyn van kelle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2067072439</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Creating a cognitive metric of programming task difficulty</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370122</DOI>
    <Abstract>Conducting controlled experiments about programming activities often requires the use of multiple tasks of similar difficulty. In previously reported work about a controlled experiment investigating software exploration tools, we tried to select two change tasks of equivalent difficulty to be performed on a medium-sized code base. Despite careful effort in the selection and confirmation from our pilot subjects finding the two tasks to be of equivalent difficulty, the data from the experiment suggest the subjects found one of the tasks more difficult than the other.   In this paper, we report on early work to create a metric to estimate the cognitive difficulty for a software change task. Such a metric would help in comparing between studies of different tools, and in designing future studies. Our particular approach uses a graph-theoretic statistic to measure the complexity of the task solution by the connectedness of the solution elements. The metric predicts the perceived difficulty for the tasks of our experiment, but fails to predict the perceived difficulty for other tasks to a small program. We discuss these differences and suggest future approaches.</Abstract>
    <Abstract_Length>182</Abstract_Length>
    <Author_Name>brian de alwis</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>293934177</Author_Id>
    <All_Authors>brian de alwis, shawn minto, gail c murphy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2067072439</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Creating a cognitive metric of programming task difficulty</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370122</DOI>
    <Abstract>Conducting controlled experiments about programming activities often requires the use of multiple tasks of similar difficulty. In previously reported work about a controlled experiment investigating software exploration tools, we tried to select two change tasks of equivalent difficulty to be performed on a medium-sized code base. Despite careful effort in the selection and confirmation from our pilot subjects finding the two tasks to be of equivalent difficulty, the data from the experiment suggest the subjects found one of the tasks more difficult than the other.   In this paper, we report on early work to create a metric to estimate the cognitive difficulty for a software change task. Such a metric would help in comparing between studies of different tools, and in designing future studies. Our particular approach uses a graph-theoretic statistic to measure the complexity of the task solution by the connectedness of the solution elements. The metric predicts the perceived difficulty for the tasks of our experiment, but fails to predict the perceived difficulty for other tasks to a small program. We discuss these differences and suggest future approaches.</Abstract>
    <Abstract_Length>182</Abstract_Length>
    <Author_Name>shawn minto</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>1971790581</Author_Id>
    <All_Authors>brian de alwis, shawn minto, gail c murphy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2067072439</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Creating a cognitive metric of programming task difficulty</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370122</DOI>
    <Abstract>Conducting controlled experiments about programming activities often requires the use of multiple tasks of similar difficulty. In previously reported work about a controlled experiment investigating software exploration tools, we tried to select two change tasks of equivalent difficulty to be performed on a medium-sized code base. Despite careful effort in the selection and confirmation from our pilot subjects finding the two tasks to be of equivalent difficulty, the data from the experiment suggest the subjects found one of the tasks more difficult than the other.   In this paper, we report on early work to create a metric to estimate the cognitive difficulty for a software change task. Such a metric would help in comparing between studies of different tools, and in designing future studies. Our particular approach uses a graph-theoretic statistic to measure the complexity of the task solution by the connectedness of the solution elements. The metric predicts the perceived difficulty for the tasks of our experiment, but fails to predict the perceived difficulty for other tasks to a small program. We discuss these differences and suggest future approaches.</Abstract>
    <Abstract_Length>182</Abstract_Length>
    <Author_Name>gail c murphy</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>2100357700</Author_Id>
    <All_Authors>brian de alwis, shawn minto, gail c murphy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2069802661</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>The calling of the third dimension</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593720</DOI>
    <Abstract>Software is now an essential ingredient of everyday life. The discipline of software engineering, therefore, must keep pace with the growing demands placed on it, and needs to mature expeditiously. Towards that, this human intensive discipline has to look beyond traditional process and technology initiatives. It needs to explore leveraging of human sciences that can potentially pay great dividends. The short paper lists a set of research problems at the intersection of software engineering and human sciences and our initial forays into some of them.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>pradeep waychal</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>college of engineering pune</Affiliation_Name>
    <Author_Id>765576961</Author_Id>
    <All_Authors>pradeep waychal</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2069828553</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>U can touch this: touchifying an IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593726</DOI>
    <Abstract>Touch gestures are not only often very intuitive, but their direct manipulation characteristics also help to reduce the cognitive load. Since software development poses complex cognitive demands, our goal is to exploit the advantages of direct manipulation to support professional software engineering processes. In this paper, we demonstrate how touch gestures can be used within a professional integrated development environment. As for that, we have enriched the Eclipse IDE with common and invertible multi-touch gestures which can be used for both controlling the graphical user interface and triggering built-in refactoring tools. The design of our extensions was informed by an early user study revealing problems of using the Eclipse IDE with the default touch support provided by the operating system. By using the emerging prototype during its implementation, we were able to iteratively improve the prototype based on our own experience and gain first insights into the potential of using direct manipulation methods within the IDE. First results suggest that using an additional touch device within the classical desktop setup enables a precise and fast work flow.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>benjamin biegel</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of trier</Affiliation_Name>
    <Author_Id>1976257297</Author_Id>
    <All_Authors>benjamin biegel, artur lipinski, stephan diehl, julien hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2069828553</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>U can touch this: touchifying an IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593726</DOI>
    <Abstract>Touch gestures are not only often very intuitive, but their direct manipulation characteristics also help to reduce the cognitive load. Since software development poses complex cognitive demands, our goal is to exploit the advantages of direct manipulation to support professional software engineering processes. In this paper, we demonstrate how touch gestures can be used within a professional integrated development environment. As for that, we have enriched the Eclipse IDE with common and invertible multi-touch gestures which can be used for both controlling the graphical user interface and triggering built-in refactoring tools. The design of our extensions was informed by an early user study revealing problems of using the Eclipse IDE with the default touch support provided by the operating system. By using the emerging prototype during its implementation, we were able to iteratively improve the prototype based on our own experience and gain first insights into the potential of using direct manipulation methods within the IDE. First results suggest that using an additional touch device within the classical desktop setup enables a precise and fast work flow.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>artur lipinski</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of trier</Affiliation_Name>
    <Author_Id>1990163378</Author_Id>
    <All_Authors>benjamin biegel, artur lipinski, stephan diehl, julien hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2069828553</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>U can touch this: touchifying an IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593726</DOI>
    <Abstract>Touch gestures are not only often very intuitive, but their direct manipulation characteristics also help to reduce the cognitive load. Since software development poses complex cognitive demands, our goal is to exploit the advantages of direct manipulation to support professional software engineering processes. In this paper, we demonstrate how touch gestures can be used within a professional integrated development environment. As for that, we have enriched the Eclipse IDE with common and invertible multi-touch gestures which can be used for both controlling the graphical user interface and triggering built-in refactoring tools. The design of our extensions was informed by an early user study revealing problems of using the Eclipse IDE with the default touch support provided by the operating system. By using the emerging prototype during its implementation, we were able to iteratively improve the prototype based on our own experience and gain first insights into the potential of using direct manipulation methods within the IDE. First results suggest that using an additional touch device within the classical desktop setup enables a precise and fast work flow.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>stephan diehl</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of trier</Affiliation_Name>
    <Author_Id>2064750564</Author_Id>
    <All_Authors>benjamin biegel, artur lipinski, stephan diehl, julien hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2069828553</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>U can touch this: touchifying an IDE</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593726</DOI>
    <Abstract>Touch gestures are not only often very intuitive, but their direct manipulation characteristics also help to reduce the cognitive load. Since software development poses complex cognitive demands, our goal is to exploit the advantages of direct manipulation to support professional software engineering processes. In this paper, we demonstrate how touch gestures can be used within a professional integrated development environment. As for that, we have enriched the Eclipse IDE with common and invertible multi-touch gestures which can be used for both controlling the graphical user interface and triggering built-in refactoring tools. The design of our extensions was informed by an early user study revealing problems of using the Eclipse IDE with the default touch support provided by the operating system. By using the emerging prototype during its implementation, we were able to iteratively improve the prototype based on our own experience and gain first insights into the potential of using direct manipulation methods within the IDE. First results suggest that using an additional touch device within the classical desktop setup enables a precise and fast work flow.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>julien hoffmann</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of trier</Affiliation_Name>
    <Author_Id>2222202626</Author_Id>
    <All_Authors>benjamin biegel, artur lipinski, stephan diehl, julien hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2074134415</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Human factors related challenges in software engineering: an industrial perspective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.13</DOI>
    <Abstract>It is increasingly recognised that successful Software Engineering not only depends on technical or process issues, but requires attention to human factors. Researchers include such aspects which has led to both new theories and refined methods. However, it is not clear if professionals in the software industry agree that human factors are critical and what the related challenges and possibilities are. The purpose of the present study is to address this discrepancy. Using a qualitative research method, we elicited information about how and why human factors affect Software Engineering projects, which challenges are of special interest and the context in which they arise. Thematic analysis of data from interviews with nine senior software professionals in multiple Swedish software companies of differing size identified four main challenging areas. As supported by existing research, customer relations and communications were highlighted as important, but so too is the need for more holistic and multidimensional solutions and the importance of human factors in software organisational change. In addition, quantitative results indicate that the professionals see the organisational and group aspects as more important than the individual aspect. Our results can help to focus future research on matters that software practitioners consider important.</Abstract>
    <Abstract_Length>198</Abstract_Length>
    <Author_Name>per lenberg</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>chalmers university of technology</Affiliation_Name>
    <Author_Id>2022443403</Author_Id>
    <All_Authors>per lenberg, robert feldt, lars goran wallgren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2074134415</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Human factors related challenges in software engineering: an industrial perspective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.13</DOI>
    <Abstract>It is increasingly recognised that successful Software Engineering not only depends on technical or process issues, but requires attention to human factors. Researchers include such aspects which has led to both new theories and refined methods. However, it is not clear if professionals in the software industry agree that human factors are critical and what the related challenges and possibilities are. The purpose of the present study is to address this discrepancy. Using a qualitative research method, we elicited information about how and why human factors affect Software Engineering projects, which challenges are of special interest and the context in which they arise. Thematic analysis of data from interviews with nine senior software professionals in multiple Swedish software companies of differing size identified four main challenging areas. As supported by existing research, customer relations and communications were highlighted as important, but so too is the need for more holistic and multidimensional solutions and the importance of human factors in software organisational change. In addition, quantitative results indicate that the professionals see the organisational and group aspects as more important than the individual aspect. Our results can help to focus future research on matters that software practitioners consider important.</Abstract>
    <Abstract_Length>198</Abstract_Length>
    <Author_Name>robert feldt</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2034354864</Author_Id>
    <All_Authors>per lenberg, robert feldt, lars goran wallgren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2074134415</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Human factors related challenges in software engineering: an industrial perspective</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.13</DOI>
    <Abstract>It is increasingly recognised that successful Software Engineering not only depends on technical or process issues, but requires attention to human factors. Researchers include such aspects which has led to both new theories and refined methods. However, it is not clear if professionals in the software industry agree that human factors are critical and what the related challenges and possibilities are. The purpose of the present study is to address this discrepancy. Using a qualitative research method, we elicited information about how and why human factors affect Software Engineering projects, which challenges are of special interest and the context in which they arise. Thematic analysis of data from interviews with nine senior software professionals in multiple Swedish software companies of differing size identified four main challenging areas. As supported by existing research, customer relations and communications were highlighted as important, but so too is the need for more holistic and multidimensional solutions and the importance of human factors in software organisational change. In addition, quantitative results indicate that the professionals see the organisational and group aspects as more important than the individual aspect. Our results can help to focus future research on matters that software practitioners consider important.</Abstract>
    <Abstract_Length>198</Abstract_Length>
    <Author_Name>lars goran wallgren</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of gothenburg</Affiliation_Name>
    <Author_Id>2042874181</Author_Id>
    <All_Authors>per lenberg, robert feldt, lars goran wallgren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2074754918</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>The affect of software developers: common misconceptions and measurements</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.23</DOI>
    <Abstract>The study of affects (i.e., emotions, moods) in the workplace has received a lot of attention in the last 15 years. Despite the fact that software development has been shown to be intellectual, creative, and driven by cognitive activities, and that affects have a deep influence on cognitive activities, software engineering research lacks an understanding of the affects of software developers. This note provides (1) common misconceptions of affects when dealing with job satisfaction, motivation, commitment, well-being, and happiness; (2) validated measurement instruments for affect measurement; and (3) our recommendations when measuring the affects of software developers.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>daniel graziotin</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>165076727</Author_Id>
    <All_Authors>daniel graziotin, pekka abrahamsson, xiaofeng wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2074754918</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>The affect of software developers: common misconceptions and measurements</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.23</DOI>
    <Abstract>The study of affects (i.e., emotions, moods) in the workplace has received a lot of attention in the last 15 years. Despite the fact that software development has been shown to be intellectual, creative, and driven by cognitive activities, and that affects have a deep influence on cognitive activities, software engineering research lacks an understanding of the affects of software developers. This note provides (1) common misconceptions of affects when dealing with job satisfaction, motivation, commitment, well-being, and happiness; (2) validated measurement instruments for affect measurement; and (3) our recommendations when measuring the affects of software developers.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>pekka abrahamsson</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2105340527</Author_Id>
    <All_Authors>daniel graziotin, pekka abrahamsson, xiaofeng wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2074754918</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>The affect of software developers: common misconceptions and measurements</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.23</DOI>
    <Abstract>The study of affects (i.e., emotions, moods) in the workplace has received a lot of attention in the last 15 years. Despite the fact that software development has been shown to be intellectual, creative, and driven by cognitive activities, and that affects have a deep influence on cognitive activities, software engineering research lacks an understanding of the affects of software developers. This note provides (1) common misconceptions of affects when dealing with job satisfaction, motivation, commitment, well-being, and happiness; (2) validated measurement instruments for affect measurement; and (3) our recommendations when measuring the affects of software developers.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>xiaofeng wang</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2147101411</Author_Id>
    <All_Authors>daniel graziotin, pekka abrahamsson, xiaofeng wang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2076801114</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Test-driven roles for pair programming</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1810295.1810458</DOI>
    <Abstract>Pair programming  is the practice of having two programmers work together on the same code in a single development environment. The goals of pair programming are to improve communication and the sharing of knowledge within a team; to increase productivity; to improve developer process and help team members stay productive; and ultimately to strengthen the quality of the resulting software [1].</Abstract>
    <Abstract_Length>62</Abstract_Length>
    <Author_Name>robert c miller</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>massachusetts institute of technology</Affiliation_Name>
    <Author_Id>2104582966</Author_Id>
    <All_Authors>robert c miller, max goldman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2076801114</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Test-driven roles for pair programming</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1810295.1810458</DOI>
    <Abstract>Pair programming  is the practice of having two programmers work together on the same code in a single development environment. The goals of pair programming are to improve communication and the sharing of knowledge within a team; to increase productivity; to improve developer process and help team members stay productive; and ultimately to strengthen the quality of the resulting software [1].</Abstract>
    <Abstract_Length>62</Abstract_Length>
    <Author_Name>max goldman</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>massachusetts institute of technology</Affiliation_Name>
    <Author_Id>2106696903</Author_Id>
    <All_Authors>robert c miller, max goldman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2076906103</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Real-time monitoring of neural state in assessing and improving software developers' productivity</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.28</DOI>
    <Abstract>Productivity has always been considered a crucial factor for the success of any business, and the same applies to software development. As a result of software development being almost entirely a cognitive task, problems in cognition highly correlate to problems in productivity. Being able to monitor the neural state of developers in real-time can aid in detecting and handling such cognitive problems before they occur and cause any damage. This also means aiding software developers in taking sufficient breaks, assigning tasks appropriate to their knowledge level, managing deadlines and stress, and so on.   In this paper we propose Emendo - a conceptual system for continuous monitoring of developers' neural state using an off-the-shelf device. Furthermore, we provide a pilot study on the usability and feasibility of the proposed device for continuous monitoring. We also provide a short discussion of the ethical and acceptance issues of monitoring systems. Our goal is to introduce the possibility of real-time neural state monitoring and its potential benefits to the research community, hopefully attracting more researchers in this research field.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>hideaki hata</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2132915310</Author_Id>
    <All_Authors>hideaki hata, kenichi matsumoto, stevche radevski</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2076906103</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Real-time monitoring of neural state in assessing and improving software developers' productivity</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.28</DOI>
    <Abstract>Productivity has always been considered a crucial factor for the success of any business, and the same applies to software development. As a result of software development being almost entirely a cognitive task, problems in cognition highly correlate to problems in productivity. Being able to monitor the neural state of developers in real-time can aid in detecting and handling such cognitive problems before they occur and cause any damage. This also means aiding software developers in taking sufficient breaks, assigning tasks appropriate to their knowledge level, managing deadlines and stress, and so on.   In this paper we propose Emendo - a conceptual system for continuous monitoring of developers' neural state using an off-the-shelf device. Furthermore, we provide a pilot study on the usability and feasibility of the proposed device for continuous monitoring. We also provide a short discussion of the ethical and acceptance issues of monitoring systems. Our goal is to introduce the possibility of real-time neural state monitoring and its potential benefits to the research community, hopefully attracting more researchers in this research field.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>kenichi matsumoto</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2134938672</Author_Id>
    <All_Authors>hideaki hata, kenichi matsumoto, stevche radevski</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2076906103</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Real-time monitoring of neural state in assessing and improving software developers' productivity</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.28</DOI>
    <Abstract>Productivity has always been considered a crucial factor for the success of any business, and the same applies to software development. As a result of software development being almost entirely a cognitive task, problems in cognition highly correlate to problems in productivity. Being able to monitor the neural state of developers in real-time can aid in detecting and handling such cognitive problems before they occur and cause any damage. This also means aiding software developers in taking sufficient breaks, assigning tasks appropriate to their knowledge level, managing deadlines and stress, and so on.   In this paper we propose Emendo - a conceptual system for continuous monitoring of developers' neural state using an off-the-shelf device. Furthermore, we provide a pilot study on the usability and feasibility of the proposed device for continuous monitoring. We also provide a short discussion of the ethical and acceptance issues of monitoring systems. Our goal is to introduce the possibility of real-time neural state monitoring and its potential benefits to the research community, hopefully attracting more researchers in this research field.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>stevche radevski</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2224173432</Author_Id>
    <All_Authors>hideaki hata, kenichi matsumoto, stevche radevski</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079128191</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Towards a framework for software navigation techniques</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370140</DOI>
    <Abstract>Making a change to a large software system requires investing time in understanding the system first. In the context of programming, navigation refers to the process of finding one's way through a complex network of programming constructs and other software artifacts. The process consists of answering questions such as "What am I looking at?" and "What do I want to look at next?", along with the question of "How do I get there?". This paper looks at the range of techniques used to aid navigation, and categorizes them using three perspectives: perceptual techniques, which use graphical representations and exploit spatial memory to aid navigation; filtering techniques, which operate by automatically reducing the amount of information provided so that the appropriate pieces of information are easy to find; and enrichment techniques, which involve augmenting the view of the software with peripheral information, so that the relative information can be more easily identified.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>kevin a schneider</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of saskatchewan</Affiliation_Name>
    <Author_Id>2023082789</Author_Id>
    <All_Authors>kevin a schneider, andrew sutherland</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079128191</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Towards a framework for software navigation techniques</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370140</DOI>
    <Abstract>Making a change to a large software system requires investing time in understanding the system first. In the context of programming, navigation refers to the process of finding one's way through a complex network of programming constructs and other software artifacts. The process consists of answering questions such as "What am I looking at?" and "What do I want to look at next?", along with the question of "How do I get there?". This paper looks at the range of techniques used to aid navigation, and categorizes them using three perspectives: perceptual techniques, which use graphical representations and exploit spatial memory to aid navigation; filtering techniques, which operate by automatically reducing the amount of information provided so that the appropriate pieces of information are easy to find; and enrichment techniques, which involve augmenting the view of the software with peripheral information, so that the relative information can be more easily identified.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>andrew sutherland</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of saskatchewan</Affiliation_Name>
    <Author_Id>2572549191</Author_Id>
    <All_Authors>kevin a schneider, andrew sutherland</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079324198</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Communication strategies for mentoring in software development projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593712</DOI>
    <Abstract>As with professionals in all engineering disciplines, software developers new to a project must be given the implicit and explicit knowledge they need to be productive, in an effective and appropriate way, due to fluid team dynamics, geographical distribution, and other factors. As part of a broader study of communication in software development, we focus here on communication strategies for mentoring. We explore some examples of mentoring-oriented communication, in an educational setting and in an open-source consortium of academics and professionals. Through further study, we plan to draw out recurring patterns of communication between mentors and proteges.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>shreya kumar</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>michigan technological university</Affiliation_Name>
    <Author_Id>2172286263</Author_Id>
    <All_Authors>shreya kumar, charles wallace</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079324198</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Communication strategies for mentoring in software development projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593712</DOI>
    <Abstract>As with professionals in all engineering disciplines, software developers new to a project must be given the implicit and explicit knowledge they need to be productive, in an effective and appropriate way, due to fluid team dynamics, geographical distribution, and other factors. As part of a broader study of communication in software development, we focus here on communication strategies for mentoring. We explore some examples of mentoring-oriented communication, in an educational setting and in an open-source consortium of academics and professionals. Through further study, we plan to draw out recurring patterns of communication between mentors and proteges.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>charles wallace</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>michigan technological university</Affiliation_Name>
    <Author_Id>2251710351</Author_Id>
    <All_Authors>shreya kumar, charles wallace</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079423685</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Supporting distributed software engineering in a fully distributed organization</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223017</DOI>
    <Abstract>Software engineering is increasingly carried out in distributed settings. Software engineers are becoming more nomadic in carrying out their work, working from the customer location, the headquarters of their own company, their home, or sometimes even from their holiday locations. Technological support is needed to overcome the negative impacts of distance that are introduced by this trend. The central theme in this paper for supporting dislocated software engineers lies in increasing their awareness level to a level similar to (or even exceeding) what they experience in a co-located setting. In this paper we present the context in which we are bootstrapping a custom fit environment to support a team of fully dislocated software engineers and the incremental process we use. By working in this fashion we are discovering the requirements to support fully distributed teams while at the same time providing our setting with working solutions to help them with their day to day challenges. Finally, this continuous practical use also provides us with empirical data to validate the increase in awareness levels of dislocated software engineers and helps us in pinpointing important open research challenges.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>ben van gameren</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>delft university of technology</Affiliation_Name>
    <Author_Id>304093320</Author_Id>
    <All_Authors>ben van gameren, kevin dullemond, rini van solingen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079423685</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Supporting distributed software engineering in a fully distributed organization</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223017</DOI>
    <Abstract>Software engineering is increasingly carried out in distributed settings. Software engineers are becoming more nomadic in carrying out their work, working from the customer location, the headquarters of their own company, their home, or sometimes even from their holiday locations. Technological support is needed to overcome the negative impacts of distance that are introduced by this trend. The central theme in this paper for supporting dislocated software engineers lies in increasing their awareness level to a level similar to (or even exceeding) what they experience in a co-located setting. In this paper we present the context in which we are bootstrapping a custom fit environment to support a team of fully dislocated software engineers and the incremental process we use. By working in this fashion we are discovering the requirements to support fully distributed teams while at the same time providing our setting with working solutions to help them with their day to day challenges. Finally, this continuous practical use also provides us with empirical data to validate the increase in awareness levels of dislocated software engineers and helps us in pinpointing important open research challenges.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>kevin dullemond</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>delft university of technology</Affiliation_Name>
    <Author_Id>894103220</Author_Id>
    <All_Authors>ben van gameren, kevin dullemond, rini van solingen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2079423685</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Supporting distributed software engineering in a fully distributed organization</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223017</DOI>
    <Abstract>Software engineering is increasingly carried out in distributed settings. Software engineers are becoming more nomadic in carrying out their work, working from the customer location, the headquarters of their own company, their home, or sometimes even from their holiday locations. Technological support is needed to overcome the negative impacts of distance that are introduced by this trend. The central theme in this paper for supporting dislocated software engineers lies in increasing their awareness level to a level similar to (or even exceeding) what they experience in a co-located setting. In this paper we present the context in which we are bootstrapping a custom fit environment to support a team of fully dislocated software engineers and the incremental process we use. By working in this fashion we are discovering the requirements to support fully distributed teams while at the same time providing our setting with working solutions to help them with their day to day challenges. Finally, this continuous practical use also provides us with empirical data to validate the increase in awareness levels of dislocated software engineers and helps us in pinpointing important open research challenges.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>rini van solingen</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>delft university of technology</Affiliation_Name>
    <Author_Id>2022256008</Author_Id>
    <All_Authors>ben van gameren, kevin dullemond, rini van solingen</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081320456</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Regulation as an enabler for collaborative software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.29</DOI>
    <Abstract>Collaboration has become an integral aspect of software engineering. The widespread availability and adoption of social channels has led to a culture where today's developers participate and collaborate more frequently with one another. Awareness is widely accepted as an important feature of collaboration, but exactly what this encompasses and how processes and tools should be evaluated in terms of their awareness support remains an open challenge. In this paper, we borrow a theory of regulation from the Learning Science domain and show how this theory can be used to provide more detailed insights into how collaboration tools and processes can be compared and analyzed.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>allyson f hadwin</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2039825843</Author_Id>
    <All_Authors>allyson f hadwin, margaretanne d storey, maryi arciniegasmendez, alexey zagalsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081320456</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Regulation as an enabler for collaborative software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.29</DOI>
    <Abstract>Collaboration has become an integral aspect of software engineering. The widespread availability and adoption of social channels has led to a culture where today's developers participate and collaborate more frequently with one another. Awareness is widely accepted as an important feature of collaboration, but exactly what this encompasses and how processes and tools should be evaluated in terms of their awareness support remains an open challenge. In this paper, we borrow a theory of regulation from the Learning Science domain and show how this theory can be used to provide more detailed insights into how collaboration tools and processes can be compared and analyzed.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>margaretanne d storey</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2123850919</Author_Id>
    <All_Authors>allyson f hadwin, margaretanne d storey, maryi arciniegasmendez, alexey zagalsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081320456</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Regulation as an enabler for collaborative software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.29</DOI>
    <Abstract>Collaboration has become an integral aspect of software engineering. The widespread availability and adoption of social channels has led to a culture where today's developers participate and collaborate more frequently with one another. Awareness is widely accepted as an important feature of collaboration, but exactly what this encompasses and how processes and tools should be evaluated in terms of their awareness support remains an open challenge. In this paper, we borrow a theory of regulation from the Learning Science domain and show how this theory can be used to provide more detailed insights into how collaboration tools and processes can be compared and analyzed.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>maryi arciniegasmendez</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2226145067</Author_Id>
    <All_Authors>allyson f hadwin, margaretanne d storey, maryi arciniegasmendez, alexey zagalsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081320456</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Regulation as an enabler for collaborative software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.29</DOI>
    <Abstract>Collaboration has become an integral aspect of software engineering. The widespread availability and adoption of social channels has led to a culture where today's developers participate and collaborate more frequently with one another. Awareness is widely accepted as an important feature of collaboration, but exactly what this encompasses and how processes and tools should be evaluated in terms of their awareness support remains an open challenge. In this paper, we borrow a theory of regulation from the Learning Science domain and show how this theory can be used to provide more detailed insights into how collaboration tools and processes can be compared and analyzed.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>alexey zagalsky</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2306487265</Author_Id>
    <All_Authors>allyson f hadwin, margaretanne d storey, maryi arciniegasmendez, alexey zagalsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081344965</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Getting at ephemeral flaws</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223030</DOI>
    <Abstract>Software rarely works as intended when it is initially written. Things go wrong, and developers are commonly understood to form theories and strategies to deal with them. Much of this knowledge relates to ephemeral flaws rather than reported bugs, and is not captured in the software record. As a result, these flaws and understanding about them are neglected in software engineering research. In this paper we describe a study designed to elicit stories from software developers about problems they encounter in their daily work. We also offer preliminary thoughts about the utility of retrospective interviewing in getting at information about ephemeral flaws.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>marian petre</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2086609251</Author_Id>
    <All_Authors>marian petre, tamara lopez, bashar nuseibeh</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081344965</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Getting at ephemeral flaws</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223030</DOI>
    <Abstract>Software rarely works as intended when it is initially written. Things go wrong, and developers are commonly understood to form theories and strategies to deal with them. Much of this knowledge relates to ephemeral flaws rather than reported bugs, and is not captured in the software record. As a result, these flaws and understanding about them are neglected in software engineering research. In this paper we describe a study designed to elicit stories from software developers about problems they encounter in their daily work. We also offer preliminary thoughts about the utility of retrospective interviewing in getting at information about ephemeral flaws.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>tamara lopez</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2134091056</Author_Id>
    <All_Authors>marian petre, tamara lopez, bashar nuseibeh</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081344965</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Getting at ephemeral flaws</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223030</DOI>
    <Abstract>Software rarely works as intended when it is initially written. Things go wrong, and developers are commonly understood to form theories and strategies to deal with them. Much of this knowledge relates to ephemeral flaws rather than reported bugs, and is not captured in the software record. As a result, these flaws and understanding about them are neglected in software engineering research. In this paper we describe a study designed to elicit stories from software developers about problems they encounter in their daily work. We also offer preliminary thoughts about the utility of retrospective interviewing in getting at information about ephemeral flaws.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>bashar nuseibeh</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2207023792</Author_Id>
    <All_Authors>marian petre, tamara lopez, bashar nuseibeh</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081865306</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Performance assessment metrics for software testers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223025</DOI>
    <Abstract>The reliability of delivered software depends on the performance of the individuals responsible for testing it. However, there are currently no standard methods for assessing the performance of software testers, nor even agreement on important assessment criteria. A literature review reveals several different human-centric factors that have been suggested as important. However, the relative importance of these factors is unknown. This paper reports the results of a survey of professional testers indicating their views on the importance of a number of proposed factors. Their views, we believe, will be important in designing a more formal and widely acceptable performance assessment method for software testers.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>tanjila kanij</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>swinburne university of technology</Affiliation_Name>
    <Author_Id>62530647</Author_Id>
    <All_Authors>tanjila kanij, robert g merkel, john c grundy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081865306</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Performance assessment metrics for software testers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223025</DOI>
    <Abstract>The reliability of delivered software depends on the performance of the individuals responsible for testing it. However, there are currently no standard methods for assessing the performance of software testers, nor even agreement on important assessment criteria. A literature review reveals several different human-centric factors that have been suggested as important. However, the relative importance of these factors is unknown. This paper reports the results of a survey of professional testers indicating their views on the importance of a number of proposed factors. Their views, we believe, will be important in designing a more formal and widely acceptable performance assessment method for software testers.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>robert g merkel</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>monash university clayton campus</Affiliation_Name>
    <Author_Id>2098539194</Author_Id>
    <All_Authors>tanjila kanij, robert g merkel, john c grundy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2081865306</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Performance assessment metrics for software testers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223025</DOI>
    <Abstract>The reliability of delivered software depends on the performance of the individuals responsible for testing it. However, there are currently no standard methods for assessing the performance of software testers, nor even agreement on important assessment criteria. A literature review reveals several different human-centric factors that have been suggested as important. However, the relative importance of these factors is unknown. This paper reports the results of a survey of professional testers indicating their views on the importance of a number of proposed factors. Their views, we believe, will be important in designing a more formal and widely acceptable performance assessment method for software testers.</Abstract>
    <Abstract_Length>104</Abstract_Length>
    <Author_Name>john c grundy</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>swinburne university of technology</Affiliation_Name>
    <Author_Id>2311088539</Author_Id>
    <All_Authors>tanjila kanij, robert g merkel, john c grundy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2083909759</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Towards collaboration-centric pattern-based software development support</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614743</DOI>
    <Abstract>Software engineering activities tend to be loosely coupled to allow for flexibly reacting to unforeseen development complexity, requirements changes, and progress delays. This flexibility comes a the price of hidden dependencies among design and code artifacts that make it difficult or even impossible to assess change impact. Incorrect change propagation subsequently results in costly errors. This position paper proposes a novel approach based on monitoring engineering activities for subsequent high-level pattern detection. Patterns of (i) collaboration structures, (ii) temporal action sequences, and (iii) artifact consistency constraints serve as input to recommendation and automatic reconfiguration algorithms for ultimately avoiding and correcting artifact inconsistencies.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>alexander egyed</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>johannes kepler university of linz</Affiliation_Name>
    <Author_Id>722927782</Author_Id>
    <All_Authors>alexander egyed, c dorn</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2083909759</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Towards collaboration-centric pattern-based software development support</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614743</DOI>
    <Abstract>Software engineering activities tend to be loosely coupled to allow for flexibly reacting to unforeseen development complexity, requirements changes, and progress delays. This flexibility comes a the price of hidden dependencies among design and code artifacts that make it difficult or even impossible to assess change impact. Incorrect change propagation subsequently results in costly errors. This position paper proposes a novel approach based on monitoring engineering activities for subsequent high-level pattern detection. Patterns of (i) collaboration structures, (ii) temporal action sequences, and (iii) artifact consistency constraints serve as input to recommendation and automatic reconfiguration algorithms for ultimately avoiding and correcting artifact inconsistencies.</Abstract>
    <Abstract_Length>102</Abstract_Length>
    <Author_Name>c dorn</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>vienna university of technology</Affiliation_Name>
    <Author_Id>2483016140</Author_Id>
    <All_Authors>alexander egyed, c dorn</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2083970733</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>What makes it hard to design instructional software?: towards a collaborative platform for stakeholders of instructional software</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223013</DOI>
    <Abstract>People and communication between them is often ignored in software engineering even though they are crucial to the success or failure of a software project. During the life cycle of software, there is communication, cooperation and collaboration ( C3 ) between a wide range of diversified stakeholders ranging from management team to maintenance team. We believe that the lack of emphasis on improving  C3  is often the major cause for software failures. In this paper, we summarize four and half years of our experience of a analyzing a decade-long instructional software for adult literacy developed by 9 different teams spread across 9 different locations following 9 varied processes. We present the different kinds of stakeholders that we came across during this analysis and present the challenges of  C3  in that context. We then present the initial facets of our solution from three major dimensions (i) designing a unifying modeling language for improving stakeholder  C3  (ii) modeling information for multiple stakeholders using various modes of rendering at multiple levels of granularity (iii) harnessing the power of social networking to improve  C3  among all stakeholders.</Abstract>
    <Abstract_Length>191</Abstract_Length>
    <Author_Name>kesav v nori</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>international institute of information technology hyderabad</Affiliation_Name>
    <Author_Id>1979494401</Author_Id>
    <All_Authors>kesav v nori, sridhar chimalakonda</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2083970733</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>What makes it hard to design instructional software?: towards a collaborative platform for stakeholders of instructional software</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223013</DOI>
    <Abstract>People and communication between them is often ignored in software engineering even though they are crucial to the success or failure of a software project. During the life cycle of software, there is communication, cooperation and collaboration ( C3 ) between a wide range of diversified stakeholders ranging from management team to maintenance team. We believe that the lack of emphasis on improving  C3  is often the major cause for software failures. In this paper, we summarize four and half years of our experience of a analyzing a decade-long instructional software for adult literacy developed by 9 different teams spread across 9 different locations following 9 varied processes. We present the different kinds of stakeholders that we came across during this analysis and present the challenges of  C3  in that context. We then present the initial facets of our solution from three major dimensions (i) designing a unifying modeling language for improving stakeholder  C3  (ii) modeling information for multiple stakeholders using various modes of rendering at multiple levels of granularity (iii) harnessing the power of social networking to improve  C3  among all stakeholders.</Abstract>
    <Abstract_Length>191</Abstract_Length>
    <Author_Name>sridhar chimalakonda</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>international institute of information technology hyderabad</Affiliation_Name>
    <Author_Id>2060134365</Author_Id>
    <All_Authors>kesav v nori, sridhar chimalakonda</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2084362971</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>28</Citations_Count>
    <Display_Name>Communication patterns in geographically distributed software development and engineers' contributions to the development effort</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370121</DOI>
    <Abstract>This study seeks to shed light on how communication patterns in geographically distributed software development (GDSD) projects evolve over time and how they relate to developers' contributions to the development effort. Data from two GDSD projects from two distinct companies were collected. The analysis showed that the definition of formal roles had an important impact on patterns of communication across development locations. In one project a group of developers emerged over time as the liaisons between geographical locations. In addition to handling the communication and coordination load across locations, those same engineers contributed the most to the development effort. On the other hand, in the second project, communication across site was formalized and the developers involved in the cross site communication and coordination activities were not as productive.</Abstract>
    <Abstract_Length>128</Abstract_Length>
    <Author_Name>james d herbsleb</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>202682525</Author_Id>
    <All_Authors>james d herbsleb, marcelo cataldo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2084362971</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>28</Citations_Count>
    <Display_Name>Communication patterns in geographically distributed software development and engineers' contributions to the development effort</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370121</DOI>
    <Abstract>This study seeks to shed light on how communication patterns in geographically distributed software development (GDSD) projects evolve over time and how they relate to developers' contributions to the development effort. Data from two GDSD projects from two distinct companies were collected. The analysis showed that the definition of formal roles had an important impact on patterns of communication across development locations. In one project a group of developers emerged over time as the liaisons between geographical locations. In addition to handling the communication and coordination load across locations, those same engineers contributed the most to the development effort. On the other hand, in the second project, communication across site was formalized and the developers involved in the cross site communication and coordination activities were not as productive.</Abstract>
    <Abstract_Length>128</Abstract_Length>
    <Author_Name>marcelo cataldo</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>bosch</Affiliation_Name>
    <Author_Id>2169789338</Author_Id>
    <All_Authors>james d herbsleb, marcelo cataldo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085477894</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Ad-hoc leadership in agile software development environments</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833316</DOI>
    <Abstract>Leadership is the ability to influence people, leading them to behave in a certain way in order to achieve the group's goals. Leadership is independent of job titles and descriptions. Usually, however, in order to lead, leaders need the power derived from their organizational positions. There are different leadership styles, like task-oriented versus people-oriented, directive versus permissive, autocrat versus democrat. In this paper, we examine the leadership concept in software development environments and focus on leadership in transition processes to agile software development. Specifically, based on our comprehensive research on agile software development, we suggest a leadership style - ad-hoc leadership - that usually emerges in such change processes. We present the characteristics, dynamic and uniqueness of this leadership style and illustrate its usefulness for the analysis of representative scenarios.</Abstract>
    <Abstract_Length>130</Abstract_Length>
    <Author_Name>orit hazzan</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>technion israel institute of technology</Affiliation_Name>
    <Author_Id>266418477</Author_Id>
    <All_Authors>orit hazzan, yael dubinsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085477894</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Ad-hoc leadership in agile software development environments</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833316</DOI>
    <Abstract>Leadership is the ability to influence people, leading them to behave in a certain way in order to achieve the group's goals. Leadership is independent of job titles and descriptions. Usually, however, in order to lead, leaders need the power derived from their organizational positions. There are different leadership styles, like task-oriented versus people-oriented, directive versus permissive, autocrat versus democrat. In this paper, we examine the leadership concept in software development environments and focus on leadership in transition processes to agile software development. Specifically, based on our comprehensive research on agile software development, we suggest a leadership style - ad-hoc leadership - that usually emerges in such change processes. We present the characteristics, dynamic and uniqueness of this leadership style and illustrate its usefulness for the analysis of representative scenarios.</Abstract>
    <Abstract_Length>130</Abstract_Length>
    <Author_Name>yael dubinsky</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2050650508</Author_Id>
    <All_Authors>orit hazzan, yael dubinsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085625027</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A comparison of junior and senior software engineering students' personalities</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593724</DOI>
    <Abstract>There has been an increasing motivation among researchers to identify relationships between software engineering tasks and software developers' personality traits. This study investigates MBTI personality distribution of first (junior) and fifth (senior) year software engineering students at the University of Informatics Sciences, in Havana (Cuba), aiming to infer attrition rates among software engineering students. One hundred software engineering students were surveyed, 50% at junior level and 50% at senior level. Results show that ESTPs and ENTPs are over-represented in both samples, whereas INTJs and INTPs are under-represented. This study may help us to predict which types are more likely to complete a degree in software engineering.</Abstract>
    <Abstract_Length>106</Abstract_Length>
    <Author_Name>luiz fernando capretz</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of western ontario</Affiliation_Name>
    <Author_Id>2019655441</Author_Id>
    <All_Authors>luiz fernando capretz, daniel varona, yadira lizamamue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085625027</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A comparison of junior and senior software engineering students' personalities</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593724</DOI>
    <Abstract>There has been an increasing motivation among researchers to identify relationships between software engineering tasks and software developers' personality traits. This study investigates MBTI personality distribution of first (junior) and fifth (senior) year software engineering students at the University of Informatics Sciences, in Havana (Cuba), aiming to infer attrition rates among software engineering students. One hundred software engineering students were surveyed, 50% at junior level and 50% at senior level. Results show that ESTPs and ENTPs are over-represented in both samples, whereas INTJs and INTPs are under-represented. This study may help us to predict which types are more likely to complete a degree in software engineering.</Abstract>
    <Abstract_Length>106</Abstract_Length>
    <Author_Name>daniel varona</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2108445686</Author_Id>
    <All_Authors>luiz fernando capretz, daniel varona, yadira lizamamue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085625027</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A comparison of junior and senior software engineering students' personalities</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593724</DOI>
    <Abstract>There has been an increasing motivation among researchers to identify relationships between software engineering tasks and software developers' personality traits. This study investigates MBTI personality distribution of first (junior) and fifth (senior) year software engineering students at the University of Informatics Sciences, in Havana (Cuba), aiming to infer attrition rates among software engineering students. One hundred software engineering students were surveyed, 50% at junior level and 50% at senior level. Results show that ESTPs and ENTPs are over-represented in both samples, whereas INTJs and INTPs are under-represented. This study may help us to predict which types are more likely to complete a degree in software engineering.</Abstract>
    <Abstract_Length>106</Abstract_Length>
    <Author_Name>yadira lizamamue</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2230136814</Author_Id>
    <All_Authors>luiz fernando capretz, daniel varona, yadira lizamamue</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085966304</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Of code and context: collaboration between developers and translators</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984653</DOI>
    <Abstract>Software for international markets often requires cultural adaption in order to be successful in different markets. To achieve this, software developers work together with translators to internationalize and localize their product as necessary. In this paper, we reflect on our experiences of collaboration between these two specialist types from different disciplines. We contrast the differences in object of work, education, values and perception of product quality and illustrate what other factors might have an influence in collaboration. Our experiences suggest that the collaboration between developers and localizers might be improved by integrating translators into development teams, and by emphasizing the importance of understanding each other's work better.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>malte ressin</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of west london</Affiliation_Name>
    <Author_Id>104899105</Author_Id>
    <All_Authors>malte ressin, jose abdelnournocera, andy smith</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085966304</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Of code and context: collaboration between developers and translators</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984653</DOI>
    <Abstract>Software for international markets often requires cultural adaption in order to be successful in different markets. To achieve this, software developers work together with translators to internationalize and localize their product as necessary. In this paper, we reflect on our experiences of collaboration between these two specialist types from different disciplines. We contrast the differences in object of work, education, values and perception of product quality and illustrate what other factors might have an influence in collaboration. Our experiences suggest that the collaboration between developers and localizers might be improved by integrating translators into development teams, and by emphasizing the importance of understanding each other's work better.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>jose abdelnournocera</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of west london</Affiliation_Name>
    <Author_Id>408217030</Author_Id>
    <All_Authors>malte ressin, jose abdelnournocera, andy smith</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2085966304</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Of code and context: collaboration between developers and translators</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984653</DOI>
    <Abstract>Software for international markets often requires cultural adaption in order to be successful in different markets. To achieve this, software developers work together with translators to internationalize and localize their product as necessary. In this paper, we reflect on our experiences of collaboration between these two specialist types from different disciplines. We contrast the differences in object of work, education, values and perception of product quality and illustrate what other factors might have an influence in collaboration. Our experiences suggest that the collaboration between developers and localizers might be improved by integrating translators into development teams, and by emphasizing the importance of understanding each other's work better.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>andy smith</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of west london</Affiliation_Name>
    <Author_Id>2134197258</Author_Id>
    <All_Authors>malte ressin, jose abdelnournocera, andy smith</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2086919246</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Evaluation of the simulated application of the UCD-LSI method: the iPeople case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.10</DOI>
    <Abstract>In previous work we showed in a systematic mapping study that there is no method to enhance user-developer communication (UDC) in the design and implementation phase of large-scale IT projects (LSI). We then defined the UDC-LSI method. It is substantial especially for newly designed methods to evaluate them within a real-world context. As it is difficult to find a company willing to apply an untested method, as a first step to full evaluation we present in this work a case study where we study the utility and acceptance of a simulated application of the UDC-LSI method. To make the simulation as real as possible we first thoroughly analyzed the as-is status of the iPeople project. Then we simulated an instantiation of the UDC-LSI method for the iPeople project and we evaluated this instantiation with project participants. The case study showed that it is possible to instantiate the method for the project under study. The evaluation confirmed a positive effect of the UDC-LSI method on system success (effectiveness), the feasibility and high acceptance of the method and a positive effort-benefit ratio (efficiency).</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>ulrike abelein</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>heidelberg university</Affiliation_Name>
    <Author_Id>2029228727</Author_Id>
    <All_Authors>ulrike abelein, maria woydich, barbara paech, michael kern</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2086919246</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Evaluation of the simulated application of the UCD-LSI method: the iPeople case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.10</DOI>
    <Abstract>In previous work we showed in a systematic mapping study that there is no method to enhance user-developer communication (UDC) in the design and implementation phase of large-scale IT projects (LSI). We then defined the UDC-LSI method. It is substantial especially for newly designed methods to evaluate them within a real-world context. As it is difficult to find a company willing to apply an untested method, as a first step to full evaluation we present in this work a case study where we study the utility and acceptance of a simulated application of the UDC-LSI method. To make the simulation as real as possible we first thoroughly analyzed the as-is status of the iPeople project. Then we simulated an instantiation of the UDC-LSI method for the iPeople project and we evaluated this instantiation with project participants. The case study showed that it is possible to instantiate the method for the project under study. The evaluation confirmed a positive effect of the UDC-LSI method on system success (effectiveness), the feasibility and high acceptance of the method and a positive effort-benefit ratio (efficiency).</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>maria woydich</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2224239721</Author_Id>
    <All_Authors>ulrike abelein, maria woydich, barbara paech, michael kern</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2086919246</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Evaluation of the simulated application of the UCD-LSI method: the iPeople case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.10</DOI>
    <Abstract>In previous work we showed in a systematic mapping study that there is no method to enhance user-developer communication (UDC) in the design and implementation phase of large-scale IT projects (LSI). We then defined the UDC-LSI method. It is substantial especially for newly designed methods to evaluate them within a real-world context. As it is difficult to find a company willing to apply an untested method, as a first step to full evaluation we present in this work a case study where we study the utility and acceptance of a simulated application of the UDC-LSI method. To make the simulation as real as possible we first thoroughly analyzed the as-is status of the iPeople project. Then we simulated an instantiation of the UDC-LSI method for the iPeople project and we evaluated this instantiation with project participants. The case study showed that it is possible to instantiate the method for the project under study. The evaluation confirmed a positive effect of the UDC-LSI method on system success (effectiveness), the feasibility and high acceptance of the method and a positive effort-benefit ratio (efficiency).</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>barbara paech</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>heidelberg university</Affiliation_Name>
    <Author_Id>2282312329</Author_Id>
    <All_Authors>ulrike abelein, maria woydich, barbara paech, michael kern</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2086919246</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Evaluation of the simulated application of the UCD-LSI method: the iPeople case study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.10</DOI>
    <Abstract>In previous work we showed in a systematic mapping study that there is no method to enhance user-developer communication (UDC) in the design and implementation phase of large-scale IT projects (LSI). We then defined the UDC-LSI method. It is substantial especially for newly designed methods to evaluate them within a real-world context. As it is difficult to find a company willing to apply an untested method, as a first step to full evaluation we present in this work a case study where we study the utility and acceptance of a simulated application of the UDC-LSI method. To make the simulation as real as possible we first thoroughly analyzed the as-is status of the iPeople project. Then we simulated an instantiation of the UDC-LSI method for the iPeople project and we evaluated this instantiation with project participants. The case study showed that it is possible to instantiate the method for the project under study. The evaluation confirmed a positive effect of the UDC-LSI method on system success (effectiveness), the feasibility and high acceptance of the method and a positive effort-benefit ratio (efficiency).</Abstract>
    <Abstract_Length>181</Abstract_Length>
    <Author_Name>michael kern</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2506889957</Author_Id>
    <All_Authors>ulrike abelein, maria woydich, barbara paech, michael kern</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2087466259</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Fostering user-developer collaboration with infrastructure probes</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370126</DOI>
    <Abstract>In this paper we present a new variation of cultural probes, called Infrastructure Probes (IP). IPs can be seen as an additional ethnographic method to get a deeper understanding of the user's working context and thus help to improve the collaboration between users and developers regarding requirements elicitation. They consist of a screenshot tool, a digital camera, Post-it's, forms, an IT diary and a writing pad, allowing end users to observe and document their use of the IT infrastructure in question with special emphasis on problematic situations. The results of a first evaluation of the concept show that IPs could supplement traditional ethnographic methods to give researchers as well as software engineers a deeper insight into the working habits of users, but could also be a means for users to document and exchange technology usages. For a reflection of the IP concept we conducted feedback workshops together with the participants of the evaluation. The feedback resulted in an improved version which is currently already under evaluation.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>volkmar pipek</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>1965193956</Author_Id>
    <All_Authors>volkmar pipek, jan hes, christian dorner</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2087466259</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Fostering user-developer collaboration with infrastructure probes</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370126</DOI>
    <Abstract>In this paper we present a new variation of cultural probes, called Infrastructure Probes (IP). IPs can be seen as an additional ethnographic method to get a deeper understanding of the user's working context and thus help to improve the collaboration between users and developers regarding requirements elicitation. They consist of a screenshot tool, a digital camera, Post-it's, forms, an IT diary and a writing pad, allowing end users to observe and document their use of the IT infrastructure in question with special emphasis on problematic situations. The results of a first evaluation of the concept show that IPs could supplement traditional ethnographic methods to give researchers as well as software engineers a deeper insight into the working habits of users, but could also be a means for users to document and exchange technology usages. For a reflection of the IP concept we conducted feedback workshops together with the participants of the evaluation. The feedback resulted in an improved version which is currently already under evaluation.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>jan hes</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2103312554</Author_Id>
    <All_Authors>volkmar pipek, jan hes, christian dorner</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2087466259</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Fostering user-developer collaboration with infrastructure probes</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370126</DOI>
    <Abstract>In this paper we present a new variation of cultural probes, called Infrastructure Probes (IP). IPs can be seen as an additional ethnographic method to get a deeper understanding of the user's working context and thus help to improve the collaboration between users and developers regarding requirements elicitation. They consist of a screenshot tool, a digital camera, Post-it's, forms, an IT diary and a writing pad, allowing end users to observe and document their use of the IT infrastructure in question with special emphasis on problematic situations. The results of a first evaluation of the concept show that IPs could supplement traditional ethnographic methods to give researchers as well as software engineers a deeper insight into the working habits of users, but could also be a means for users to document and exchange technology usages. For a reflection of the IP concept we conducted feedback workshops together with the participants of the evaluation. The feedback resulted in an improved version which is currently already under evaluation.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>christian dorner</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2326711103</Author_Id>
    <All_Authors>volkmar pipek, jan hes, christian dorner</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2087923521</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Cooperation between developers and operations in software engineering projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370141</DOI>
    <Abstract>In this paper we discuss how the cooperation between developers and operations staff is practiced. We have analyzed data collected from a focus group of experienced software engineers and project managers, as well as interviews from two case studies. Our position is that well performed cooperation between the development team and the operations team is crucial for successful deployment and operations of a new or extensively revised software system. The data shows that cooperation can be improved in several development activities like requirements engineering, system design, documentation, testing, training, and deployment planning. Likely consequences of poor cooperation in these activities are lower productivity in development and operations, as well as unsatisfied users.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>bjornar tessem</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of bergen</Affiliation_Name>
    <Author_Id>2040139991</Author_Id>
    <All_Authors>bjornar tessem, jon iden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2087923521</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Cooperation between developers and operations in software engineering projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370141</DOI>
    <Abstract>In this paper we discuss how the cooperation between developers and operations staff is practiced. We have analyzed data collected from a focus group of experienced software engineers and project managers, as well as interviews from two case studies. Our position is that well performed cooperation between the development team and the operations team is crucial for successful deployment and operations of a new or extensively revised software system. The data shows that cooperation can be improved in several development activities like requirements engineering, system design, documentation, testing, training, and deployment planning. Likely consequences of poor cooperation in these activities are lower productivity in development and operations, as well as unsatisfied users.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>jon iden</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>norwegian school of economics</Affiliation_Name>
    <Author_Id>2077033633</Author_Id>
    <All_Authors>bjornar tessem, jon iden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088008570</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Geographically distributed sensemaking: developing understanding in forum-based software development teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.12</DOI>
    <Abstract>Global software development is becoming increasingly popular. Working in geographically distributed teams affords advantages to both employer and employee alike. Despite this, distributed working remains a point of contention for many organisations, with some claiming it unsuitable for complex collaborative work. Many argue that the complex act of team sensemaking (the process by which a team develops an understanding of a situation or problem) can only effectively be performed in co-located environments. To investigate this assumption, we examine the communications of a geographically distributed game development team. This global team communicates entirely via forums, yet still manages complex sensemaking tasks asynchronously. We use thematic analysis to investigate how themes develop during online conversations, and use speech act sequences to explore how understanding is developed during these asynchronous conversations. Our findings demonstrate how collective sensemaking occurs within a real-world, geographically distributed team.</Abstract>
    <Abstract_Length>141</Abstract_Length>
    <Author_Name>peter sawyer</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>lancaster university</Affiliation_Name>
    <Author_Id>2133238635</Author_Id>
    <All_Authors>peter sawyer, patrick stacey, ben shreeve, paul ralph</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088008570</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Geographically distributed sensemaking: developing understanding in forum-based software development teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.12</DOI>
    <Abstract>Global software development is becoming increasingly popular. Working in geographically distributed teams affords advantages to both employer and employee alike. Despite this, distributed working remains a point of contention for many organisations, with some claiming it unsuitable for complex collaborative work. Many argue that the complex act of team sensemaking (the process by which a team develops an understanding of a situation or problem) can only effectively be performed in co-located environments. To investigate this assumption, we examine the communications of a geographically distributed game development team. This global team communicates entirely via forums, yet still manages complex sensemaking tasks asynchronously. We use thematic analysis to investigate how themes develop during online conversations, and use speech act sequences to explore how understanding is developed during these asynchronous conversations. Our findings demonstrate how collective sensemaking occurs within a real-world, geographically distributed team.</Abstract>
    <Abstract_Length>141</Abstract_Length>
    <Author_Name>patrick stacey</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>lancaster university</Affiliation_Name>
    <Author_Id>2134890474</Author_Id>
    <All_Authors>peter sawyer, patrick stacey, ben shreeve, paul ralph</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088008570</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Geographically distributed sensemaking: developing understanding in forum-based software development teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.12</DOI>
    <Abstract>Global software development is becoming increasingly popular. Working in geographically distributed teams affords advantages to both employer and employee alike. Despite this, distributed working remains a point of contention for many organisations, with some claiming it unsuitable for complex collaborative work. Many argue that the complex act of team sensemaking (the process by which a team develops an understanding of a situation or problem) can only effectively be performed in co-located environments. To investigate this assumption, we examine the communications of a geographically distributed game development team. This global team communicates entirely via forums, yet still manages complex sensemaking tasks asynchronously. We use thematic analysis to investigate how themes develop during online conversations, and use speech act sequences to explore how understanding is developed during these asynchronous conversations. Our findings demonstrate how collective sensemaking occurs within a real-world, geographically distributed team.</Abstract>
    <Abstract_Length>141</Abstract_Length>
    <Author_Name>ben shreeve</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>lancaster university</Affiliation_Name>
    <Author_Id>2227862114</Author_Id>
    <All_Authors>peter sawyer, patrick stacey, ben shreeve, paul ralph</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088008570</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Geographically distributed sensemaking: developing understanding in forum-based software development teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.12</DOI>
    <Abstract>Global software development is becoming increasingly popular. Working in geographically distributed teams affords advantages to both employer and employee alike. Despite this, distributed working remains a point of contention for many organisations, with some claiming it unsuitable for complex collaborative work. Many argue that the complex act of team sensemaking (the process by which a team develops an understanding of a situation or problem) can only effectively be performed in co-located environments. To investigate this assumption, we examine the communications of a geographically distributed game development team. This global team communicates entirely via forums, yet still manages complex sensemaking tasks asynchronously. We use thematic analysis to investigate how themes develop during online conversations, and use speech act sequences to explore how understanding is developed during these asynchronous conversations. Our findings demonstrate how collective sensemaking occurs within a real-world, geographically distributed team.</Abstract>
    <Abstract_Length>141</Abstract_Length>
    <Author_Name>paul ralph</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of auckland</Affiliation_Name>
    <Author_Id>2287228680</Author_Id>
    <All_Authors>peter sawyer, patrick stacey, ben shreeve, paul ralph</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088946319</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Branching and merging: an investigation into current version control practices</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984645</DOI>
    <Abstract>The use of version control has become ubiquitous in software development projects. Version control systems facilitate parallel development and maintenance through  branching , the creation of isolated codelines.  Merging  is a consequence of branching and is the process of integrating codelines. However, there are unanswered questions about the use of version control to support parallel development; in particular, how are branching and merging used in practice? What defines a successful branching and merging strategy? As a first step towards answering these questions, we recruited a diverse sample of 140 version control users to participate in an online survey. In this paper, we present the survey results and 4 key observations about branching and merging practices in software development projects.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>jonathan sillito</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>1801224773</Author_Id>
    <All_Authors>jonathan sillito, robert j walker, shaun phillips</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088946319</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Branching and merging: an investigation into current version control practices</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984645</DOI>
    <Abstract>The use of version control has become ubiquitous in software development projects. Version control systems facilitate parallel development and maintenance through  branching , the creation of isolated codelines.  Merging  is a consequence of branching and is the process of integrating codelines. However, there are unanswered questions about the use of version control to support parallel development; in particular, how are branching and merging used in practice? What defines a successful branching and merging strategy? As a first step towards answering these questions, we recruited a diverse sample of 140 version control users to participate in an online survey. In this paper, we present the survey results and 4 key observations about branching and merging practices in software development projects.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>robert j walker</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2102868281</Author_Id>
    <All_Authors>jonathan sillito, robert j walker, shaun phillips</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2088946319</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Branching and merging: an investigation into current version control practices</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984645</DOI>
    <Abstract>The use of version control has become ubiquitous in software development projects. Version control systems facilitate parallel development and maintenance through  branching , the creation of isolated codelines.  Merging  is a consequence of branching and is the process of integrating codelines. However, there are unanswered questions about the use of version control to support parallel development; in particular, how are branching and merging used in practice? What defines a successful branching and merging strategy? As a first step towards answering these questions, we recruited a diverse sample of 140 version control users to participate in an online survey. In this paper, we present the survey results and 4 key observations about branching and merging practices in software development projects.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>shaun phillips</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2230077363</Author_Id>
    <All_Authors>jonathan sillito, robert j walker, shaun phillips</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089548805</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How social software supports cooperative practices in a globally distributed software project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593716</DOI>
    <Abstract>In Global Software Development (GSD), the lack of face- to-face communication is a major challenge and effective computer-mediated practices are necessary. This paper analyzes cooperative practices supported by Social Software (SoSo) in a GSD student project. The empirical results show that the role of SoSo is to support informal communication, enabling social talks and metawork, both necessary for establishing and for maintaining effective coordination mechanisms, thus successful cooperation.</Abstract>
    <Abstract_Length>68</Abstract_Length>
    <Author_Name>yvonne dittrich</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>146716645</Author_Id>
    <All_Authors>yvonne dittrich, rosalba giuffrida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089548805</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>How social software supports cooperative practices in a globally distributed software project</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593716</DOI>
    <Abstract>In Global Software Development (GSD), the lack of face- to-face communication is a major challenge and effective computer-mediated practices are necessary. This paper analyzes cooperative practices supported by Social Software (SoSo) in a GSD student project. The empirical results show that the role of SoSo is to support informal communication, enabling social talks and metawork, both necessary for establishing and for maintaining effective coordination mechanisms, thus successful cooperation.</Abstract>
    <Abstract_Length>68</Abstract_Length>
    <Author_Name>rosalba giuffrida</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>2000571226</Author_Id>
    <All_Authors>yvonne dittrich, rosalba giuffrida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>patrick wagstrom</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2027331839</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>peri l tarr</Author_Name>
    <Author_Position>7</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2109851473</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>jacquelyn a martino</Author_Name>
    <Author_Position>6</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2134489397</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>tim klinger</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2143692816</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>kate ehrlich</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2155093924</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>clay williams</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2155943688</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089787523</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>Supporting enterprise stakeholders in software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833328</DOI>
    <Abstract>Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.</Abstract>
    <Abstract_Length>99</Abstract_Length>
    <Author_Name>dick gabriel</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2303383547</Author_Id>
    <All_Authors>patrick wagstrom, peri l tarr, jacquelyn a martino, tim klinger, kate ehrlich, clay williams, dick gabriel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089903962</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Delivering software projects using captive university crowd</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593710</DOI>
    <Abstract>After two decades of hyper growth, Indian IT outsourcing market has reached a saturation level and is looking for the next breakthrough. The industry also faces a unique resourcing challenge a) abundant human resource supply but lack of industry ready deployable talent pool b) the next generation workforce’s outlook on workplace seems to be very different to the current workforce. In this paper we explore if Crowdsourcing can help in addressing these challenges. We conducted controlled experiments on a captive university crowd using organization’s Crowdsourcing platform. Typical tasks from real life projects were created and floated as contests. The results lead us to believe that Crowdsourcing using a captive university crowd has the potential to create deployable talent pool and also become an alternate resource pool in outsourcing delivery model – which can herald the next wave in outsourcing.</Abstract>
    <Abstract_Length>139</Abstract_Length>
    <Author_Name>vaijayanthi srinivasaraghavan</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2223424110</Author_Id>
    <All_Authors>vaijayanthi srinivasaraghavan, subramani ramakrishnan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2089903962</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Delivering software projects using captive university crowd</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593710</DOI>
    <Abstract>After two decades of hyper growth, Indian IT outsourcing market has reached a saturation level and is looking for the next breakthrough. The industry also faces a unique resourcing challenge a) abundant human resource supply but lack of industry ready deployable talent pool b) the next generation workforce’s outlook on workplace seems to be very different to the current workforce. In this paper we explore if Crowdsourcing can help in addressing these challenges. We conducted controlled experiments on a captive university crowd using organization’s Crowdsourcing platform. Typical tasks from real life projects were created and floated as contests. The results lead us to believe that Crowdsourcing using a captive university crowd has the potential to create deployable talent pool and also become an alternate resource pool in outsourcing delivery model – which can herald the next wave in outsourcing.</Abstract>
    <Abstract_Length>139</Abstract_Length>
    <Author_Name>subramani ramakrishnan</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2292766973</Author_Id>
    <All_Authors>vaijayanthi srinivasaraghavan, subramani ramakrishnan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2090229519</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>An open innovation approach in support of product release decisions</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593709</DOI>
    <Abstract>Release decisions are of pivotal importance for product success in incremental and iterative software development. In this paper, the wickedness of these decisions is approached by a collective problem solving process. The paradigm of Open Innovations is emphasizing the range of opportunities available to get access to distributed knowledge and information. In particular, we apply (i) Analytical Open Innovation for information gathering and (ii) Morphological Analysis (MA) for problem structuring. The proposed decision support methodology is illustrated by a comprehensive case study. In the context of OTT service delivery, planning of both features and their different functionality levels is studied. From the broad involvement of stakeholders in the whole formulation, structuring and solution process, a higher validity and customer value of the developed products is demonstrated. Without performing MA, the proposed feature implementations would include inconsistencies and thus create customer and user concerns. Furthermore, from community based detection of cost and value synergies, potential resource savings and additional value creation opportunities are utilized.</Abstract>
    <Abstract_Length>163</Abstract_Length>
    <Author_Name>guenther ruhe</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2027243795</Author_Id>
    <All_Authors>guenther ruhe, maleknaz nayebi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2090229519</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>An open innovation approach in support of product release decisions</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593709</DOI>
    <Abstract>Release decisions are of pivotal importance for product success in incremental and iterative software development. In this paper, the wickedness of these decisions is approached by a collective problem solving process. The paradigm of Open Innovations is emphasizing the range of opportunities available to get access to distributed knowledge and information. In particular, we apply (i) Analytical Open Innovation for information gathering and (ii) Morphological Analysis (MA) for problem structuring. The proposed decision support methodology is illustrated by a comprehensive case study. In the context of OTT service delivery, planning of both features and their different functionality levels is studied. From the broad involvement of stakeholders in the whole formulation, structuring and solution process, a higher validity and customer value of the developed products is demonstrated. Without performing MA, the proposed feature implementations would include inconsistencies and thus create customer and user concerns. Furthermore, from community based detection of cost and value synergies, potential resource savings and additional value creation opportunities are utilized.</Abstract>
    <Abstract_Length>163</Abstract_Length>
    <Author_Name>maleknaz nayebi</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2132519638</Author_Id>
    <All_Authors>guenther ruhe, maleknaz nayebi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2091491161</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>An empirical investigation of personality traits of software testers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.7</DOI>
    <Abstract>Software testing is the process of an execution-based investigation of some aspects of the software's quality. The efficiency of the process depends on the methods and technologies used, but crucially also on the human testers. Software testers typically attempt to anticipate and expose ways software may be defective, a fundamentally different task set to those of other software development practitioners. This raises the question of whether the personality of software testers may be different to other people involved in software development. To test this hypothesis, we collected personality profiles using the big five factor model of around 200 software development practitioners. Analysis of this data indicates that software testers are significantly higher on the conscientiousness factor than other software development practitioners, while other factors remain broadly consistent.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>tanjila kanij</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>swinburne university of technology</Affiliation_Name>
    <Author_Id>62530647</Author_Id>
    <All_Authors>tanjila kanij, robert g merkel, john c grundy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2091491161</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>An empirical investigation of personality traits of software testers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.7</DOI>
    <Abstract>Software testing is the process of an execution-based investigation of some aspects of the software's quality. The efficiency of the process depends on the methods and technologies used, but crucially also on the human testers. Software testers typically attempt to anticipate and expose ways software may be defective, a fundamentally different task set to those of other software development practitioners. This raises the question of whether the personality of software testers may be different to other people involved in software development. To test this hypothesis, we collected personality profiles using the big five factor model of around 200 software development practitioners. Analysis of this data indicates that software testers are significantly higher on the conscientiousness factor than other software development practitioners, while other factors remain broadly consistent.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>robert g merkel</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>monash university clayton campus</Affiliation_Name>
    <Author_Id>2098539194</Author_Id>
    <All_Authors>tanjila kanij, robert g merkel, john c grundy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2091491161</Paper_API_Id>
    <Paper_Year>2015</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>An empirical investigation of personality traits of software testers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2015.7</DOI>
    <Abstract>Software testing is the process of an execution-based investigation of some aspects of the software's quality. The efficiency of the process depends on the methods and technologies used, but crucially also on the human testers. Software testers typically attempt to anticipate and expose ways software may be defective, a fundamentally different task set to those of other software development practitioners. This raises the question of whether the personality of software testers may be different to other people involved in software development. To test this hypothesis, we collected personality profiles using the big five factor model of around 200 software development practitioners. Analysis of this data indicates that software testers are significantly higher on the conscientiousness factor than other software development practitioners, while other factors remain broadly consistent.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>john c grundy</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>swinburne university of technology</Affiliation_Name>
    <Author_Id>2311088539</Author_Id>
    <All_Authors>tanjila kanij, robert g merkel, john c grundy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092300736</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Toward proactive knowledge protection in community-based software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833323</DOI>
    <Abstract>Leveraging the abundant community resources, e.g. campus students, programming fans, software amateurs, is promising to be a flexible and effective approach for relieving the enterprise's IT resource shortage. However, the concern about confidential knowledge exposure makes most enterprises hesitate to outsource software development to community resources. Unlike the traditional legal protection mechanism that prevents community resources from exposing the already known confidential knowledge, this paper presents a proactive confidential knowledge protection technology, which prevents the community resources from learning the confidential knowledge in software development activities. First, the client is facilitated on identifying confidential knowledge involved in the software development activity. Then, the risky software design elements that might expose confidential knowledge are identified in both qualitative and quantitative way. Based on the identification result, a holistic proactive protection solution is presented by orchestrating task reservation, task pretending and task partition activities. Finally, the processed software development tasks are dispatched to community developers without worrying about the confidential knowledge exposure. The technology has been preliminarily validated in two community-based software development cases.</Abstract>
    <Abstract_Length>172</Abstract_Length>
    <Author_Name>xin zhou</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2106122251</Author_Id>
    <All_Authors>xin zhou, ying liu</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092300736</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Toward proactive knowledge protection in community-based software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833323</DOI>
    <Abstract>Leveraging the abundant community resources, e.g. campus students, programming fans, software amateurs, is promising to be a flexible and effective approach for relieving the enterprise's IT resource shortage. However, the concern about confidential knowledge exposure makes most enterprises hesitate to outsource software development to community resources. Unlike the traditional legal protection mechanism that prevents community resources from exposing the already known confidential knowledge, this paper presents a proactive confidential knowledge protection technology, which prevents the community resources from learning the confidential knowledge in software development activities. First, the client is facilitated on identifying confidential knowledge involved in the software development activity. Then, the risky software design elements that might expose confidential knowledge are identified in both qualitative and quantitative way. Based on the identification result, a holistic proactive protection solution is presented by orchestrating task reservation, task pretending and task partition activities. Finally, the processed software development tasks are dispatched to community developers without worrying about the confidential knowledge exposure. The technology has been preliminarily validated in two community-based software development cases.</Abstract>
    <Abstract_Length>172</Abstract_Length>
    <Author_Name>ying liu</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2584847040</Author_Id>
    <All_Authors>xin zhou, ying liu</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092554020</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Thirty years of software problems in the news</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593719</DOI>
    <Abstract>How have the consequences of software problems changed over the past 30 years? To begin to answer this question, we analyzed 386,381 news articles reporting on software problems published between 1980 and 2012, spanning widely circulated newspapers to small trade magazines. Our results show that after an increase in reporting just prior to Y2K, news on software problems has declined in North America, but increased in the rest of the world. Most articles only report minor consequences such as frustration, confusion, anger, or at worst, having to delay some activity for a few hours, usually due to service outages in government, transportation, finance, and information services. However, about once per month, the news reports at least one death, injury, or threatened access to food or shelter due to software problems. Reports of these severe consequences are also increasing, due primarily to stories about transportation and government software.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>bryan dosono</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>syracuse university</Affiliation_Name>
    <Author_Id>1208990682</Author_Id>
    <All_Authors>bryan dosono, andrew j ko, neeraja duriseti</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092554020</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Thirty years of software problems in the news</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593719</DOI>
    <Abstract>How have the consequences of software problems changed over the past 30 years? To begin to answer this question, we analyzed 386,381 news articles reporting on software problems published between 1980 and 2012, spanning widely circulated newspapers to small trade magazines. Our results show that after an increase in reporting just prior to Y2K, news on software problems has declined in North America, but increased in the rest of the world. Most articles only report minor consequences such as frustration, confusion, anger, or at worst, having to delay some activity for a few hours, usually due to service outages in government, transportation, finance, and information services. However, about once per month, the news reports at least one death, injury, or threatened access to food or shelter due to software problems. Reports of these severe consequences are also increasing, due primarily to stories about transportation and government software.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>andrew j ko</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of washington</Affiliation_Name>
    <Author_Id>2147219881</Author_Id>
    <All_Authors>bryan dosono, andrew j ko, neeraja duriseti</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092554020</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Thirty years of software problems in the news</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593719</DOI>
    <Abstract>How have the consequences of software problems changed over the past 30 years? To begin to answer this question, we analyzed 386,381 news articles reporting on software problems published between 1980 and 2012, spanning widely circulated newspapers to small trade magazines. Our results show that after an increase in reporting just prior to Y2K, news on software problems has declined in North America, but increased in the rest of the world. Most articles only report minor consequences such as frustration, confusion, anger, or at worst, having to delay some activity for a few hours, usually due to service outages in government, transportation, finance, and information services. However, about once per month, the news reports at least one death, injury, or threatened access to food or shelter due to software problems. Reports of these severe consequences are also increasing, due primarily to stories about transportation and government software.</Abstract>
    <Abstract_Length>147</Abstract_Length>
    <Author_Name>neeraja duriseti</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>at t</Affiliation_Name>
    <Author_Id>2224104463</Author_Id>
    <All_Authors>bryan dosono, andrew j ko, neeraja duriseti</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092690462</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>On the importance of understanding the strategies that developers use</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833322</DOI>
    <Abstract>Understanding the strategies that developers use during coding activities is an important way to identify challenges developers face and the corresponding opportunities for tools, languages, or processes to better address the challenges and more effectively support the strategies. After creating a design, evaluation studies often measure task success, time, and bugs to argue that the design improves programmer productivity. Considering the strategies that developers use while conducting these studies increases the likelihood of a successful test and makes the results easier to generalize. Therefore, we believe that identifying strategies developers use is an important goal. Beyond identifying strategies, there are also research opportunities in better understanding how developers choose strategies.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>thomas d latoza</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>168727994</Author_Id>
    <All_Authors>thomas d latoza, brad a myers</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2092690462</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>On the importance of understanding the strategies that developers use</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833322</DOI>
    <Abstract>Understanding the strategies that developers use during coding activities is an important way to identify challenges developers face and the corresponding opportunities for tools, languages, or processes to better address the challenges and more effectively support the strategies. After creating a design, evaluation studies often measure task success, time, and bugs to argue that the design improves programmer productivity. Considering the strategies that developers use while conducting these studies increases the likelihood of a successful test and makes the results easier to generalize. Therefore, we believe that identifying strategies developers use is an important goal. Beyond identifying strategies, there are also research opportunities in better understanding how developers choose strategies.</Abstract>
    <Abstract_Length>110</Abstract_Length>
    <Author_Name>brad a myers</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2117127927</Author_Id>
    <All_Authors>thomas d latoza, brad a myers</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2094029523</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Leverage human aspects in test engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593725</DOI>
    <Abstract>Since the Industrial Revolution, mankind has been striving to find simpler and easier solutions for human problems. With the evolution of computers and software, testing also came to the forefront. This whitepaper derives the context from a test organization within SAP Labs India Pvt. Ltd. Over the years, research and innovations in testing have brought in various test methodologies and tools to improve testing. Most of these innovations require development and maintenance of highly skilled test engineers. One aspect which is not probably explored enough is the utilization of diverse human intelligence is (like university students, business users, differently abled people etc.) across the ecosystem. We focus on the following 3 areas of testing where we have made positive experiences using diverse workforce     1. Regression testing 2. Automation 3. research</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>manjunath gopadi</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2225150159</Author_Id>
    <All_Authors>manjunath gopadi, thanuja anoop, kiran venkataramanappa, k madhumathi, a srividya</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2094029523</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Leverage human aspects in test engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593725</DOI>
    <Abstract>Since the Industrial Revolution, mankind has been striving to find simpler and easier solutions for human problems. With the evolution of computers and software, testing also came to the forefront. This whitepaper derives the context from a test organization within SAP Labs India Pvt. Ltd. Over the years, research and innovations in testing have brought in various test methodologies and tools to improve testing. Most of these innovations require development and maintenance of highly skilled test engineers. One aspect which is not probably explored enough is the utilization of diverse human intelligence is (like university students, business users, differently abled people etc.) across the ecosystem. We focus on the following 3 areas of testing where we have made positive experiences using diverse workforce     1. Regression testing 2. Automation 3. research</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>thanuja anoop</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2225502918</Author_Id>
    <All_Authors>manjunath gopadi, thanuja anoop, kiran venkataramanappa, k madhumathi, a srividya</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2094029523</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Leverage human aspects in test engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593725</DOI>
    <Abstract>Since the Industrial Revolution, mankind has been striving to find simpler and easier solutions for human problems. With the evolution of computers and software, testing also came to the forefront. This whitepaper derives the context from a test organization within SAP Labs India Pvt. Ltd. Over the years, research and innovations in testing have brought in various test methodologies and tools to improve testing. Most of these innovations require development and maintenance of highly skilled test engineers. One aspect which is not probably explored enough is the utilization of diverse human intelligence is (like university students, business users, differently abled people etc.) across the ecosystem. We focus on the following 3 areas of testing where we have made positive experiences using diverse workforce     1. Regression testing 2. Automation 3. research</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>kiran venkataramanappa</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2228571507</Author_Id>
    <All_Authors>manjunath gopadi, thanuja anoop, kiran venkataramanappa, k madhumathi, a srividya</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2094029523</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Leverage human aspects in test engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593725</DOI>
    <Abstract>Since the Industrial Revolution, mankind has been striving to find simpler and easier solutions for human problems. With the evolution of computers and software, testing also came to the forefront. This whitepaper derives the context from a test organization within SAP Labs India Pvt. Ltd. Over the years, research and innovations in testing have brought in various test methodologies and tools to improve testing. Most of these innovations require development and maintenance of highly skilled test engineers. One aspect which is not probably explored enough is the utilization of diverse human intelligence is (like university students, business users, differently abled people etc.) across the ecosystem. We focus on the following 3 areas of testing where we have made positive experiences using diverse workforce     1. Regression testing 2. Automation 3. research</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>k madhumathi</Author_Name>
    <Author_Position>5</Author_Position>
    <Author_Id>2485971398</Author_Id>
    <All_Authors>manjunath gopadi, thanuja anoop, kiran venkataramanappa, k madhumathi, a srividya</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2094029523</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Leverage human aspects in test engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593725</DOI>
    <Abstract>Since the Industrial Revolution, mankind has been striving to find simpler and easier solutions for human problems. With the evolution of computers and software, testing also came to the forefront. This whitepaper derives the context from a test organization within SAP Labs India Pvt. Ltd. Over the years, research and innovations in testing have brought in various test methodologies and tools to improve testing. Most of these innovations require development and maintenance of highly skilled test engineers. One aspect which is not probably explored enough is the utilization of diverse human intelligence is (like university students, business users, differently abled people etc.) across the ecosystem. We focus on the following 3 areas of testing where we have made positive experiences using diverse workforce     1. Regression testing 2. Automation 3. research</Abstract>
    <Abstract_Length>134</Abstract_Length>
    <Author_Name>a srividya</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2495617116</Author_Id>
    <All_Authors>manjunath gopadi, thanuja anoop, kiran venkataramanappa, k madhumathi, a srividya</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2095279469</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Changing dynamics of software engineering and mysterious human passion</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593723</DOI>
    <Abstract>World of Software development is facing stormy demands and volatile markets along with change in existing and adoption of new technologies, including open source. This requires extensive changes in the way software professionals work and to survive onslaught of these changing dynamics, Human Passion becomes a determinant. In this paper I have included my observations which were gained over the period of my extensive experience in IT industry. By questioning, interviewing and noticing people behavior what I have gathered is that passion plays an indispensable and critical part in driving masses to adjust and adapt to changing environments; and then successfully achieve the objectives of creation of software systems. Passionate developers are proven to be better placed as compared to their non-passionate counter parts and this understanding is not only restricted to developers but also includes project managers, product owners, architects, quality managers, testers, support personnel and all those who are associated with the software.</Abstract>
    <Abstract_Length>155</Abstract_Length>
    <Author_Name>sachin kohli</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2223041571</Author_Id>
    <All_Authors>sachin kohli</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2098010669</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>How can research about software developers generalize</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223002</DOI>
    <Abstract>Research that studies software developers can have a larger impact when its results generalize to other contexts. However, it is often unclear if, how, and why such results generalize. In this position paper, we aim to motivate software engineering researchers to generalize their findings. To meet this aim, we firstly enumerate the dimensions in which software engineering generalizations are made, and secondly, propose several practical ways researchers can make their work more generalizable. In meeting our aim, we hope to help the software engineering research community maximize their impact outside of software engineering.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>laurie willaims</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2225780838</Author_Id>
    <All_Authors>laurie willaims, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2098010669</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>How can research about software developers generalize</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223002</DOI>
    <Abstract>Research that studies software developers can have a larger impact when its results generalize to other contexts. However, it is often unclear if, how, and why such results generalize. In this position paper, we aim to motivate software engineering researchers to generalize their findings. To meet this aim, we firstly enumerate the dimensions in which software engineering generalizations are made, and secondly, propose several practical ways researchers can make their work more generalizable. In meeting our aim, we hope to help the software engineering research community maximize their impact outside of software engineering.</Abstract>
    <Abstract_Length>93</Abstract_Length>
    <Author_Name>emerson r murphyhill</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2342860276</Author_Id>
    <All_Authors>laurie willaims, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2098619173</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A study of architectural decision practices</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614735</DOI>
    <Abstract>Architectural decisions shape a software architecture and determine its ability to meet its requirements. To better understand architectural decisions in practice, we interviewed developers at two organizations. The results revealed that architectural decisions often become technology decisions, which are in turn influenced by both technical and social factors. Meetings and knowledge repositories help to communicate architectural decisions, but code reviews are ultimately necessary to ensure conformance. Costly changes to architectural decisions are caused by the discovery of an Achilles' heel, an important scenario that cannot be supported by an architectural decision. These findings suggest an important need for social development tools that help developers more easily and successfully share valuable technology knowledge and more effectively make technology choices.</Abstract>
    <Abstract_Length>118</Abstract_Length>
    <Author_Name>thomas d latoza</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>168727994</Author_Id>
    <All_Authors>thomas d latoza, andre van der hoek, evelina shabani</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2098619173</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A study of architectural decision practices</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614735</DOI>
    <Abstract>Architectural decisions shape a software architecture and determine its ability to meet its requirements. To better understand architectural decisions in practice, we interviewed developers at two organizations. The results revealed that architectural decisions often become technology decisions, which are in turn influenced by both technical and social factors. Meetings and knowledge repositories help to communicate architectural decisions, but code reviews are ultimately necessary to ensure conformance. Costly changes to architectural decisions are caused by the discovery of an Achilles' heel, an important scenario that cannot be supported by an architectural decision. These findings suggest an important need for social development tools that help developers more easily and successfully share valuable technology knowledge and more effectively make technology choices.</Abstract>
    <Abstract_Length>118</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>thomas d latoza, andre van der hoek, evelina shabani</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2098619173</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>A study of architectural decision practices</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614735</DOI>
    <Abstract>Architectural decisions shape a software architecture and determine its ability to meet its requirements. To better understand architectural decisions in practice, we interviewed developers at two organizations. The results revealed that architectural decisions often become technology decisions, which are in turn influenced by both technical and social factors. Meetings and knowledge repositories help to communicate architectural decisions, but code reviews are ultimately necessary to ensure conformance. Costly changes to architectural decisions are caused by the discovery of an Achilles' heel, an important scenario that cannot be supported by an architectural decision. These findings suggest an important need for social development tools that help developers more easily and successfully share valuable technology knowledge and more effectively make technology choices.</Abstract>
    <Abstract_Length>118</Abstract_Length>
    <Author_Name>evelina shabani</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2226828064</Author_Id>
    <All_Authors>thomas d latoza, andre van der hoek, evelina shabani</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2099314629</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Envisioning distributed usability evaluation through a virtual world platform</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223027</DOI>
    <Abstract>Ideally, usability evaluation would be part of every software development project. However, it is often overlooked due to cost and time constraints. Usability inspection methods were developed to cut cost and time compared to traditional usability evaluation. However, they still bring with them certain requirements such as having multiple designers involved in the evaluation. Inspection techniques have also been shown to be difficult to learn and teach. With software development projects becoming increasingly distributed, it is ever more difficult to have sufficient participants in a usability inspection and to collaboratively learn the techniques. Motivated by these problems, we developed a novel, prototype environment called INspect-World for distributed usability inspection techniques. INspect-World is built on top of the virtual world platform OpenSimulator. As we investigate usability inspections performed in this environment, we also address ideas of human-centered end-user development in mediated communication contexts.</Abstract>
    <Abstract_Length>142</Abstract_Length>
    <Author_Name>david f redmiles</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>311754748</Author_Id>
    <All_Authors>david f redmiles, benjamin koehne</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2099314629</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Envisioning distributed usability evaluation through a virtual world platform</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223027</DOI>
    <Abstract>Ideally, usability evaluation would be part of every software development project. However, it is often overlooked due to cost and time constraints. Usability inspection methods were developed to cut cost and time compared to traditional usability evaluation. However, they still bring with them certain requirements such as having multiple designers involved in the evaluation. Inspection techniques have also been shown to be difficult to learn and teach. With software development projects becoming increasingly distributed, it is ever more difficult to have sufficient participants in a usability inspection and to collaboratively learn the techniques. Motivated by these problems, we developed a novel, prototype environment called INspect-World for distributed usability inspection techniques. INspect-World is built on top of the virtual world platform OpenSimulator. As we investigate usability inspections performed in this environment, we also address ideas of human-centered end-user development in mediated communication contexts.</Abstract>
    <Abstract_Length>142</Abstract_Length>
    <Author_Name>benjamin koehne</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2024631954</Author_Id>
    <All_Authors>david f redmiles, benjamin koehne</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2099912421</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>16</Citations_Count>
    <Display_Name>Articulation work in small-scale offshore software development projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370120</DOI>
    <Abstract>The paper describes coordination practices of small and medium enterprises (SME) that outsourced parts of their software development to offshore vendors. Our case study in a German company shows that the geographic distribution of knowledge and expertise requires continuous informal coordination across the teams. Such practices can be described as a combination of formal coordination and informal articulation work in the sense of Anselm Strauss' theoretical framework. Both are closely interwoven and connected to the use of media such as coordination tools and instant messengers. We conclude that SME risk losing their core competencies when neglecting articulation work and hint at mismatches between scientific recommendations and actual development practices of SME.</Abstract>
    <Abstract_Length>111</Abstract_Length>
    <Author_Name>volker wulf</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>656307113</Author_Id>
    <All_Authors>volker wulf, bernhard nett, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2099912421</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>16</Citations_Count>
    <Display_Name>Articulation work in small-scale offshore software development projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370120</DOI>
    <Abstract>The paper describes coordination practices of small and medium enterprises (SME) that outsourced parts of their software development to offshore vendors. Our case study in a German company shows that the geographic distribution of knowledge and expertise requires continuous informal coordination across the teams. Such practices can be described as a combination of formal coordination and informal articulation work in the sense of Anselm Strauss' theoretical framework. Both are closely interwoven and connected to the use of media such as coordination tools and instant messengers. We conclude that SME risk losing their core competencies when neglecting articulation work and hint at mismatches between scientific recommendations and actual development practices of SME.</Abstract>
    <Abstract_Length>111</Abstract_Length>
    <Author_Name>bernhard nett</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>fraunhofer society</Affiliation_Name>
    <Author_Id>2038150845</Author_Id>
    <All_Authors>volker wulf, bernhard nett, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2099912421</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>16</Citations_Count>
    <Display_Name>Articulation work in small-scale offshore software development projects</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370120</DOI>
    <Abstract>The paper describes coordination practices of small and medium enterprises (SME) that outsourced parts of their software development to offshore vendors. Our case study in a German company shows that the geographic distribution of knowledge and expertise requires continuous informal coordination across the teams. Such practices can be described as a combination of formal coordination and informal articulation work in the sense of Anselm Strauss' theoretical framework. Both are closely interwoven and connected to the use of media such as coordination tools and instant messengers. We conclude that SME risk losing their core competencies when neglecting articulation work and hint at mismatches between scientific recommendations and actual development practices of SME.</Abstract>
    <Abstract_Length>111</Abstract_Length>
    <Author_Name>alexander boden</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2304405382</Author_Id>
    <All_Authors>volker wulf, bernhard nett, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2100323504</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Collaborative bug triaging using textual similarities and change set analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614727</DOI>
    <Abstract>Bug triaging assigns a bug report, which is also known as a work item, an issue, a task or simply a bug, to the most appropriate software developer for fixing or implementing it. However, this task is tedious, time-consuming and error-prone if not supported by effective means. Current techniques either use information retrieval and machine learning to find the most similar bugs already fixed and recommend expert developers, or they analyze change information stemming from source code to propose expert bug solvers. Neither technique combines textual similarity with change set analysis and thereby exploits the potential of the interlinking between bug reports and change sets. In this paper, we present our approach to identify potential experts by identifying similar bug reports and analyzing the associated change sets. Studies have shown that effective bug triaging is done collaboratively in a meeting, as it requires the coordination of multiple individuals, the understanding of the project context and the understanding of the specific work practices. Therefore, we implemented our approach on a multi-touch table to allow multiple stakeholders to interact simultaneously in the bug triaging and to foster their collaboration. In the current stage of our experiments we have experienced that the expert recommendations are more specific and useful when the rationale behind the expert selection is also presented to the users.</Abstract>
    <Abstract_Length>219</Abstract_Length>
    <Author_Name>katja kevic</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>45274721</Author_Id>
    <All_Authors>katja kevic, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2100323504</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Collaborative bug triaging using textual similarities and change set analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614727</DOI>
    <Abstract>Bug triaging assigns a bug report, which is also known as a work item, an issue, a task or simply a bug, to the most appropriate software developer for fixing or implementing it. However, this task is tedious, time-consuming and error-prone if not supported by effective means. Current techniques either use information retrieval and machine learning to find the most similar bugs already fixed and recommend expert developers, or they analyze change information stemming from source code to propose expert bug solvers. Neither technique combines textual similarity with change set analysis and thereby exploits the potential of the interlinking between bug reports and change sets. In this paper, we present our approach to identify potential experts by identifying similar bug reports and analyzing the associated change sets. Studies have shown that effective bug triaging is done collaboratively in a meeting, as it requires the coordination of multiple individuals, the understanding of the project context and the understanding of the specific work practices. Therefore, we implemented our approach on a multi-touch table to allow multiple stakeholders to interact simultaneously in the bug triaging and to foster their collaboration. In the current stage of our experiments we have experienced that the expert recommendations are more specific and useful when the rationale behind the expert selection is also presented to the users.</Abstract>
    <Abstract_Length>219</Abstract_Length>
    <Author_Name>thomas fritz</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2039624714</Author_Id>
    <All_Authors>katja kevic, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2100323504</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Collaborative bug triaging using textual similarities and change set analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614727</DOI>
    <Abstract>Bug triaging assigns a bug report, which is also known as a work item, an issue, a task or simply a bug, to the most appropriate software developer for fixing or implementing it. However, this task is tedious, time-consuming and error-prone if not supported by effective means. Current techniques either use information retrieval and machine learning to find the most similar bugs already fixed and recommend expert developers, or they analyze change information stemming from source code to propose expert bug solvers. Neither technique combines textual similarity with change set analysis and thereby exploits the potential of the interlinking between bug reports and change sets. In this paper, we present our approach to identify potential experts by identifying similar bug reports and analyzing the associated change sets. Studies have shown that effective bug triaging is done collaboratively in a meeting, as it requires the coordination of multiple individuals, the understanding of the project context and the understanding of the specific work practices. Therefore, we implemented our approach on a multi-touch table to allow multiple stakeholders to interact simultaneously in the bug triaging and to foster their collaboration. In the current stage of our experiments we have experienced that the expert recommendations are more specific and useful when the rationale behind the expert selection is also presented to the users.</Abstract>
    <Abstract_Length>219</Abstract_Length>
    <Author_Name>harald c gall</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2158171975</Author_Id>
    <All_Authors>katja kevic, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2100323504</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Collaborative bug triaging using textual similarities and change set analysis</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614727</DOI>
    <Abstract>Bug triaging assigns a bug report, which is also known as a work item, an issue, a task or simply a bug, to the most appropriate software developer for fixing or implementing it. However, this task is tedious, time-consuming and error-prone if not supported by effective means. Current techniques either use information retrieval and machine learning to find the most similar bugs already fixed and recommend expert developers, or they analyze change information stemming from source code to propose expert bug solvers. Neither technique combines textual similarity with change set analysis and thereby exploits the potential of the interlinking between bug reports and change sets. In this paper, we present our approach to identify potential experts by identifying similar bug reports and analyzing the associated change sets. Studies have shown that effective bug triaging is done collaboratively in a meeting, as it requires the coordination of multiple individuals, the understanding of the project context and the understanding of the specific work practices. Therefore, we implemented our approach on a multi-touch table to allow multiple stakeholders to interact simultaneously in the bug triaging and to foster their collaboration. In the current stage of our experiments we have experienced that the expert recommendations are more specific and useful when the rationale behind the expert selection is also presented to the users.</Abstract>
    <Abstract_Length>219</Abstract_Length>
    <Author_Name>sebastian c muller</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2187278534</Author_Id>
    <All_Authors>katja kevic, thomas fritz, harald c gall, sebastian c muller</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2100507340</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>31</Citations_Count>
    <Display_Name>Knowledge management in practice: The case of agile software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071412</DOI>
    <Abstract>Knowledge is considered as the main competitive asset of the organization. One of the knowledge management (KM) cornerstones is improving productivity by effective knowledge sharing and transfer. However, from the game theory perspective, the main constraint is that people tend not to collaborate in uncertainty conditions, when collaborative behavior is not guaranteed, and sharing knowledge is time- and effort-consuming. Therefore, KM must be a practical aspect of the general organizational culture. Specifically, software development is a knowledge-intensive activity and its success depends heavily on the developers' knowledge and experience. In this presentation we highlight how the agile approach initiates a culture change that is in line with the culture change needed for a KM initiative. We discuss KM enablers that are embedded in the agile software engineering approach, and illustrate how collaborating processes and knowledge transparency can weaken the dilemmas people face and lead to better knowledge extraction and sharing.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>orit hazzan</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>technion israel institute of technology</Affiliation_Name>
    <Author_Id>266418477</Author_Id>
    <All_Authors>orit hazzan, meira levy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2100507340</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>31</Citations_Count>
    <Display_Name>Knowledge management in practice: The case of agile software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071412</DOI>
    <Abstract>Knowledge is considered as the main competitive asset of the organization. One of the knowledge management (KM) cornerstones is improving productivity by effective knowledge sharing and transfer. However, from the game theory perspective, the main constraint is that people tend not to collaborate in uncertainty conditions, when collaborative behavior is not guaranteed, and sharing knowledge is time- and effort-consuming. Therefore, KM must be a practical aspect of the general organizational culture. Specifically, software development is a knowledge-intensive activity and its success depends heavily on the developers' knowledge and experience. In this presentation we highlight how the agile approach initiates a culture change that is in line with the culture change needed for a KM initiative. We discuss KM enablers that are embedded in the agile software engineering approach, and illustrate how collaborating processes and knowledge transparency can weaken the dilemmas people face and lead to better knowledge extraction and sharing.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>meira levy</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ben gurion university of the negev</Affiliation_Name>
    <Author_Id>2311641733</Author_Id>
    <All_Authors>orit hazzan, meira levy</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2101284766</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>What dynamic network metrics can tell us about developer roles</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370135</DOI>
    <Abstract>Software development is heavily dependent on the participants of the process and their roles within the process. Each developer has his specific skills and interests and hence contributes to the project in a different way. While some programmers work on separate modules, others developers integrate these modules towards the final product. To identify such different groups of people one approach is to work with methods taken from social network analysis. To this end, a social network has to be defined in a suitable way, and appropriate analysis strategies have to be chosen. This paper shows how a network of software developers could be defined based on information in a software repository, and what it can possibly tell about roles of developers (and what not) in the process of the application server Tomcat.</Abstract>
    <Abstract_Length>132</Abstract_Length>
    <Author_Name>stephan diehl</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of trier</Affiliation_Name>
    <Author_Id>2064750564</Author_Id>
    <All_Authors>stephan diehl, mathias pohl</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2101284766</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>14</Citations_Count>
    <Display_Name>What dynamic network metrics can tell us about developer roles</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370135</DOI>
    <Abstract>Software development is heavily dependent on the participants of the process and their roles within the process. Each developer has his specific skills and interests and hence contributes to the project in a different way. While some programmers work on separate modules, others developers integrate these modules towards the final product. To identify such different groups of people one approach is to work with methods taken from social network analysis. To this end, a social network has to be defined in a suitable way, and appropriate analysis strategies have to be chosen. This paper shows how a network of software developers could be defined based on information in a software repository, and what it can possibly tell about roles of developers (and what not) in the process of the application server Tomcat.</Abstract>
    <Abstract_Length>132</Abstract_Length>
    <Author_Name>mathias pohl</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of trier</Affiliation_Name>
    <Author_Id>2297507796</Author_Id>
    <All_Authors>stephan diehl, mathias pohl</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2101880321</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Audio-video recording of ad hoc software development team interactions</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071404</DOI>
    <Abstract>Ad hoc interactions characterize the natural behaviors observed in any teamwork situation. Our objective is to find out how these interactions are related to the roles team mates play. Observations on the phenomenon are based on audio-video recordings of software development team interactions occurring in a large software development organization with a highly standardized software development process in place. Detailed observations were recorded on the activities of four of the twelve members of the development team. Thirty-five hours of audio-video recordings were analyzed, in which a total of 404 face-to-face ad hoc collaborative interactions were observed. The results provided a quantitative demonstration of the impact of a newcomer, a “guru”, and a project manager on the team dynamics. This study, although conducted in a specific professional environment, can provide useful information for a better understanding of the face-to-face communication needs of a software development team.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>sebastien cherry</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>ecole polytechnique de montreal</Affiliation_Name>
    <Author_Id>2152124932</Author_Id>
    <All_Authors>sebastien cherry, pierre n robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2101880321</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Audio-video recording of ad hoc software development team interactions</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071404</DOI>
    <Abstract>Ad hoc interactions characterize the natural behaviors observed in any teamwork situation. Our objective is to find out how these interactions are related to the roles team mates play. Observations on the phenomenon are based on audio-video recordings of software development team interactions occurring in a large software development organization with a highly standardized software development process in place. Detailed observations were recorded on the activities of four of the twelve members of the development team. Thirty-five hours of audio-video recordings were analyzed, in which a total of 404 face-to-face ad hoc collaborative interactions were observed. The results provided a quantitative demonstration of the impact of a newcomer, a “guru”, and a project manager on the team dynamics. This study, although conducted in a specific professional environment, can provide useful information for a better understanding of the face-to-face communication needs of a software development team.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>pierre n robillard</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ecole polytechnique de montreal</Affiliation_Name>
    <Author_Id>2222753485</Author_Id>
    <All_Authors>sebastien cherry, pierre n robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2101893102</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Why developers don't pair more often</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223006</DOI>
    <Abstract>Applying pair programming in industrial settings can be challenging. This study extends the existing knowledge on applying pair programming in industrial settings by interviewing 31 developers from 4 different companies. We investigate how often developers practice pair programming as opposed to working by themselves, whether developers would prefer to use PP more often or less often, and which aspects hinder the use of pairing. We found that the majority of developers use PP only for 10% of their development time but would like to use it more often. Moreover, our results indicate that organisational issues can hinder the use of PP.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>janet van der linden</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2102728567</Author_Id>
    <All_Authors>janet van der linden, laura plonka</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2101893102</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Why developers don't pair more often</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223006</DOI>
    <Abstract>Applying pair programming in industrial settings can be challenging. This study extends the existing knowledge on applying pair programming in industrial settings by interviewing 31 developers from 4 different companies. We investigate how often developers practice pair programming as opposed to working by themselves, whether developers would prefer to use PP more often or less often, and which aspects hinder the use of pairing. We found that the majority of developers use PP only for 10% of their development time but would like to use it more often. Moreover, our results indicate that organisational issues can hinder the use of PP.</Abstract>
    <Abstract_Length>101</Abstract_Length>
    <Author_Name>laura plonka</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2109979916</Author_Id>
    <All_Authors>janet van der linden, laura plonka</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2102229494</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>What affects team behavior?: preliminary linguistic analysis of communications in the jazz repository</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223029</DOI>
    <Abstract>There is a growing belief that understanding and addressing the human processes employed during software development is likely to provide substantially more value to industry than yet more recommendations for the implementation of various methods and tools. To this end, considerable research effort has been dedicated to studying human issues as represented in software artifacts, due to its relatively unobtrusive nature. We have followed this line of research and have conducted a preliminary study of team behaviors using data mining techniques and linguistic analysis. Our data source, the IBM Rational Jazz repository, was mined and data from three different project areas were extracted. Communications in these projects were then analyzed using the LIWC linguistic analysis tool. We found that although there are some variations in language use among teams working on project areas dedicated to different software outcomes, project type and the mix of (and number of) individuals involved did not affect team behaviors as evident in their communications. These assessments are initial conjectures, however; we plan further exploratory analysis to validate these results. We explain these findings and discuss their implications for software engineering practice.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>stephen g macdonell</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2015981232</Author_Id>
    <All_Authors>stephen g macdonell, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2102229494</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>What affects team behavior?: preliminary linguistic analysis of communications in the jazz repository</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223029</DOI>
    <Abstract>There is a growing belief that understanding and addressing the human processes employed during software development is likely to provide substantially more value to industry than yet more recommendations for the implementation of various methods and tools. To this end, considerable research effort has been dedicated to studying human issues as represented in software artifacts, due to its relatively unobtrusive nature. We have followed this line of research and have conducted a preliminary study of team behaviors using data mining techniques and linguistic analysis. Our data source, the IBM Rational Jazz repository, was mined and data from three different project areas were extracted. Communications in these projects were then analyzed using the LIWC linguistic analysis tool. We found that although there are some variations in language use among teams working on project areas dedicated to different software outcomes, project type and the mix of (and number of) individuals involved did not affect team behaviors as evident in their communications. These assessments are initial conjectures, however; we plan further exploratory analysis to validate these results. We explain these findings and discuss their implications for software engineering practice.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>sherlock a licorish</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2305935943</Author_Id>
    <All_Authors>stephen g macdonell, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2105105997</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Identifying the need for a sustainable architecture maintenance process</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223010</DOI>
    <Abstract>Documentation plays a significant role in software development in general and in software architecture in particular. In large and complex systems, many changes affecting architecture and architectural documentation occur. This derives the need for constant changes within architecture documents in order to keep them up to date. This research in-progress aims to understand the current state of architecture maintenance towards proposing a solution for improving this practice via a well-defined process and supporting tools.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>irit hadar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>1246307506</Author_Id>
    <All_Authors>irit hadar, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2105105997</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Identifying the need for a sustainable architecture maintenance process</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223010</DOI>
    <Abstract>Documentation plays a significant role in software development in general and in software architecture in particular. In large and complex systems, many changes affecting architecture and architectural documentation occur. This derives the need for constant changes within architecture documents in order to keep them up to date. This research in-progress aims to understand the current state of architecture maintenance towards proposing a solution for improving this practice via a well-defined process and supporting tools.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>sofia sherman</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>2127504616</Author_Id>
    <All_Authors>irit hadar, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2105407546</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Meeting intensity as an indicator for project pressure: Exploring meeting profiles</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614754</DOI>
    <Abstract>Meetings are hot spots of communication and collaboration in software development teams. Both distributed and co-located teams need to meet for coordination, communication, and collaboration. It is difficult to assess the quality of these three crucial aspects, or the social effectiveness and impact of a meeting: Personalities, psychological and professional aspects interact. It is, therefore, challenging to identify emerging communication problems or to improve collaboration by studying a wealth of interrelated details of project meetings. However, it is relatively easy to count meetings, and to measure when and how long they took place. This is objective information, does not violate privacy of participants, and the data might even be retrieved from project calendars automatically. In an exploratory study, we observed 14 student teams working on comparable four-month projects. Among many other aspects, we counted and measured meetings. In this contribution, we compare the meeting profiles qualitatively, and derive a number of hypotheses relevant for software projects.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>simone kauffeld</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>715095275</Author_Id>
    <All_Authors>simone kauffeld, olga liskin, stephan kiesling, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2105407546</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Meeting intensity as an indicator for project pressure: Exploring meeting profiles</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614754</DOI>
    <Abstract>Meetings are hot spots of communication and collaboration in software development teams. Both distributed and co-located teams need to meet for coordination, communication, and collaboration. It is difficult to assess the quality of these three crucial aspects, or the social effectiveness and impact of a meeting: Personalities, psychological and professional aspects interact. It is, therefore, challenging to identify emerging communication problems or to improve collaboration by studying a wealth of interrelated details of project meetings. However, it is relatively easy to count meetings, and to measure when and how long they took place. This is objective information, does not violate privacy of participants, and the data might even be retrieved from project calendars automatically. In an exploratory study, we observed 14 student teams working on comparable four-month projects. Among many other aspects, we counted and measured meetings. In this contribution, we compare the meeting profiles qualitatively, and derive a number of hypotheses relevant for software projects.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>olga liskin</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2027096212</Author_Id>
    <All_Authors>simone kauffeld, olga liskin, stephan kiesling, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2105407546</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Meeting intensity as an indicator for project pressure: Exploring meeting profiles</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614754</DOI>
    <Abstract>Meetings are hot spots of communication and collaboration in software development teams. Both distributed and co-located teams need to meet for coordination, communication, and collaboration. It is difficult to assess the quality of these three crucial aspects, or the social effectiveness and impact of a meeting: Personalities, psychological and professional aspects interact. It is, therefore, challenging to identify emerging communication problems or to improve collaboration by studying a wealth of interrelated details of project meetings. However, it is relatively easy to count meetings, and to measure when and how long they took place. This is objective information, does not violate privacy of participants, and the data might even be retrieved from project calendars automatically. In an exploratory study, we observed 14 student teams working on comparable four-month projects. Among many other aspects, we counted and measured meetings. In this contribution, we compare the meeting profiles qualitatively, and derive a number of hypotheses relevant for software projects.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>stephan kiesling</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2104524668</Author_Id>
    <All_Authors>simone kauffeld, olga liskin, stephan kiesling, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2105407546</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Meeting intensity as an indicator for project pressure: Exploring meeting profiles</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614754</DOI>
    <Abstract>Meetings are hot spots of communication and collaboration in software development teams. Both distributed and co-located teams need to meet for coordination, communication, and collaboration. It is difficult to assess the quality of these three crucial aspects, or the social effectiveness and impact of a meeting: Personalities, psychological and professional aspects interact. It is, therefore, challenging to identify emerging communication problems or to improve collaboration by studying a wealth of interrelated details of project meetings. However, it is relatively easy to count meetings, and to measure when and how long they took place. This is objective information, does not violate privacy of participants, and the data might even be retrieved from project calendars automatically. In an exploratory study, we observed 14 student teams working on comparable four-month projects. Among many other aspects, we counted and measured meetings. In this contribution, we compare the meeting profiles qualitatively, and derive a number of hypotheses relevant for software projects.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>kurt schneider</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2181639357</Author_Id>
    <All_Authors>simone kauffeld, olga liskin, stephan kiesling, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106133082</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A qualitative study on project landscapes</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071407</DOI>
    <Abstract>When developers join a project, they find themselves in a new project landscape and must orient themselves quickly. To investigate the nature of this project landscape, and how we could help newcomers orient themselves, we have started an exploratory study using grounded theory. We primarily collect our data by interviewing experienced developers who recently joined ongoing projects. We are already seeing some patterns emerge. For example, it seems that newcomers find it more important to be able to experiment with the system early on than to have up-to-date and complete documentation.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>harold ossher</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2030408828</Author_Id>
    <All_Authors>harold ossher, rachel k e bellamy, barthelemy dagenais, jacqueline de vries, martin p robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106133082</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A qualitative study on project landscapes</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071407</DOI>
    <Abstract>When developers join a project, they find themselves in a new project landscape and must orient themselves quickly. To investigate the nature of this project landscape, and how we could help newcomers orient themselves, we have started an exploratory study using grounded theory. We primarily collect our data by interviewing experienced developers who recently joined ongoing projects. We are already seeing some patterns emerge. For example, it seems that newcomers find it more important to be able to experiment with the system early on than to have up-to-date and complete documentation.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>rachel k e bellamy</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2041687138</Author_Id>
    <All_Authors>harold ossher, rachel k e bellamy, barthelemy dagenais, jacqueline de vries, martin p robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106133082</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A qualitative study on project landscapes</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071407</DOI>
    <Abstract>When developers join a project, they find themselves in a new project landscape and must orient themselves quickly. To investigate the nature of this project landscape, and how we could help newcomers orient themselves, we have started an exploratory study using grounded theory. We primarily collect our data by interviewing experienced developers who recently joined ongoing projects. We are already seeing some patterns emerge. For example, it seems that newcomers find it more important to be able to experiment with the system early on than to have up-to-date and complete documentation.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>barthelemy dagenais</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>mcgill university</Affiliation_Name>
    <Author_Id>2047072155</Author_Id>
    <All_Authors>harold ossher, rachel k e bellamy, barthelemy dagenais, jacqueline de vries, martin p robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106133082</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A qualitative study on project landscapes</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071407</DOI>
    <Abstract>When developers join a project, they find themselves in a new project landscape and must orient themselves quickly. To investigate the nature of this project landscape, and how we could help newcomers orient themselves, we have started an exploratory study using grounded theory. We primarily collect our data by interviewing experienced developers who recently joined ongoing projects. We are already seeing some patterns emerge. For example, it seems that newcomers find it more important to be able to experiment with the system early on than to have up-to-date and complete documentation.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>jacqueline de vries</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>ibm</Affiliation_Name>
    <Author_Id>2109472217</Author_Id>
    <All_Authors>harold ossher, rachel k e bellamy, barthelemy dagenais, jacqueline de vries, martin p robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106133082</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>A qualitative study on project landscapes</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071407</DOI>
    <Abstract>When developers join a project, they find themselves in a new project landscape and must orient themselves quickly. To investigate the nature of this project landscape, and how we could help newcomers orient themselves, we have started an exploratory study using grounded theory. We primarily collect our data by interviewing experienced developers who recently joined ongoing projects. We are already seeing some patterns emerge. For example, it seems that newcomers find it more important to be able to experiment with the system early on than to have up-to-date and complete documentation.</Abstract>
    <Abstract_Length>91</Abstract_Length>
    <Author_Name>martin p robillard</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>mcgill university</Affiliation_Name>
    <Author_Id>2136878537</Author_Id>
    <All_Authors>harold ossher, rachel k e bellamy, barthelemy dagenais, jacqueline de vries, martin p robillard</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106291605</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>21</Citations_Count>
    <Display_Name>Bridging knowledge distribution - The role of knowledge brokers in distributed software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071402</DOI>
    <Abstract>Software development requires the handling of complex and context specific knowledge to be successful. Hence, efficient knowledge management (KM) counts amongst the most important challenges for any software project, but especially for small enterprises working with distributed teams. One important topic for KM in distributed teams is the role of “bridges” enacted by people who become boundary spanners and facilitate the exchange of knowledge between the sites. In our paper we present empirical findings related to such bridges in the context of two small companies with offshore sites. In doing so, we concentrate on the particular roles these knowledge brokers play in the distributed development practices. We show how small software companies rely on the commitment of particular team members and informal knowledge management practices. The paper concludes with a number of open questions to be addressed by future studies.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>gabriela avram</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of limerick</Affiliation_Name>
    <Author_Id>1644127405</Author_Id>
    <All_Authors>gabriela avram, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2106291605</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>21</Citations_Count>
    <Display_Name>Bridging knowledge distribution - The role of knowledge brokers in distributed software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071402</DOI>
    <Abstract>Software development requires the handling of complex and context specific knowledge to be successful. Hence, efficient knowledge management (KM) counts amongst the most important challenges for any software project, but especially for small enterprises working with distributed teams. One important topic for KM in distributed teams is the role of “bridges” enacted by people who become boundary spanners and facilitate the exchange of knowledge between the sites. In our paper we present empirical findings related to such bridges in the context of two small companies with offshore sites. In doing so, we concentrate on the particular roles these knowledge brokers play in the distributed development practices. We show how small software companies rely on the commitment of particular team members and informal knowledge management practices. The paper concludes with a number of open questions to be addressed by future studies.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>alexander boden</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of siegen</Affiliation_Name>
    <Author_Id>2304405382</Author_Id>
    <All_Authors>gabriela avram, alexander boden</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2107060294</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Reporting user experience through usability within the telecommunications industry</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370137</DOI>
    <Abstract>In some software development contexts, understanding 'who else' to report usability results to and how this must be done has a larger impact on the usability of products, in the long run, than reporting results to designers and developers in planned and ongoing software development projects. This situation is true in some parts of the telecommunication area. This is an area that constantly presents new usage possibilities arising from new 'hot' technology and competitive situations, i.e. not primarily from internally identified user needs. Understanding how use-oriented knowledge can have the greatest impact in this context is a challenge. As engineers we must be prepared to adjust our work to varied actors and environments under specific conditions to optimize our influence. In this case, how do the 'new hot technology and competitive situation focus' affect our possibilities to introduce use-oriented knowledge? Our desire to achieve highest leverage from performed usability work made us realize that we need to take advantage of existing usability test reporting as a first step in introducing more of user experience in the user-orientation.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>kari ronkko</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2070059870</Author_Id>
    <All_Authors>kari ronkko, jeff winter, mats hellman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2107060294</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Reporting user experience through usability within the telecommunications industry</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370137</DOI>
    <Abstract>In some software development contexts, understanding 'who else' to report usability results to and how this must be done has a larger impact on the usability of products, in the long run, than reporting results to designers and developers in planned and ongoing software development projects. This situation is true in some parts of the telecommunication area. This is an area that constantly presents new usage possibilities arising from new 'hot' technology and competitive situations, i.e. not primarily from internally identified user needs. Understanding how use-oriented knowledge can have the greatest impact in this context is a challenge. As engineers we must be prepared to adjust our work to varied actors and environments under specific conditions to optimize our influence. In this case, how do the 'new hot technology and competitive situation focus' affect our possibilities to introduce use-oriented knowledge? Our desire to achieve highest leverage from performed usability work made us realize that we need to take advantage of existing usability test reporting as a first step in introducing more of user experience in the user-orientation.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>jeff winter</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2114453931</Author_Id>
    <All_Authors>kari ronkko, jeff winter, mats hellman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2107060294</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Reporting user experience through usability within the telecommunications industry</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370137</DOI>
    <Abstract>In some software development contexts, understanding 'who else' to report usability results to and how this must be done has a larger impact on the usability of products, in the long run, than reporting results to designers and developers in planned and ongoing software development projects. This situation is true in some parts of the telecommunication area. This is an area that constantly presents new usage possibilities arising from new 'hot' technology and competitive situations, i.e. not primarily from internally identified user needs. Understanding how use-oriented knowledge can have the greatest impact in this context is a challenge. As engineers we must be prepared to adjust our work to varied actors and environments under specific conditions to optimize our influence. In this case, how do the 'new hot technology and competitive situation focus' affect our possibilities to introduce use-oriented knowledge? Our desire to achieve highest leverage from performed usability work made us realize that we need to take advantage of existing usability test reporting as a first step in introducing more of user experience in the user-orientation.</Abstract>
    <Abstract_Length>177</Abstract_Length>
    <Author_Name>mats hellman</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2141218191</Author_Id>
    <All_Authors>kari ronkko, jeff winter, mats hellman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108018749</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Tangible software modeling with multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223001</DOI>
    <Abstract>This paper describes a design study that explores how multi-touch devices can provide support for developers when carrying out modeling tasks in software development. We investigate how well a multi-touch augmented approach performs compared to a traditional approach and if this new approach can be integrated into existing software engineering processes. For that, we have implemented a fully-functional prototype, which is concerned with agreeing on a good object-oriented design through the course of a  Class Responsibility Collaboration  (CRC) modeling session. We describe how multi-touch technology helps with integrating CRC cards with larger design methodologies, without loosing their unique physical interaction aspect. We observed high-potential in augmenting such informal sessions in software engineering with novel user interfaces, such as those provided by multi-touch devices.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>michael wursch</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>1967413752</Author_Id>
    <All_Authors>michael wursch, giacomo ghezzi, emanuel giger, harald c gall, sebastian c muller, pascal schoni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108018749</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Tangible software modeling with multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223001</DOI>
    <Abstract>This paper describes a design study that explores how multi-touch devices can provide support for developers when carrying out modeling tasks in software development. We investigate how well a multi-touch augmented approach performs compared to a traditional approach and if this new approach can be integrated into existing software engineering processes. For that, we have implemented a fully-functional prototype, which is concerned with agreeing on a good object-oriented design through the course of a  Class Responsibility Collaboration  (CRC) modeling session. We describe how multi-touch technology helps with integrating CRC cards with larger design methodologies, without loosing their unique physical interaction aspect. We observed high-potential in augmenting such informal sessions in software engineering with novel user interfaces, such as those provided by multi-touch devices.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>giacomo ghezzi</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2059116063</Author_Id>
    <All_Authors>michael wursch, giacomo ghezzi, emanuel giger, harald c gall, sebastian c muller, pascal schoni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108018749</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Tangible software modeling with multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223001</DOI>
    <Abstract>This paper describes a design study that explores how multi-touch devices can provide support for developers when carrying out modeling tasks in software development. We investigate how well a multi-touch augmented approach performs compared to a traditional approach and if this new approach can be integrated into existing software engineering processes. For that, we have implemented a fully-functional prototype, which is concerned with agreeing on a good object-oriented design through the course of a  Class Responsibility Collaboration  (CRC) modeling session. We describe how multi-touch technology helps with integrating CRC cards with larger design methodologies, without loosing their unique physical interaction aspect. We observed high-potential in augmenting such informal sessions in software engineering with novel user interfaces, such as those provided by multi-touch devices.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>emanuel giger</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2096448222</Author_Id>
    <All_Authors>michael wursch, giacomo ghezzi, emanuel giger, harald c gall, sebastian c muller, pascal schoni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108018749</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Tangible software modeling with multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223001</DOI>
    <Abstract>This paper describes a design study that explores how multi-touch devices can provide support for developers when carrying out modeling tasks in software development. We investigate how well a multi-touch augmented approach performs compared to a traditional approach and if this new approach can be integrated into existing software engineering processes. For that, we have implemented a fully-functional prototype, which is concerned with agreeing on a good object-oriented design through the course of a  Class Responsibility Collaboration  (CRC) modeling session. We describe how multi-touch technology helps with integrating CRC cards with larger design methodologies, without loosing their unique physical interaction aspect. We observed high-potential in augmenting such informal sessions in software engineering with novel user interfaces, such as those provided by multi-touch devices.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>harald c gall</Author_Name>
    <Author_Position>6</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2158171975</Author_Id>
    <All_Authors>michael wursch, giacomo ghezzi, emanuel giger, harald c gall, sebastian c muller, pascal schoni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108018749</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Tangible software modeling with multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223001</DOI>
    <Abstract>This paper describes a design study that explores how multi-touch devices can provide support for developers when carrying out modeling tasks in software development. We investigate how well a multi-touch augmented approach performs compared to a traditional approach and if this new approach can be integrated into existing software engineering processes. For that, we have implemented a fully-functional prototype, which is concerned with agreeing on a good object-oriented design through the course of a  Class Responsibility Collaboration  (CRC) modeling session. We describe how multi-touch technology helps with integrating CRC cards with larger design methodologies, without loosing their unique physical interaction aspect. We observed high-potential in augmenting such informal sessions in software engineering with novel user interfaces, such as those provided by multi-touch devices.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>sebastian c muller</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2187278534</Author_Id>
    <All_Authors>michael wursch, giacomo ghezzi, emanuel giger, harald c gall, sebastian c muller, pascal schoni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108018749</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Tangible software modeling with multi-touch technology</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223001</DOI>
    <Abstract>This paper describes a design study that explores how multi-touch devices can provide support for developers when carrying out modeling tasks in software development. We investigate how well a multi-touch augmented approach performs compared to a traditional approach and if this new approach can be integrated into existing software engineering processes. For that, we have implemented a fully-functional prototype, which is concerned with agreeing on a good object-oriented design through the course of a  Class Responsibility Collaboration  (CRC) modeling session. We describe how multi-touch technology helps with integrating CRC cards with larger design methodologies, without loosing their unique physical interaction aspect. We observed high-potential in augmenting such informal sessions in software engineering with novel user interfaces, such as those provided by multi-touch devices.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>pascal schoni</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of zurich</Affiliation_Name>
    <Author_Id>2222314046</Author_Id>
    <All_Authors>michael wursch, giacomo ghezzi, emanuel giger, harald c gall, sebastian c muller, pascal schoni</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108167245</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Representations of user feedback in an agile, collocated software team</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223028</DOI>
    <Abstract>Support requests are a major source of feedback in software development. However, like sentences whispered in a children's telephone game, as an issue moves through a software development process, it may undergo many changes, making it difficult to ensure that the problem reported was actually fixed. To better understand how software teams preserve the integrity of user-reported issues, we observed a software team over a 6-month period, analyzing the trajectory of user requests through their software development processes. Our observations revealed several representations of issues, highlighting several points where information about an issue was lost or transformed. Although this information loss appeared to be unavoidable as an issue went through the resolution process, we found it was offset by a web of transactive memory distributed throughout the support and product teams. This memory was reinforced by asynchronous chat about recent and commonly reported issues, and shared notions of what issues should be considered severe or urgent.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>michael j lee</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>information school</Affiliation_Name>
    <Author_Id>2118915928</Author_Id>
    <All_Authors>michael j lee, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108167245</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Representations of user feedback in an agile, collocated software team</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223028</DOI>
    <Abstract>Support requests are a major source of feedback in software development. However, like sentences whispered in a children's telephone game, as an issue moves through a software development process, it may undergo many changes, making it difficult to ensure that the problem reported was actually fixed. To better understand how software teams preserve the integrity of user-reported issues, we observed a software team over a 6-month period, analyzing the trajectory of user requests through their software development processes. Our observations revealed several representations of issues, highlighting several points where information about an issue was lost or transformed. Although this information loss appeared to be unavoidable as an issue went through the resolution process, we found it was offset by a web of transactive memory distributed throughout the support and product teams. This memory was reinforced by asynchronous chat about recent and commonly reported issues, and shared notions of what issues should be considered severe or urgent.</Abstract>
    <Abstract_Length>156</Abstract_Length>
    <Author_Name>andrew j ko</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>information school</Affiliation_Name>
    <Author_Id>2147219881</Author_Id>
    <All_Authors>michael j lee, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108213362</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Automatically identifying that distributed programmers are stuck</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071403</DOI>
    <Abstract>We hypothesize that it is useful and possible to automatically identify that distributed programmers are stuck by extending existing software development environments using a general architecture.</Abstract>
    <Abstract_Length>26</Abstract_Length>
    <Author_Name>prasun dewan</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of north carolina at chapel hill</Affiliation_Name>
    <Author_Id>2159107207</Author_Id>
    <All_Authors>prasun dewan, jason carter</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2108213362</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Automatically identifying that distributed programmers are stuck</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071403</DOI>
    <Abstract>We hypothesize that it is useful and possible to automatically identify that distributed programmers are stuck by extending existing software development environments using a general architecture.</Abstract>
    <Abstract_Length>26</Abstract_Length>
    <Author_Name>jason carter</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of north carolina at chapel hill</Affiliation_Name>
    <Author_Id>2234011563</Author_Id>
    <All_Authors>prasun dewan, jason carter</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2111598217</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Benefits of interactive display environments in the software development process</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370128</DOI>
    <Abstract>Models become increasingly important for software development processes. Though there is a multitude of software modeling tools available, the handling of diagrams is still difficult. To overcome these problems we propose the usage of novel visualization and interaction techniques for the software development process, including multi-touch displays, the integration of diagrams drawn by hand and the interaction through zoomable user interfaces.</Abstract>
    <Abstract_Length>61</Abstract_Length>
    <Author_Name>raimund dachselt</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>123419233</Author_Id>
    <All_Authors>raimund dachselt, mathias frisch</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2111598217</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Benefits of interactive display environments in the software development process</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370128</DOI>
    <Abstract>Models become increasingly important for software development processes. Though there is a multitude of software modeling tools available, the handling of diagrams is still difficult. To overcome these problems we propose the usage of novel visualization and interaction techniques for the software development process, including multi-touch displays, the integration of diagrams drawn by hand and the interaction through zoomable user interfaces.</Abstract>
    <Abstract_Length>61</Abstract_Length>
    <Author_Name>mathias frisch</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2101900924</Author_Id>
    <All_Authors>raimund dachselt, mathias frisch</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2114747891</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Collaborative process management and virtual teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370125</DOI>
    <Abstract>This position paper describes the requirements for facing essential problems of virtual teams. Further, the current deficits of project management tools and collaborative tools are focused. We will describe our opinions on how to solve these problems.   In general, we see an essential necessity in creating a symbiosis between project management tools and collaborative tools, as these two areas are both crucial for virtual project management. Currently, the lack of connection between them significantly decreases the quality of virtual work. Our ideas show new ways of managing virtual work in order to increase the effectiveness of virtual teams and help companies to get their work done over the distance of time and space.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>hilko donker</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>dresden university of technology</Affiliation_Name>
    <Author_Id>2129272394</Author_Id>
    <All_Authors>hilko donker, malte blumberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2114747891</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Collaborative process management and virtual teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370125</DOI>
    <Abstract>This position paper describes the requirements for facing essential problems of virtual teams. Further, the current deficits of project management tools and collaborative tools are focused. We will describe our opinions on how to solve these problems.   In general, we see an essential necessity in creating a symbiosis between project management tools and collaborative tools, as these two areas are both crucial for virtual project management. Currently, the lack of connection between them significantly decreases the quality of virtual work. Our ideas show new ways of managing virtual work in order to increase the effectiveness of virtual teams and help companies to get their work done over the distance of time and space.</Abstract>
    <Abstract_Length>115</Abstract_Length>
    <Author_Name>malte blumberg</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>dresden university of technology</Affiliation_Name>
    <Author_Id>2302788066</Author_Id>
    <All_Authors>hilko donker, malte blumberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2117029779</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Supporting agile team composition: A prototype tool for identifying personality (In)compatibilities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071413</DOI>
    <Abstract>Extensive work in the behavioral sciences tells us that team composition is a complex activity in many disciplines, given the variations inherent across individuals' personalities. The composition of teams to undertake software development is subject to this same complexity. Furthermore, the building of a team to undertake agile software development may be particularly challenging, given the inclusive yet fluid nature of teams in this context. We describe here the development and preliminary evaluation of a prototype tool intended to assist software engineers and project managers in forming agile teams, utilizing information concerning members' personalities as input to this process. Initial assessment of the tool's capabilities by agile development practitioners suggests that it would be of value in supporting the team composition activity in real projects.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>stephen g macdonell</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2015981232</Author_Id>
    <All_Authors>stephen g macdonell, anne philpott, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2117029779</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Supporting agile team composition: A prototype tool for identifying personality (In)compatibilities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071413</DOI>
    <Abstract>Extensive work in the behavioral sciences tells us that team composition is a complex activity in many disciplines, given the variations inherent across individuals' personalities. The composition of teams to undertake software development is subject to this same complexity. Furthermore, the building of a team to undertake agile software development may be particularly challenging, given the inclusive yet fluid nature of teams in this context. We describe here the development and preliminary evaluation of a prototype tool intended to assist software engineers and project managers in forming agile teams, utilizing information concerning members' personalities as input to this process. Initial assessment of the tool's capabilities by agile development practitioners suggests that it would be of value in supporting the team composition activity in real projects.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>anne philpott</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2163409437</Author_Id>
    <All_Authors>stephen g macdonell, anne philpott, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2117029779</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Supporting agile team composition: A prototype tool for identifying personality (In)compatibilities</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071413</DOI>
    <Abstract>Extensive work in the behavioral sciences tells us that team composition is a complex activity in many disciplines, given the variations inherent across individuals' personalities. The composition of teams to undertake software development is subject to this same complexity. Furthermore, the building of a team to undertake agile software development may be particularly challenging, given the inclusive yet fluid nature of teams in this context. We describe here the development and preliminary evaluation of a prototype tool intended to assist software engineers and project managers in forming agile teams, utilizing information concerning members' personalities as input to this process. Initial assessment of the tool's capabilities by agile development practitioners suggests that it would be of value in supporting the team composition activity in real projects.</Abstract>
    <Abstract_Length>125</Abstract_Length>
    <Author_Name>sherlock a licorish</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>auckland university of technology</Affiliation_Name>
    <Author_Id>2305935943</Author_Id>
    <All_Authors>stephen g macdonell, anne philpott, sherlock a licorish</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2120089691</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>36</Citations_Count>
    <Display_Name>Collabode: collaborative coding in the browser</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984658</DOI>
    <Abstract>Collaborating programmers should use a development environment designed specifically for collaboration, not the same one designed for solo programmers with a few collaborative processes and tools tacked on. This paper describes  Collabode , a web-based Java integrated development environment built to support close, synchronous collaboration between programmers. We discuss three collaboration models in which participants take on distinct roles:  micro-outsourcing  to combine small contributions from many assistants;  test-driven pair programming  for effective pairwise development; and a  mobile instructor  connected to the work of many students. In particular, we report very promising preliminary results using Collabode to support micro-outsourcing.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>robert c miller</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2104582966</Author_Id>
    <All_Authors>robert c miller, max goldman, greg little</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2120089691</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>36</Citations_Count>
    <Display_Name>Collabode: collaborative coding in the browser</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984658</DOI>
    <Abstract>Collaborating programmers should use a development environment designed specifically for collaboration, not the same one designed for solo programmers with a few collaborative processes and tools tacked on. This paper describes  Collabode , a web-based Java integrated development environment built to support close, synchronous collaboration between programmers. We discuss three collaboration models in which participants take on distinct roles:  micro-outsourcing  to combine small contributions from many assistants;  test-driven pair programming  for effective pairwise development; and a  mobile instructor  connected to the work of many students. In particular, we report very promising preliminary results using Collabode to support micro-outsourcing.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>max goldman</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2106696903</Author_Id>
    <All_Authors>robert c miller, max goldman, greg little</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2120089691</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>36</Citations_Count>
    <Display_Name>Collabode: collaborative coding in the browser</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984658</DOI>
    <Abstract>Collaborating programmers should use a development environment designed specifically for collaboration, not the same one designed for solo programmers with a few collaborative processes and tools tacked on. This paper describes  Collabode , a web-based Java integrated development environment built to support close, synchronous collaboration between programmers. We discuss three collaboration models in which participants take on distinct roles:  micro-outsourcing  to combine small contributions from many assistants;  test-driven pair programming  for effective pairwise development; and a  mobile instructor  connected to the work of many students. In particular, we report very promising preliminary results using Collabode to support micro-outsourcing.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>greg little</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2156768364</Author_Id>
    <All_Authors>robert c miller, max goldman, greg little</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2122676969</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>22</Citations_Count>
    <Display_Name>Why do newcomers abandon open source software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614728</DOI>
    <Abstract>Open source software projects, are based on volunteers collaboration and require a continuous influx of newcomers for their continuity. Newcomers face difficulties and obstacles when starting their contributions, resulting in a low retention rate. This paper presents an analysis of the first interactions of newcomers on a project, checking if the dropout may have been influenced by lack of answer, answers politeness and helpfulness, and the answer author. We have collected five years data from the developers' mailing list communication and issue manager (Jira) discussions of the Hadoop Common project. We observed developers' communication, identifying newcomers and classifying questions and answers content. In the analyzed period, less than 20% of newcomers became long-term contributors. There are evidences that the newcomers decision to abandon the project was influenced by the authors of the answers and by the type of answer received. However, the lack of answer was not evidenced as a factor that influences newcomers' decision to remain or abandon the project.</Abstract>
    <Abstract_Length>161</Abstract_Length>
    <Author_Name>marco aurelio gerosa</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of sao paulo</Affiliation_Name>
    <Author_Id>1928846911</Author_Id>
    <All_Authors>marco aurelio gerosa, igor steinmacher, ana paula chaves, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2122676969</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>22</Citations_Count>
    <Display_Name>Why do newcomers abandon open source software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614728</DOI>
    <Abstract>Open source software projects, are based on volunteers collaboration and require a continuous influx of newcomers for their continuity. Newcomers face difficulties and obstacles when starting their contributions, resulting in a low retention rate. This paper presents an analysis of the first interactions of newcomers on a project, checking if the dropout may have been influenced by lack of answer, answers politeness and helpfulness, and the answer author. We have collected five years data from the developers' mailing list communication and issue manager (Jira) discussions of the Hadoop Common project. We observed developers' communication, identifying newcomers and classifying questions and answers content. In the analyzed period, less than 20% of newcomers became long-term contributors. There are evidences that the newcomers decision to abandon the project was influenced by the authors of the answers and by the type of answer received. However, the lack of answer was not evidenced as a factor that influences newcomers' decision to remain or abandon the project.</Abstract>
    <Abstract_Length>161</Abstract_Length>
    <Author_Name>igor steinmacher</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2000400706</Author_Id>
    <All_Authors>marco aurelio gerosa, igor steinmacher, ana paula chaves, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2122676969</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>22</Citations_Count>
    <Display_Name>Why do newcomers abandon open source software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614728</DOI>
    <Abstract>Open source software projects, are based on volunteers collaboration and require a continuous influx of newcomers for their continuity. Newcomers face difficulties and obstacles when starting their contributions, resulting in a low retention rate. This paper presents an analysis of the first interactions of newcomers on a project, checking if the dropout may have been influenced by lack of answer, answers politeness and helpfulness, and the answer author. We have collected five years data from the developers' mailing list communication and issue manager (Jira) discussions of the Hadoop Common project. We observed developers' communication, identifying newcomers and classifying questions and answers content. In the analyzed period, less than 20% of newcomers became long-term contributors. There are evidences that the newcomers decision to abandon the project was influenced by the authors of the answers and by the type of answer received. However, the lack of answer was not evidenced as a factor that influences newcomers' decision to remain or abandon the project.</Abstract>
    <Abstract_Length>161</Abstract_Length>
    <Author_Name>ana paula chaves</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2158079523</Author_Id>
    <All_Authors>marco aurelio gerosa, igor steinmacher, ana paula chaves, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2122676969</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>22</Citations_Count>
    <Display_Name>Why do newcomers abandon open source software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614728</DOI>
    <Abstract>Open source software projects, are based on volunteers collaboration and require a continuous influx of newcomers for their continuity. Newcomers face difficulties and obstacles when starting their contributions, resulting in a low retention rate. This paper presents an analysis of the first interactions of newcomers on a project, checking if the dropout may have been influenced by lack of answer, answers politeness and helpfulness, and the answer author. We have collected five years data from the developers' mailing list communication and issue manager (Jira) discussions of the Hadoop Common project. We observed developers' communication, identifying newcomers and classifying questions and answers content. In the analyzed period, less than 20% of newcomers became long-term contributors. There are evidences that the newcomers decision to abandon the project was influenced by the authors of the answers and by the type of answer received. However, the lack of answer was not evidenced as a factor that influences newcomers' decision to remain or abandon the project.</Abstract>
    <Abstract_Length>161</Abstract_Length>
    <Author_Name>igor scaliante wiese</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2169717386</Author_Id>
    <All_Authors>marco aurelio gerosa, igor steinmacher, ana paula chaves, igor scaliante wiese</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2123230287</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>CASI: preventing indirect conflicts through a live visualization</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833317</DOI>
    <Abstract>Software development is a collaborative activity that may lead to conflicts when changes are performed in parallel by several developers. Direct conflicts arise when multiple developers make changes in the same source code entity, and indirect conflicts are produced when multiple developers make changes to source code entities that depend on each other. Previous approaches of code analysis either cannot predict all kinds of indirect conflicts, since they can be caused by syntactic or semantic changes, or they produce so much information as to make them virtually useless. Workspace awareness techniques have been proposed to enhance software configuration management systems by providing developers with information about the activity that is being performed by other developers. Most workspace awareness tools detect direct conflicts while only some of them warn about potential indirect conflicts. We propose a new approach to the problem of indirect conflicts. Our tool CASI informs developers of the changes that are taking place in a software project and the source code entities influenced by them. We visualize this influence together with directionality and severity information to help developers decide whether a concrete situation represents an indirect conflict. We introduce our approach, explain its implementation, discuss its behavior on an example, and lay out several steps that we will be taking to improve it in the future.</Abstract>
    <Abstract_Length>218</Abstract_Length>
    <Author_Name>james a jones</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2129459225</Author_Id>
    <All_Authors>james a jones, andre van der hoek, francisco servant</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2123230287</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>CASI: preventing indirect conflicts through a live visualization</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833317</DOI>
    <Abstract>Software development is a collaborative activity that may lead to conflicts when changes are performed in parallel by several developers. Direct conflicts arise when multiple developers make changes in the same source code entity, and indirect conflicts are produced when multiple developers make changes to source code entities that depend on each other. Previous approaches of code analysis either cannot predict all kinds of indirect conflicts, since they can be caused by syntactic or semantic changes, or they produce so much information as to make them virtually useless. Workspace awareness techniques have been proposed to enhance software configuration management systems by providing developers with information about the activity that is being performed by other developers. Most workspace awareness tools detect direct conflicts while only some of them warn about potential indirect conflicts. We propose a new approach to the problem of indirect conflicts. Our tool CASI informs developers of the changes that are taking place in a software project and the source code entities influenced by them. We visualize this influence together with directionality and severity information to help developers decide whether a concrete situation represents an indirect conflict. We introduce our approach, explain its implementation, discuss its behavior on an example, and lay out several steps that we will be taking to improve it in the future.</Abstract>
    <Abstract_Length>218</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>james a jones, andre van der hoek, francisco servant</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2123230287</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>CASI: preventing indirect conflicts through a live visualization</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833317</DOI>
    <Abstract>Software development is a collaborative activity that may lead to conflicts when changes are performed in parallel by several developers. Direct conflicts arise when multiple developers make changes in the same source code entity, and indirect conflicts are produced when multiple developers make changes to source code entities that depend on each other. Previous approaches of code analysis either cannot predict all kinds of indirect conflicts, since they can be caused by syntactic or semantic changes, or they produce so much information as to make them virtually useless. Workspace awareness techniques have been proposed to enhance software configuration management systems by providing developers with information about the activity that is being performed by other developers. Most workspace awareness tools detect direct conflicts while only some of them warn about potential indirect conflicts. We propose a new approach to the problem of indirect conflicts. Our tool CASI informs developers of the changes that are taking place in a software project and the source code entities influenced by them. We visualize this influence together with directionality and severity information to help developers decide whether a concrete situation represents an indirect conflict. We introduce our approach, explain its implementation, discuss its behavior on an example, and lay out several steps that we will be taking to improve it in the future.</Abstract>
    <Abstract_Length>218</Abstract_Length>
    <Author_Name>francisco servant</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2222066022</Author_Id>
    <All_Authors>james a jones, andre van der hoek, francisco servant</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2125146799</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>33</Citations_Count>
    <Display_Name>Why are software projects moving from centralized to decentralized version control systems</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071408</DOI>
    <Abstract>Version control systems are essential for co-ordinating work on a software project. A number of open- and closed-source projects are proposing to move, or have already moved, their source code repositories from a centralized version control system (CVCS) to a decentralized version control system (DVCS). In this paper we summarize the differences between a CVCS and a DVCS, and describe some of the rationales and perceived benefits offered by projects to justify the transition.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>jonathan sillito</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>1801224773</Author_Id>
    <All_Authors>jonathan sillito, brian de alwis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2125146799</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>33</Citations_Count>
    <Display_Name>Why are software projects moving from centralized to decentralized version control systems</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071408</DOI>
    <Abstract>Version control systems are essential for co-ordinating work on a software project. A number of open- and closed-source projects are proposing to move, or have already moved, their source code repositories from a centralized version control system (CVCS) to a decentralized version control system (DVCS). In this paper we summarize the differences between a CVCS and a DVCS, and describe some of the rationales and perceived benefits offered by projects to justify the transition.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>brian de alwis</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of saskatchewan</Affiliation_Name>
    <Author_Id>2307771974</Author_Id>
    <All_Authors>jonathan sillito, brian de alwis</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2127375004</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>On the development of a theoretical model of the impact of trust in the performance of distributed software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614740</DOI>
    <Abstract>Trust is often defined as the belief that the trustee will meet the positive expectations of the trustor. Although several studies have discussed the topic, little is still known about the impact of trust (or lack of it) in the performance of distributed software projects. In this paper we present initial findings of an empirically informed study that aimed to identify which factors influence positively or negatively one's perceived trustworthiness of others in the project and the impact of such factors on specific project performance measures. Availability, competence, expertise, face-to-face communication, and leadership are among the factors considered to positively influence the development of trust and the consequent achievement of performance metrics. This is a first step on a larger investigation aiming to develop a theoretical model of the impact of trust in the performance of distributed software projects. Such a model can be used by researchers as a reference framework to further investigate the topic and by practitioners to better manage and organize distributed software teams.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>sabrina marczak</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>pontificia universidade catolica do rio grande do sul</Affiliation_Name>
    <Author_Id>2206271674</Author_Id>
    <All_Authors>sabrina marczak, vanessa gomes</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2127375004</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>On the development of a theoretical model of the impact of trust in the performance of distributed software projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614740</DOI>
    <Abstract>Trust is often defined as the belief that the trustee will meet the positive expectations of the trustor. Although several studies have discussed the topic, little is still known about the impact of trust (or lack of it) in the performance of distributed software projects. In this paper we present initial findings of an empirically informed study that aimed to identify which factors influence positively or negatively one's perceived trustworthiness of others in the project and the impact of such factors on specific project performance measures. Availability, competence, expertise, face-to-face communication, and leadership are among the factors considered to positively influence the development of trust and the consequent achievement of performance metrics. This is a first step on a larger investigation aiming to develop a theoretical model of the impact of trust in the performance of distributed software projects. Such a model can be used by researchers as a reference framework to further investigate the topic and by practitioners to better manage and organize distributed software teams.</Abstract>
    <Abstract_Length>167</Abstract_Length>
    <Author_Name>vanessa gomes</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>pontificia universidade catolica do rio grande do sul</Affiliation_Name>
    <Author_Id>2230497896</Author_Id>
    <All_Authors>sabrina marczak, vanessa gomes</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2127522296</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>QUASE - A quantitative approach to analyze the human aspects of software development projects</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071415</DOI>
    <Abstract>A manager's most important and most difficult job is to manage people. If software is created by people, the human side of software development is crucial to the success of a project. In this position paper, we argue that a quantitative approach to analyze the human aspects of software development may contribute to a better understanding of different expectations and a better management of people and projects.</Abstract>
    <Abstract_Length>67</Abstract_Length>
    <Author_Name>rafael prikladnicki</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>pontificia universidade catolica do rio grande do sul</Affiliation_Name>
    <Author_Id>35778973</Author_Id>
    <All_Authors>rafael prikladnicki</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2127806924</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>The work of software development as an assemblage of computational practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071419</DOI>
    <Abstract>Science and technology studies (STS) is a discipline concerned with examining how social and technological worlds shape each other. In this paper, we argue that STS can be used to study the work of software development as a complex, interacting system of people, organizations, culture, practices, and technology, or in STS terms, an assemblage. We illustrate the application of these ideas to the work of software development, where STS theory directs us towards examining at human-human relations, human-machine relations, and machine-machine relations. We conclude by discussing some of the challenges of applying STS in empirical software engineering.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>marisa leavitt cohn</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2074081434</Author_Id>
    <All_Authors>marisa leavitt cohn, susan elliott sim, kavita philip</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2127806924</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>The work of software development as an assemblage of computational practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071419</DOI>
    <Abstract>Science and technology studies (STS) is a discipline concerned with examining how social and technological worlds shape each other. In this paper, we argue that STS can be used to study the work of software development as a complex, interacting system of people, organizations, culture, practices, and technology, or in STS terms, an assemblage. We illustrate the application of these ideas to the work of software development, where STS theory directs us towards examining at human-human relations, human-machine relations, and machine-machine relations. We conclude by discussing some of the challenges of applying STS in empirical software engineering.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>susan elliott sim</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2115947631</Author_Id>
    <All_Authors>marisa leavitt cohn, susan elliott sim, kavita philip</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2127806924</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>The work of software development as an assemblage of computational practice</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071419</DOI>
    <Abstract>Science and technology studies (STS) is a discipline concerned with examining how social and technological worlds shape each other. In this paper, we argue that STS can be used to study the work of software development as a complex, interacting system of people, organizations, culture, practices, and technology, or in STS terms, an assemblage. We illustrate the application of these ideas to the work of software development, where STS theory directs us towards examining at human-human relations, human-machine relations, and machine-machine relations. We conclude by discussing some of the challenges of applying STS in empirical software engineering.</Abstract>
    <Abstract_Length>97</Abstract_Length>
    <Author_Name>kavita philip</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2313953452</Author_Id>
    <All_Authors>marisa leavitt cohn, susan elliott sim, kavita philip</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2129424428</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Agile vs. plan-driven perceptions of software architecture</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223022</DOI>
    <Abstract>The use of agile methodologies in industry has increased significantly over the past decade, promoting the value of human-centric software development process. This growing use derives the need to adjust agile methodologies to bigger, more complex system development projects, where architecture plays a significant role. However, many believe that an essential conflict exists between the requirement of minimalism in agile methods and the need for well-defined and documented architecture in complex systems. This paper presents an exploratory study aimed at understanding the software architecture related activities as perceived by architects with and without experience in agile methodologies. The findings indicate that while architects practicing only plan-driven methodologies perceive architecture activities as being related only to the first phases of the development process, architects involved in agile projects perceive architecture activities to be related to most or all phases of the development lifecycle. The latter perceptions are consistent with suggestions expressed in the literature regarding architecture in general and in agile methodologies in particular. Based on these findings we suggest that agile methods not only lead architects to adjust their behavior to the agile philosophy, but also improve architects' perceptions and practice of architecture in general.</Abstract>
    <Abstract_Length>195</Abstract_Length>
    <Author_Name>irit hadar</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>1246307506</Author_Id>
    <All_Authors>irit hadar, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2129424428</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>Agile vs. plan-driven perceptions of software architecture</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223022</DOI>
    <Abstract>The use of agile methodologies in industry has increased significantly over the past decade, promoting the value of human-centric software development process. This growing use derives the need to adjust agile methodologies to bigger, more complex system development projects, where architecture plays a significant role. However, many believe that an essential conflict exists between the requirement of minimalism in agile methods and the need for well-defined and documented architecture in complex systems. This paper presents an exploratory study aimed at understanding the software architecture related activities as perceived by architects with and without experience in agile methodologies. The findings indicate that while architects practicing only plan-driven methodologies perceive architecture activities as being related only to the first phases of the development process, architects involved in agile projects perceive architecture activities to be related to most or all phases of the development lifecycle. The latter perceptions are consistent with suggestions expressed in the literature regarding architecture in general and in agile methodologies in particular. Based on these findings we suggest that agile methods not only lead architects to adjust their behavior to the agile philosophy, but also improve architects' perceptions and practice of architecture in general.</Abstract>
    <Abstract_Length>195</Abstract_Length>
    <Author_Name>sofia sherman</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>2127504616</Author_Id>
    <All_Authors>irit hadar, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2130424541</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Writing and Reading Software Documentation: How the development process may affect understanding</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071409</DOI>
    <Abstract>The effectiveness of documentationwithin a development process is determined by the way in which the intentions of the authors correspond to the expectations of the potential readers. Ideally, the members of a development team share a certain understanding of (the role of) the different types of documentation. However, since one's expectations of a document are personal, and part of a tacitly formed mental model, we can expect different levels of shared understanding between different development team members. We elicited and analyzed the mental models of software documentation from eight members of a single development team. We found indeed different levels of shared understanding between different people. To our surprise, the levels of shared understanding within the team appear closely tied to the development process employed. From Conway's law we know that an organization's structure is mirrored in the structure of the software that the organization produces. Our findings suggest that the organization's development process may likewise be mirrored in the extent to which a development team shares a common frame of reference. Hence, the development process followed may have implications for the effectiveness with which development knowledge can be shared through software documentation.</Abstract>
    <Abstract_Length>193</Abstract_Length>
    <Author_Name>hans van vliet</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>vu university amsterdam</Affiliation_Name>
    <Author_Id>2105014955</Author_Id>
    <All_Authors>hans van vliet, remco c de boer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2130424541</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>12</Citations_Count>
    <Display_Name>Writing and Reading Software Documentation: How the development process may affect understanding</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071409</DOI>
    <Abstract>The effectiveness of documentationwithin a development process is determined by the way in which the intentions of the authors correspond to the expectations of the potential readers. Ideally, the members of a development team share a certain understanding of (the role of) the different types of documentation. However, since one's expectations of a document are personal, and part of a tacitly formed mental model, we can expect different levels of shared understanding between different development team members. We elicited and analyzed the mental models of software documentation from eight members of a single development team. We found indeed different levels of shared understanding between different people. To our surprise, the levels of shared understanding within the team appear closely tied to the development process employed. From Conway's law we know that an organization's structure is mirrored in the structure of the software that the organization produces. Our findings suggest that the organization's development process may likewise be mirrored in the extent to which a development team shares a common frame of reference. Hence, the development process followed may have implications for the effectiveness with which development knowledge can be shared through software documentation.</Abstract>
    <Abstract_Length>193</Abstract_Length>
    <Author_Name>remco c de boer</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>vu university amsterdam</Affiliation_Name>
    <Author_Id>2141833150</Author_Id>
    <All_Authors>hans van vliet, remco c de boer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2133793249</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Linking strategy, governance, and performance in software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593722</DOI>
    <Abstract>Applying IT in an appropriate and timely way, in harmony with strategies, goals and needs, is important for business performance success. However, because ensuring that IT will support the achievement of business strategies entails a sequence of key decisions in a variety of related IT areas, knowledge that is relevant for effective decision-making tends to be dispersed among multiple business and IT stakeholders, who represent an organisation's diverse and conflicting interests. Consequently, inappropriately assigning decision rights for critical IT decisions increases the risk of misalignment. We study the context in which decision rights are managed as part of governance in software development for business process support so that organisations can achieve high-level alignment between software systems and business processes during software development. In this paper we establish the key components of a system for governance design that links software development governance arrangements, business strategy and performance. We position business process executives and managers as roles responsible for software development governance. Their responsibilities include defining the software system's strategic aims, providing the leadership to put them into effect, and satisfying themselves that an appropriate governance structure is, and remains in place during software development. We also position business process and software developer stakeholders as roles responsible for implementing software systems that help realise strategic aims. We propose four key software development decisions: functional and non-functional requirements, and system architecture and deliverables.</Abstract>
    <Abstract_Length>230</Abstract_Length>
    <Author_Name>anthony finkelstein</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university college london</Affiliation_Name>
    <Author_Id>2082763392</Author_Id>
    <All_Authors>anthony finkelstein, monde kalumbilo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2133793249</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Linking strategy, governance, and performance in software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593722</DOI>
    <Abstract>Applying IT in an appropriate and timely way, in harmony with strategies, goals and needs, is important for business performance success. However, because ensuring that IT will support the achievement of business strategies entails a sequence of key decisions in a variety of related IT areas, knowledge that is relevant for effective decision-making tends to be dispersed among multiple business and IT stakeholders, who represent an organisation's diverse and conflicting interests. Consequently, inappropriately assigning decision rights for critical IT decisions increases the risk of misalignment. We study the context in which decision rights are managed as part of governance in software development for business process support so that organisations can achieve high-level alignment between software systems and business processes during software development. In this paper we establish the key components of a system for governance design that links software development governance arrangements, business strategy and performance. We position business process executives and managers as roles responsible for software development governance. Their responsibilities include defining the software system's strategic aims, providing the leadership to put them into effect, and satisfying themselves that an appropriate governance structure is, and remains in place during software development. We also position business process and software developer stakeholders as roles responsible for implementing software systems that help realise strategic aims. We propose four key software development decisions: functional and non-functional requirements, and system architecture and deliverables.</Abstract>
    <Abstract_Length>230</Abstract_Length>
    <Author_Name>monde kalumbilo</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university college london</Affiliation_Name>
    <Author_Id>2228797374</Author_Id>
    <All_Authors>anthony finkelstein, monde kalumbilo</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2134024330</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Taking care of cooperation when evolving socially embedded systems: The PloneMeeting case</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071420</DOI>
    <Abstract>This paper proposes a framework to (i) analyse the contexts of socially embedded systems and (ii) support the understanding of change during their evolutions. Our finding is based on a co-operative project with a government agency developing a partially-automated variability configurator for an open source software product family. By employing our framework, we realised that the way variations and their management are implemented have to accommodate work practices from the use context as well as development practice, and here especially the cooperation within the development team and between users and developers. The empirical evidence has confirmed our understanding of what is relevant when estimating the evolvability of socially embedded systems. We propose to use our framework in architecture-level design and evaluation in order to take these cooperative relationships into account early in the evolution cycle.</Abstract>
    <Abstract_Length>135</Abstract_Length>
    <Author_Name>yvonne dittrich</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>146716645</Author_Id>
    <All_Authors>yvonne dittrich, hataichanok unphon, arnaud hubaux</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2134024330</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Taking care of cooperation when evolving socially embedded systems: The PloneMeeting case</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071420</DOI>
    <Abstract>This paper proposes a framework to (i) analyse the contexts of socially embedded systems and (ii) support the understanding of change during their evolutions. Our finding is based on a co-operative project with a government agency developing a partially-automated variability configurator for an open source software product family. By employing our framework, we realised that the way variations and their management are implemented have to accommodate work practices from the use context as well as development practice, and here especially the cooperation within the development team and between users and developers. The empirical evidence has confirmed our understanding of what is relevant when estimating the evolvability of socially embedded systems. We propose to use our framework in architecture-level design and evaluation in order to take these cooperative relationships into account early in the evolution cycle.</Abstract>
    <Abstract_Length>135</Abstract_Length>
    <Author_Name>hataichanok unphon</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>257701891</Author_Id>
    <All_Authors>yvonne dittrich, hataichanok unphon, arnaud hubaux</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2134024330</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Taking care of cooperation when evolving socially embedded systems: The PloneMeeting case</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071420</DOI>
    <Abstract>This paper proposes a framework to (i) analyse the contexts of socially embedded systems and (ii) support the understanding of change during their evolutions. Our finding is based on a co-operative project with a government agency developing a partially-automated variability configurator for an open source software product family. By employing our framework, we realised that the way variations and their management are implemented have to accommodate work practices from the use context as well as development practice, and here especially the cooperation within the development team and between users and developers. The empirical evidence has confirmed our understanding of what is relevant when estimating the evolvability of socially embedded systems. We propose to use our framework in architecture-level design and evaluation in order to take these cooperative relationships into account early in the evolution cycle.</Abstract>
    <Abstract_Length>135</Abstract_Length>
    <Author_Name>arnaud hubaux</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>universite de namur</Affiliation_Name>
    <Author_Id>1235273647</Author_Id>
    <All_Authors>yvonne dittrich, hataichanok unphon, arnaud hubaux</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2134197591</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Towards refactoring-aware code review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593706</DOI>
    <Abstract>Software developers review changes to a code base to prevent new bugs from being introduced. However, some parts of a change are more likely to introduce bugs than others, and thus deserve more care in reviewing. In this short paper, we discuss our ongoing work to build a reviewing tool that automatically determines which changes in a change set are refactorings, uses this information to help the developer distinguish between refactoring and non-refactoring changes, and ultimately reduces the time it takes developers to review code accurately. We also discuss the challenges and opportunities we have faced when building this refactoring-aware code review tool.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>xi ge</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2110234187</Author_Id>
    <All_Authors>xi ge, saurabh sarkar, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2134197591</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Towards refactoring-aware code review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593706</DOI>
    <Abstract>Software developers review changes to a code base to prevent new bugs from being introduced. However, some parts of a change are more likely to introduce bugs than others, and thus deserve more care in reviewing. In this short paper, we discuss our ongoing work to build a reviewing tool that automatically determines which changes in a change set are refactorings, uses this information to help the developer distinguish between refactoring and non-refactoring changes, and ultimately reduces the time it takes developers to review code accurately. We also discuss the challenges and opportunities we have faced when building this refactoring-aware code review tool.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>saurabh sarkar</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2231267777</Author_Id>
    <All_Authors>xi ge, saurabh sarkar, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2134197591</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Towards refactoring-aware code review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593706</DOI>
    <Abstract>Software developers review changes to a code base to prevent new bugs from being introduced. However, some parts of a change are more likely to introduce bugs than others, and thus deserve more care in reviewing. In this short paper, we discuss our ongoing work to build a reviewing tool that automatically determines which changes in a change set are refactorings, uses this information to help the developer distinguish between refactoring and non-refactoring changes, and ultimately reduces the time it takes developers to review code accurately. We also discuss the challenges and opportunities we have faced when building this refactoring-aware code review tool.</Abstract>
    <Abstract_Length>103</Abstract_Length>
    <Author_Name>emerson r murphyhill</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>north carolina state university</Affiliation_Name>
    <Author_Id>2342860276</Author_Id>
    <All_Authors>xi ge, saurabh sarkar, emerson r murphyhill</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135031301</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Requirements maturation analysis based on the distance between the source and developers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984664</DOI>
    <Abstract>The success of a project is often affected by imperfect requirements. In order to cope with this risk, a requirements analyst needs to communicate with a client. However, communication between the requirements analyst and the client is not enough to prevent requirements imperfection, since requirements come from various sources, e.g. environment, laws, documents, actual usage, etc. The process of requirements elicitation is affected by the requirements stability, the ability of a requirements analyst, and accessibility of the source of requirements. This paper focuses on the distance between the source of requirements and a requirements analyst, and clarifies how the distance influences the requirements maturation. Requirements maturation represents the degree to which the requirements are elicited completely. We define a measure for observing requirements maturation and analyzing the accessibility of the source of the requirements. Then, we define a hypothesis. A case is analyzed in order to verify the hypothesis. As a result, there is a correlation between the requirements maturation efficiency and the accessibility of the source of the requirements.</Abstract>
    <Abstract_Length>170</Abstract_Length>
    <Author_Name>toshihiko tsumaki</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>national institute of informatics</Affiliation_Name>
    <Author_Id>2277222332</Author_Id>
    <All_Authors>toshihiko tsumaki, takako nakatani</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135031301</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Requirements maturation analysis based on the distance between the source and developers</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984664</DOI>
    <Abstract>The success of a project is often affected by imperfect requirements. In order to cope with this risk, a requirements analyst needs to communicate with a client. However, communication between the requirements analyst and the client is not enough to prevent requirements imperfection, since requirements come from various sources, e.g. environment, laws, documents, actual usage, etc. The process of requirements elicitation is affected by the requirements stability, the ability of a requirements analyst, and accessibility of the source of requirements. This paper focuses on the distance between the source of requirements and a requirements analyst, and clarifies how the distance influences the requirements maturation. Requirements maturation represents the degree to which the requirements are elicited completely. We define a measure for observing requirements maturation and analyzing the accessibility of the source of the requirements. Then, we define a hypothesis. A case is analyzed in order to verify the hypothesis. As a result, there is a correlation between the requirements maturation efficiency and the accessibility of the source of the requirements.</Abstract>
    <Abstract_Length>170</Abstract_Length>
    <Author_Name>takako nakatani</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of tsukuba</Affiliation_Name>
    <Author_Id>2294674483</Author_Id>
    <All_Authors>toshihiko tsumaki, takako nakatani</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135295137</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Continuous coordination within the context of cooperative and human aspects of software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370115</DOI>
    <Abstract>We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like-tools need to reflect this cooperative dimension.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>david f redmiles</Author_Name>
    <Author_Position>6</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>311754748</Author_Id>
    <All_Authors>david f redmiles, ban alani, roger m ripley, erik trainer, andre van der hoek, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135295137</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Continuous coordination within the context of cooperative and human aspects of software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370115</DOI>
    <Abstract>We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like-tools need to reflect this cooperative dimension.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>ban alani</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>1981493853</Author_Id>
    <All_Authors>david f redmiles, ban alani, roger m ripley, erik trainer, andre van der hoek, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135295137</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Continuous coordination within the context of cooperative and human aspects of software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370115</DOI>
    <Abstract>We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like-tools need to reflect this cooperative dimension.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>roger m ripley</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2014776025</Author_Id>
    <All_Authors>david f redmiles, ban alani, roger m ripley, erik trainer, andre van der hoek, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135295137</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Continuous coordination within the context of cooperative and human aspects of software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370115</DOI>
    <Abstract>We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like-tools need to reflect this cooperative dimension.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>erik trainer</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2116316123</Author_Id>
    <All_Authors>david f redmiles, ban alani, roger m ripley, erik trainer, andre van der hoek, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135295137</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Continuous coordination within the context of cooperative and human aspects of software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370115</DOI>
    <Abstract>We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like-tools need to reflect this cooperative dimension.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>david f redmiles, ban alani, roger m ripley, erik trainer, andre van der hoek, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135295137</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Continuous coordination within the context of cooperative and human aspects of software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370115</DOI>
    <Abstract>We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like-tools need to reflect this cooperative dimension.</Abstract>
    <Abstract_Length>140</Abstract_Length>
    <Author_Name>anita sarma</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2150694261</Author_Id>
    <All_Authors>david f redmiles, ban alani, roger m ripley, erik trainer, andre van der hoek, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135424716</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Challenges in the user interface design of an IDE tool recommender</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071421</DOI>
    <Abstract>To help software developers work efficiently, integrated development environments (IDE) include many tools. All too often, these developers are unaware of potentially useful tools within these IDEs that might help them complete their work more effectively. To improve both awareness and use of tools within an IDE, we have been developing a recommendation system called Spyglass that recommends tool(s) that might help a developer navigate information available in an IDE more efficiently. When designing such a recommendation system, important considerations are both the content of the recommendations and the form and manner in which those recommendations are made. In this paper, we focus on what we learned about the form and manner of making tool recommendations from a longitudinal user study of Spyglass. These results may be useful to others designing various kinds of recommendation systems for IDEs.</Abstract>
    <Abstract_Length>138</Abstract_Length>
    <Author_Name>gail c murphy</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>2100357700</Author_Id>
    <All_Authors>gail c murphy, petcharat viriyakattiyaporn</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135424716</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Challenges in the user interface design of an IDE tool recommender</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071421</DOI>
    <Abstract>To help software developers work efficiently, integrated development environments (IDE) include many tools. All too often, these developers are unaware of potentially useful tools within these IDEs that might help them complete their work more effectively. To improve both awareness and use of tools within an IDE, we have been developing a recommendation system called Spyglass that recommends tool(s) that might help a developer navigate information available in an IDE more efficiently. When designing such a recommendation system, important considerations are both the content of the recommendations and the form and manner in which those recommendations are made. In this paper, we focus on what we learned about the form and manner of making tool recommendations from a longitudinal user study of Spyglass. These results may be useful to others designing various kinds of recommendation systems for IDEs.</Abstract>
    <Abstract_Length>138</Abstract_Length>
    <Author_Name>petcharat viriyakattiyaporn</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>2223388086</Author_Id>
    <All_Authors>gail c murphy, petcharat viriyakattiyaporn</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2135580947</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>REIM - an improvisation workshop format to train soft skill awareness</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223023</DOI>
    <Abstract>Teaching requirements engineering (RE) often focuses on teaching factual knowledge such as how to write requirements, how to model the architecture, where and in which format to store the retrieved data? This is however only one side of the coin, working together is all about relationship between humans. In his daily work, requirements engineers face many situations where efficient communication is needed. We expect our requirements engineer to master the situations "right", expect him to act professionally.   Looking at the situation for professional trainings for requirements engineers however, we often do not find a sound forum to train them. The training of these  human factors  or  soft skills  as we call them, is split up from the  factual knowledge  such as requirements engineering methods. To our knowledge, no approach exists, to combine the training of soft skills and factual RE knowledge into one training concept.   This paper describes a workshop format which overcomes this situation and combines soft skills and factual RE knowledge into one training. We introduce the so-called REIM (Requirements Engineering and Improvisation) format. REIM utilizes a typical session of an improvisation theater course and extends it to the area of RE by using storytelling methods. This paper explains the main principle and elements of the workshop and provides an example for illustration.   We conclude with lessons learned from already conducted workshops and outline next steps needed to validate the workshop's efficiency in a proper case study.</Abstract>
    <Abstract_Length>251</Abstract_Length>
    <Author_Name>anne hoffmann</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>siemens</Affiliation_Name>
    <Author_Id>2116838920</Author_Id>
    <All_Authors>anne hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139159781</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>33</Citations_Count>
    <Display_Name>Saros: an eclipse plug-in for distributed party programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833319</DOI>
    <Abstract>This paper describes the social practice of distributed party programming as a natural extension of pair programming in a distributed context with two or more software developers working together. To this end we provide an overview of the Eclipse plug-in Saros, a software implementation supporting this practice, and explain its technical architecture. The central contribution of this paper is a detailed description of four concrete scenarios of distributed collaboration where one of them is distributed party programming. Furthermore it will be shown how each scenario is supported by Saros. The paper closes with a discussion of preliminary findings about establishing Saros in Open Source projects.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>christopher oezbek</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>292552766</Author_Id>
    <All_Authors>christopher oezbek, stephan salinger, julia schenk, karl beecher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139159781</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>33</Citations_Count>
    <Display_Name>Saros: an eclipse plug-in for distributed party programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833319</DOI>
    <Abstract>This paper describes the social practice of distributed party programming as a natural extension of pair programming in a distributed context with two or more software developers working together. To this end we provide an overview of the Eclipse plug-in Saros, a software implementation supporting this practice, and explain its technical architecture. The central contribution of this paper is a detailed description of four concrete scenarios of distributed collaboration where one of them is distributed party programming. Furthermore it will be shown how each scenario is supported by Saros. The paper closes with a discussion of preliminary findings about establishing Saros in Open Source projects.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>stephan salinger</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>2119242846</Author_Id>
    <All_Authors>christopher oezbek, stephan salinger, julia schenk, karl beecher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139159781</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>33</Citations_Count>
    <Display_Name>Saros: an eclipse plug-in for distributed party programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833319</DOI>
    <Abstract>This paper describes the social practice of distributed party programming as a natural extension of pair programming in a distributed context with two or more software developers working together. To this end we provide an overview of the Eclipse plug-in Saros, a software implementation supporting this practice, and explain its technical architecture. The central contribution of this paper is a detailed description of four concrete scenarios of distributed collaboration where one of them is distributed party programming. Furthermore it will be shown how each scenario is supported by Saros. The paper closes with a discussion of preliminary findings about establishing Saros in Open Source projects.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>julia schenk</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>2230734982</Author_Id>
    <All_Authors>christopher oezbek, stephan salinger, julia schenk, karl beecher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139159781</Paper_API_Id>
    <Paper_Year>2010</Paper_Year>
    <Citations_Count>33</Citations_Count>
    <Display_Name>Saros: an eclipse plug-in for distributed party programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1145/1833310.1833319</DOI>
    <Abstract>This paper describes the social practice of distributed party programming as a natural extension of pair programming in a distributed context with two or more software developers working together. To this end we provide an overview of the Eclipse plug-in Saros, a software implementation supporting this practice, and explain its technical architecture. The central contribution of this paper is a detailed description of four concrete scenarios of distributed collaboration where one of them is distributed party programming. Furthermore it will be shown how each scenario is supported by Saros. The paper closes with a discussion of preliminary findings about establishing Saros in Open Source projects.</Abstract>
    <Abstract_Length>105</Abstract_Length>
    <Author_Name>karl beecher</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>2300807190</Author_Id>
    <All_Authors>christopher oezbek, stephan salinger, julia schenk, karl beecher</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139502068</Paper_API_Id>
    <Paper_Year>2008</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>Effecting change: coordination in large-scale software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1370114.1370119</DOI>
    <Abstract>Large-scale software development requires coordination within and between very large engineering teams, each of which may be located in different locations and time zones. Numerous studies, and indeed, a whole conference (ICGSE), are dedicated to discovering the causes of problems with distributed development in the software industry. Microsoft has long had product teams too large to be considered co-located, even when sitting in neighboring buildings on the same campus. Recently, it has been expanding its engineering workforce into India and China, and our research is showing that Microsoft is encountering many of the coordination problems that go along with differences of location, time zone, and culture. As we go forward, our research has been changing from learning about the problem to experimenting with solutions. What are the best practices for improving coordination? Can they be applied to all software teams? How does one move past simple readings of research results towards effective intervention?</Abstract>
    <Abstract_Length>153</Abstract_Length>
    <Author_Name>andrew begel</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>1970259043</Author_Id>
    <All_Authors>andrew begel</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139954865</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>15</Citations_Count>
    <Display_Name>Towards a behavioral software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593711</DOI>
    <Abstract>Throughout the history of Software Engineering (SE) it has been repeatedly found that the humans involved, i.e. the engineers and developers in addition to other stakeholders, are a key factor in determining project outcomes and success. However, the amount of research that focuses on human aspects has been limited compared to research with technology or process focus. With increasing maturity of the field, interest in agile methods and a growing dissatisfaction with the continued challenges of developing high-quality software on time, the amount of SE research putting human aspect in primary focus has increased.     In this paper we argue that a synthesized view of the emerging human-focused SE research is needed and can add value through giving focus, direction and help identify gaps. Taking cues from the addition of Behavioral Economics as an important part of the area of Economics we propose the term Behavioral Software Engineering (BSE) as an umbrella concept for research that focus on behavioral and social aspects in the work activities of software engineers. We propose that a model based on three units of analysis can give structure and point to concepts that are important for BSE. To add detail to this model we are conducting a systematic review to map out what is currently known. To exemplify the model and the area we here present the results from a subset of the identified concepts.</Abstract>
    <Abstract_Length>233</Abstract_Length>
    <Author_Name>per lenberg</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2022443403</Author_Id>
    <All_Authors>per lenberg, robert feldt, lars goran wallgren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139954865</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>15</Citations_Count>
    <Display_Name>Towards a behavioral software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593711</DOI>
    <Abstract>Throughout the history of Software Engineering (SE) it has been repeatedly found that the humans involved, i.e. the engineers and developers in addition to other stakeholders, are a key factor in determining project outcomes and success. However, the amount of research that focuses on human aspects has been limited compared to research with technology or process focus. With increasing maturity of the field, interest in agile methods and a growing dissatisfaction with the continued challenges of developing high-quality software on time, the amount of SE research putting human aspect in primary focus has increased.     In this paper we argue that a synthesized view of the emerging human-focused SE research is needed and can add value through giving focus, direction and help identify gaps. Taking cues from the addition of Behavioral Economics as an important part of the area of Economics we propose the term Behavioral Software Engineering (BSE) as an umbrella concept for research that focus on behavioral and social aspects in the work activities of software engineers. We propose that a model based on three units of analysis can give structure and point to concepts that are important for BSE. To add detail to this model we are conducting a systematic review to map out what is currently known. To exemplify the model and the area we here present the results from a subset of the identified concepts.</Abstract>
    <Abstract_Length>233</Abstract_Length>
    <Author_Name>robert feldt</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2034354864</Author_Id>
    <All_Authors>per lenberg, robert feldt, lars goran wallgren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2139954865</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>15</Citations_Count>
    <Display_Name>Towards a behavioral software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593711</DOI>
    <Abstract>Throughout the history of Software Engineering (SE) it has been repeatedly found that the humans involved, i.e. the engineers and developers in addition to other stakeholders, are a key factor in determining project outcomes and success. However, the amount of research that focuses on human aspects has been limited compared to research with technology or process focus. With increasing maturity of the field, interest in agile methods and a growing dissatisfaction with the continued challenges of developing high-quality software on time, the amount of SE research putting human aspect in primary focus has increased.     In this paper we argue that a synthesized view of the emerging human-focused SE research is needed and can add value through giving focus, direction and help identify gaps. Taking cues from the addition of Behavioral Economics as an important part of the area of Economics we propose the term Behavioral Software Engineering (BSE) as an umbrella concept for research that focus on behavioral and social aspects in the work activities of software engineers. We propose that a model based on three units of analysis can give structure and point to concepts that are important for BSE. To add detail to this model we are conducting a systematic review to map out what is currently known. To exemplify the model and the area we here present the results from a subset of the identified concepts.</Abstract>
    <Abstract_Length>233</Abstract_Length>
    <Author_Name>lars goran wallgren</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of gothenburg</Affiliation_Name>
    <Author_Id>2042874181</Author_Id>
    <All_Authors>per lenberg, robert feldt, lars goran wallgren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2141302780</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Team effectiveness in software development: human and cooperative aspects in team effectiveness models and priorities for future studies</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223016</DOI>
    <Abstract>Software development is most often done in teams, where human and cooperative aspects are vital for team effectiveness. This has been the topic of study in several disciplines, and in this article we describe three team effectiveness models from other fields. We discuss priorities for future studies on software teams, and ask: Do we need our own effectiveness model for software teams?</Abstract>
    <Abstract_Length>62</Abstract_Length>
    <Author_Name>torgeir dingsoyr</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>sintef</Affiliation_Name>
    <Author_Id>207081352</Author_Id>
    <All_Authors>torgeir dingsoyr, tore dyba</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2141302780</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>17</Citations_Count>
    <Display_Name>Team effectiveness in software development: human and cooperative aspects in team effectiveness models and priorities for future studies</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223016</DOI>
    <Abstract>Software development is most often done in teams, where human and cooperative aspects are vital for team effectiveness. This has been the topic of study in several disciplines, and in this article we describe three team effectiveness models from other fields. We discuss priorities for future studies on software teams, and ask: Do we need our own effectiveness model for software teams?</Abstract>
    <Abstract_Length>62</Abstract_Length>
    <Author_Name>tore dyba</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>sintef</Affiliation_Name>
    <Author_Id>1881098685</Author_Id>
    <All_Authors>torgeir dingsoyr, tore dyba</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2141608792</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>Reporting usability metrics experiences</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071422</DOI>
    <Abstract>It is often claimed that software development is negatively affected by infrequent, incomplete and inconsistent measurements; improving with the help of metrics is an obvious solution. Software testing provides opportunities for measurement that give organizations insight in to processes. Usability testing is part of the testing area, although it is not a commonly addressed area within software engineering, perhaps because of a split between qualitative and quantitative paradigms. We compare a usability testing framework called UTUM with principles for Software Process Improvement, and find areas of close agreement as well as areas where our work illuminates new characteristics. UTUM is found to be a useful vehicle for improvement in software engineering, dealing as it does with both product and process. Our work emphasises the importance of the neglected area of usability testing. Our experience also illustrates how the metrics have been tailored to act as a boundary object between different disciplines.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>kari ronkko</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2070059870</Author_Id>
    <All_Authors>kari ronkko, jeff winter, mats hellman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2141608792</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>Reporting usability metrics experiences</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071422</DOI>
    <Abstract>It is often claimed that software development is negatively affected by infrequent, incomplete and inconsistent measurements; improving with the help of metrics is an obvious solution. Software testing provides opportunities for measurement that give organizations insight in to processes. Usability testing is part of the testing area, although it is not a commonly addressed area within software engineering, perhaps because of a split between qualitative and quantitative paradigms. We compare a usability testing framework called UTUM with principles for Software Process Improvement, and find areas of close agreement as well as areas where our work illuminates new characteristics. UTUM is found to be a useful vehicle for improvement in software engineering, dealing as it does with both product and process. Our work emphasises the importance of the neglected area of usability testing. Our experience also illustrates how the metrics have been tailored to act as a boundary object between different disciplines.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>jeff winter</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2114453931</Author_Id>
    <All_Authors>kari ronkko, jeff winter, mats hellman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2141608792</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>Reporting usability metrics experiences</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071422</DOI>
    <Abstract>It is often claimed that software development is negatively affected by infrequent, incomplete and inconsistent measurements; improving with the help of metrics is an obvious solution. Software testing provides opportunities for measurement that give organizations insight in to processes. Usability testing is part of the testing area, although it is not a commonly addressed area within software engineering, perhaps because of a split between qualitative and quantitative paradigms. We compare a usability testing framework called UTUM with principles for Software Process Improvement, and find areas of close agreement as well as areas where our work illuminates new characteristics. UTUM is found to be a useful vehicle for improvement in software engineering, dealing as it does with both product and process. Our work emphasises the importance of the neglected area of usability testing. Our experience also illustrates how the metrics have been tailored to act as a boundary object between different disciplines.</Abstract>
    <Abstract_Length>151</Abstract_Length>
    <Author_Name>mats hellman</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2141218191</Author_Id>
    <All_Authors>kari ronkko, jeff winter, mats hellman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2142270676</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>STCML: an extensible XML-based language for socio-technical modeling</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984657</DOI>
    <Abstract>Understanding the complex dependencies between the technical artifacts of software engineering and the social processes involved in their development has the potential to improve the processes we use to engineer software as well as the eventual quality of the systems we produce. A foundational capability in grounding this study of socio-technical concerns is the ability to explicitly model technical and social artifacts as well as the dependencies between them. This paper presents the STCML language, intended to support the modeling of core socio-technical aspects in software development in a highly extensible fashion. We present the basic structure of the language, discuss important language design principles, and offer an example of its application.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>john c georgas</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>northern arizona university</Affiliation_Name>
    <Author_Id>712258177</Author_Id>
    <All_Authors>john c georgas, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2142270676</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>STCML: an extensible XML-based language for socio-technical modeling</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984657</DOI>
    <Abstract>Understanding the complex dependencies between the technical artifacts of software engineering and the social processes involved in their development has the potential to improve the processes we use to engineer software as well as the eventual quality of the systems we produce. A foundational capability in grounding this study of socio-technical concerns is the ability to explicitly model technical and social artifacts as well as the dependencies between them. This paper presents the STCML language, intended to support the modeling of core socio-technical aspects in software development in a highly extensible fashion. We present the basic structure of the language, discuss important language design principles, and offer an example of its application.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>anita sarma</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of nebraska lincoln</Affiliation_Name>
    <Author_Id>2150694261</Author_Id>
    <All_Authors>john c georgas, anita sarma</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2143354134</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>What is social debt in software engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614739</DOI>
    <Abstract>“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>philippe kruchten</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of british columbia</Affiliation_Name>
    <Author_Id>2032079893</Author_Id>
    <All_Authors>philippe kruchten, damian andrew tamburri, hans van vliet, patricia lago</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2143354134</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>What is social debt in software engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614739</DOI>
    <Abstract>“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>damian andrew tamburri</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>vu university amsterdam</Affiliation_Name>
    <Author_Id>2055140049</Author_Id>
    <All_Authors>philippe kruchten, damian andrew tamburri, hans van vliet, patricia lago</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2143354134</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>What is social debt in software engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614739</DOI>
    <Abstract>“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>hans van vliet</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>vu university amsterdam</Affiliation_Name>
    <Author_Id>2105014955</Author_Id>
    <All_Authors>philippe kruchten, damian andrew tamburri, hans van vliet, patricia lago</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2143354134</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>What is social debt in software engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614739</DOI>
    <Abstract>“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.</Abstract>
    <Abstract_Length>121</Abstract_Length>
    <Author_Name>patricia lago</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>vu university amsterdam</Affiliation_Name>
    <Author_Id>2169480330</Author_Id>
    <All_Authors>philippe kruchten, damian andrew tamburri, hans van vliet, patricia lago</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144319189</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Documentation practices in scientific software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223004</DOI>
    <Abstract>This paper focuses on documentation practices in scientific software development and takes into account two perspectives: that of scientists who develop software (scientists-developers) and of those scientists who use it. We describe documentation practices of scientists-developers. We also explore the role of users' community in scientific software documentation. We compare our findings to studies about documentation practices of professional software developers and discuss how production of documentation in scientific software development can be supported.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>aleksandra pawlik</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>1967971282</Author_Id>
    <All_Authors>aleksandra pawlik, marian petre, judith segal</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144319189</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Documentation practices in scientific software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223004</DOI>
    <Abstract>This paper focuses on documentation practices in scientific software development and takes into account two perspectives: that of scientists who develop software (scientists-developers) and of those scientists who use it. We describe documentation practices of scientists-developers. We also explore the role of users' community in scientific software documentation. We compare our findings to studies about documentation practices of professional software developers and discuss how production of documentation in scientific software development can be supported.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>marian petre</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2086609251</Author_Id>
    <All_Authors>aleksandra pawlik, marian petre, judith segal</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144319189</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Documentation practices in scientific software development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223004</DOI>
    <Abstract>This paper focuses on documentation practices in scientific software development and takes into account two perspectives: that of scientists who develop software (scientists-developers) and of those scientists who use it. We describe documentation practices of scientists-developers. We also explore the role of users' community in scientific software documentation. We compare our findings to studies about documentation practices of professional software developers and discuss how production of documentation in scientific software development can be supported.</Abstract>
    <Abstract_Length>74</Abstract_Length>
    <Author_Name>judith segal</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2170429911</Author_Id>
    <All_Authors>aleksandra pawlik, marian petre, judith segal</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144875727</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Using the IDEAL software process improvement model for the implementation of automotive SPICE</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223026</DOI>
    <Abstract>Most suppliers in the automotive industry are facing the challenge of implementing Automotive SPICE, a domain-specific model of ISO/IEC 15504, which was first published in 2005. Original equipment manufacturers have increasingly requested SPICE certifications from their suppliers in order to effectively evaluate the development processes and identify reliable partners. To support organizations in their software process improvement effort, the Software Engineering Institute (SEI) developed the IDEAL model. This guide is, however, influenced by the SEI's work on CMM and based on the experiences with very large organizations. The goal of this paper is to examine the suitability of the IDEAL model for the implementation of Automotive SPICE at a medium-sized R&amp;D department. Preliminary results from an action research study at a global systems engineering company are discussed. The data indicate that adjustments are especially needed with regard to the factors participation and communication. Also, informal networks between companies, early decision-making and usability are shown to play an important role and might be added to the model.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>helmut krcmar</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>technische universitat munchen</Affiliation_Name>
    <Author_Id>311031536</Author_Id>
    <All_Authors>helmut krcmar, marina berkovich, ruth klendauer, jan marco leimeister, axel hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144875727</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Using the IDEAL software process improvement model for the implementation of automotive SPICE</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223026</DOI>
    <Abstract>Most suppliers in the automotive industry are facing the challenge of implementing Automotive SPICE, a domain-specific model of ISO/IEC 15504, which was first published in 2005. Original equipment manufacturers have increasingly requested SPICE certifications from their suppliers in order to effectively evaluate the development processes and identify reliable partners. To support organizations in their software process improvement effort, the Software Engineering Institute (SEI) developed the IDEAL model. This guide is, however, influenced by the SEI's work on CMM and based on the experiences with very large organizations. The goal of this paper is to examine the suitability of the IDEAL model for the implementation of Automotive SPICE at a medium-sized R&amp;D department. Preliminary results from an action research study at a global systems engineering company are discussed. The data indicate that adjustments are especially needed with regard to the factors participation and communication. Also, informal networks between companies, early decision-making and usability are shown to play an important role and might be added to the model.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>marina berkovich</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>technische universitat munchen</Affiliation_Name>
    <Author_Id>1988541844</Author_Id>
    <All_Authors>helmut krcmar, marina berkovich, ruth klendauer, jan marco leimeister, axel hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144875727</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Using the IDEAL software process improvement model for the implementation of automotive SPICE</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223026</DOI>
    <Abstract>Most suppliers in the automotive industry are facing the challenge of implementing Automotive SPICE, a domain-specific model of ISO/IEC 15504, which was first published in 2005. Original equipment manufacturers have increasingly requested SPICE certifications from their suppliers in order to effectively evaluate the development processes and identify reliable partners. To support organizations in their software process improvement effort, the Software Engineering Institute (SEI) developed the IDEAL model. This guide is, however, influenced by the SEI's work on CMM and based on the experiences with very large organizations. The goal of this paper is to examine the suitability of the IDEAL model for the implementation of Automotive SPICE at a medium-sized R&amp;D department. Preliminary results from an action research study at a global systems engineering company are discussed. The data indicate that adjustments are especially needed with regard to the factors participation and communication. Also, informal networks between companies, early decision-making and usability are shown to play an important role and might be added to the model.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>ruth klendauer</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2021737549</Author_Id>
    <All_Authors>helmut krcmar, marina berkovich, ruth klendauer, jan marco leimeister, axel hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144875727</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Using the IDEAL software process improvement model for the implementation of automotive SPICE</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223026</DOI>
    <Abstract>Most suppliers in the automotive industry are facing the challenge of implementing Automotive SPICE, a domain-specific model of ISO/IEC 15504, which was first published in 2005. Original equipment manufacturers have increasingly requested SPICE certifications from their suppliers in order to effectively evaluate the development processes and identify reliable partners. To support organizations in their software process improvement effort, the Software Engineering Institute (SEI) developed the IDEAL model. This guide is, however, influenced by the SEI's work on CMM and based on the experiences with very large organizations. The goal of this paper is to examine the suitability of the IDEAL model for the implementation of Automotive SPICE at a medium-sized R&amp;D department. Preliminary results from an action research study at a global systems engineering company are discussed. The data indicate that adjustments are especially needed with regard to the factors participation and communication. Also, informal networks between companies, early decision-making and usability are shown to play an important role and might be added to the model.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>jan marco leimeister</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2110963832</Author_Id>
    <All_Authors>helmut krcmar, marina berkovich, ruth klendauer, jan marco leimeister, axel hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2144875727</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Using the IDEAL software process improvement model for the implementation of automotive SPICE</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223026</DOI>
    <Abstract>Most suppliers in the automotive industry are facing the challenge of implementing Automotive SPICE, a domain-specific model of ISO/IEC 15504, which was first published in 2005. Original equipment manufacturers have increasingly requested SPICE certifications from their suppliers in order to effectively evaluate the development processes and identify reliable partners. To support organizations in their software process improvement effort, the Software Engineering Institute (SEI) developed the IDEAL model. This guide is, however, influenced by the SEI's work on CMM and based on the experiences with very large organizations. The goal of this paper is to examine the suitability of the IDEAL model for the implementation of Automotive SPICE at a medium-sized R&amp;D department. Preliminary results from an action research study at a global systems engineering company are discussed. The data indicate that adjustments are especially needed with regard to the factors participation and communication. Also, informal networks between companies, early decision-making and usability are shown to play an important role and might be added to the model.</Abstract>
    <Abstract_Length>166</Abstract_Length>
    <Author_Name>axel hoffmann</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2160788256</Author_Id>
    <All_Authors>helmut krcmar, marina berkovich, ruth klendauer, jan marco leimeister, axel hoffmann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2145531894</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>16</Citations_Count>
    <Display_Name>The role of blogging in generating a software product vision</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071414</DOI>
    <Abstract>The core problem with requirements engineering is that often even the customers have no clear idea what they need; they don't know how to express it; or even if they express it really well, what they thought they need wasn't what they really need. Despite having the technical skills and being able to speak the domain language, generating requirements for software developers by the developers is found to be quite a difficult task. We discuss four types of strategies for expressing one's desire for requirements. We analyze how stories turn into consensus.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>shelly park</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2097960290</Author_Id>
    <All_Authors>shelly park, frank maurer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2145531894</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>16</Citations_Count>
    <Display_Name>The role of blogging in generating a software product vision</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071414</DOI>
    <Abstract>The core problem with requirements engineering is that often even the customers have no clear idea what they need; they don't know how to express it; or even if they express it really well, what they thought they need wasn't what they really need. Despite having the technical skills and being able to speak the domain language, generating requirements for software developers by the developers is found to be quite a difficult task. We discuss four types of strategies for expressing one's desire for requirements. We analyze how stories turn into consensus.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>frank maurer</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of calgary</Affiliation_Name>
    <Author_Id>2122066335</Author_Id>
    <All_Authors>shelly park, frank maurer</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2149468448</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Enabling and enhancing collaborations between software development organizations and independent test agencies</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071411</DOI>
    <Abstract>While the use of independent test agencies is on the rise — currently estimated to be a $25B marketplace — there are a number of challenges to successful collaboration between these agencies and their client software development organizations. These agencies offer independent verification of software, skilled testing experts, and economic advantages that arise from differential global labor rates. However, these benefits are often offset by difficulties in effectively integrating the outsourced testing into software development practice. We conducted extensive discussions with test managers and engineers at software development organizations. This position paper presents the findings of these discussions that identify key difficulties of integrating independent test agencies into software development practice, and it describes our position on how these findings can be addressed.</Abstract>
    <Abstract_Length>123</Abstract_Length>
    <Author_Name>mark grechanik</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>accenture</Affiliation_Name>
    <Author_Id>2048808281</Author_Id>
    <All_Authors>mark grechanik, james a jones, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2149468448</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Enabling and enhancing collaborations between software development organizations and independent test agencies</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071411</DOI>
    <Abstract>While the use of independent test agencies is on the rise — currently estimated to be a $25B marketplace — there are a number of challenges to successful collaboration between these agencies and their client software development organizations. These agencies offer independent verification of software, skilled testing experts, and economic advantages that arise from differential global labor rates. However, these benefits are often offset by difficulties in effectively integrating the outsourced testing into software development practice. We conducted extensive discussions with test managers and engineers at software development organizations. This position paper presents the findings of these discussions that identify key difficulties of integrating independent test agencies into software development practice, and it describes our position on how these findings can be addressed.</Abstract>
    <Abstract_Length>123</Abstract_Length>
    <Author_Name>james a jones</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2129459225</Author_Id>
    <All_Authors>mark grechanik, james a jones, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2149468448</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Enabling and enhancing collaborations between software development organizations and independent test agencies</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071411</DOI>
    <Abstract>While the use of independent test agencies is on the rise — currently estimated to be a $25B marketplace — there are a number of challenges to successful collaboration between these agencies and their client software development organizations. These agencies offer independent verification of software, skilled testing experts, and economic advantages that arise from differential global labor rates. However, these benefits are often offset by difficulties in effectively integrating the outsourced testing into software development practice. We conducted extensive discussions with test managers and engineers at software development organizations. This position paper presents the findings of these discussions that identify key difficulties of integrating independent test agencies into software development practice, and it describes our position on how these findings can be addressed.</Abstract>
    <Abstract_Length>123</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>mark grechanik, james a jones, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2153739469</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A case study of post-deployment user feedback triage</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984644</DOI>
    <Abstract>Many software requirements are identified only after a product is deployed, once users have had a chance to try the software and provide feedback. Unfortunately, addressing such feedback is not always straightforward, even when a team is fully invested in user-centered design. To investigate what constrains a teams evolution decisions, we performed a 6-month field study of a team employing iterative user-centered design methods to the design, deployment and evolution of a web application for a university community. Across interviews with the team, analyses of their bug reports, and further interviews with both users and non-adopters of the application, we found most of the constraints on addressing user feedback emerged from conflicts between users heterogeneous use of information and inflexible assumptions in the team's software architecture derived from earlier user research. These findings highlight the need for new approaches to expressing and validating assumptions from user research as software evolves.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>michael j lee</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of washington</Affiliation_Name>
    <Author_Id>2118915928</Author_Id>
    <All_Authors>michael j lee, andrew j ko, steven ip, valentina ferrari, charlie tran</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2153739469</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A case study of post-deployment user feedback triage</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984644</DOI>
    <Abstract>Many software requirements are identified only after a product is deployed, once users have had a chance to try the software and provide feedback. Unfortunately, addressing such feedback is not always straightforward, even when a team is fully invested in user-centered design. To investigate what constrains a teams evolution decisions, we performed a 6-month field study of a team employing iterative user-centered design methods to the design, deployment and evolution of a web application for a university community. Across interviews with the team, analyses of their bug reports, and further interviews with both users and non-adopters of the application, we found most of the constraints on addressing user feedback emerged from conflicts between users heterogeneous use of information and inflexible assumptions in the team's software architecture derived from earlier user research. These findings highlight the need for new approaches to expressing and validating assumptions from user research as software evolves.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>andrew j ko</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of washington</Affiliation_Name>
    <Author_Id>2147219881</Author_Id>
    <All_Authors>michael j lee, andrew j ko, steven ip, valentina ferrari, charlie tran</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2153739469</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A case study of post-deployment user feedback triage</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984644</DOI>
    <Abstract>Many software requirements are identified only after a product is deployed, once users have had a chance to try the software and provide feedback. Unfortunately, addressing such feedback is not always straightforward, even when a team is fully invested in user-centered design. To investigate what constrains a teams evolution decisions, we performed a 6-month field study of a team employing iterative user-centered design methods to the design, deployment and evolution of a web application for a university community. Across interviews with the team, analyses of their bug reports, and further interviews with both users and non-adopters of the application, we found most of the constraints on addressing user feedback emerged from conflicts between users heterogeneous use of information and inflexible assumptions in the team's software architecture derived from earlier user research. These findings highlight the need for new approaches to expressing and validating assumptions from user research as software evolves.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>steven ip</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of washington</Affiliation_Name>
    <Author_Id>2223297307</Author_Id>
    <All_Authors>michael j lee, andrew j ko, steven ip, valentina ferrari, charlie tran</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2153739469</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A case study of post-deployment user feedback triage</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984644</DOI>
    <Abstract>Many software requirements are identified only after a product is deployed, once users have had a chance to try the software and provide feedback. Unfortunately, addressing such feedback is not always straightforward, even when a team is fully invested in user-centered design. To investigate what constrains a teams evolution decisions, we performed a 6-month field study of a team employing iterative user-centered design methods to the design, deployment and evolution of a web application for a university community. Across interviews with the team, analyses of their bug reports, and further interviews with both users and non-adopters of the application, we found most of the constraints on addressing user feedback emerged from conflicts between users heterogeneous use of information and inflexible assumptions in the team's software architecture derived from earlier user research. These findings highlight the need for new approaches to expressing and validating assumptions from user research as software evolves.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>valentina ferrari</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of washington</Affiliation_Name>
    <Author_Id>2224692040</Author_Id>
    <All_Authors>michael j lee, andrew j ko, steven ip, valentina ferrari, charlie tran</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2153739469</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>A case study of post-deployment user feedback triage</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984644</DOI>
    <Abstract>Many software requirements are identified only after a product is deployed, once users have had a chance to try the software and provide feedback. Unfortunately, addressing such feedback is not always straightforward, even when a team is fully invested in user-centered design. To investigate what constrains a teams evolution decisions, we performed a 6-month field study of a team employing iterative user-centered design methods to the design, deployment and evolution of a web application for a university community. Across interviews with the team, analyses of their bug reports, and further interviews with both users and non-adopters of the application, we found most of the constraints on addressing user feedback emerged from conflicts between users heterogeneous use of information and inflexible assumptions in the team's software architecture derived from earlier user research. These findings highlight the need for new approaches to expressing and validating assumptions from user research as software evolves.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>charlie tran</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of washington</Affiliation_Name>
    <Author_Id>2227995066</Author_Id>
    <All_Authors>michael j lee, andrew j ko, steven ip, valentina ferrari, charlie tran</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2154498177</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Less is more: Architecture documentation for agile development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614746</DOI>
    <Abstract>The use of agile development methodologies in the software industry has increased significantly over the past decade. This has led to efforts to adjust these methodologies to enterprise products and complex systems' development, and specifically to combine the requirement of minimalism with the need for well-defined up-front architecture artifacts. Nevertheless, in many cases, architecture is accompanied with extensive documentation that requires significant effort to review and maintain throughout the development lifecycle. This paper presents a case study that aims at identifying difficulties architects and other stakeholders encounter when dealing with architecture documentation in agile development. The findings indicate that the architecture specification document is usually very long, complex, and not self-explanatory. In order to adjust the architecture documentation to the lean and minimal documentation approach of agile processes, we propose a considerably shorter abstract specification document, requiring reduced documentation efforts and resulting in a lean documentation that is easier to review, update, and communicate.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>irit hadar</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>1246307506</Author_Id>
    <All_Authors>irit hadar, ethan hadar, j john harrison, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2154498177</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Less is more: Architecture documentation for agile development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614746</DOI>
    <Abstract>The use of agile development methodologies in the software industry has increased significantly over the past decade. This has led to efforts to adjust these methodologies to enterprise products and complex systems' development, and specifically to combine the requirement of minimalism with the need for well-defined up-front architecture artifacts. Nevertheless, in many cases, architecture is accompanied with extensive documentation that requires significant effort to review and maintain throughout the development lifecycle. This paper presents a case study that aims at identifying difficulties architects and other stakeholders encounter when dealing with architecture documentation in agile development. The findings indicate that the architecture specification document is usually very long, complex, and not self-explanatory. In order to adjust the architecture documentation to the lean and minimal documentation approach of agile processes, we propose a considerably shorter abstract specification document, requiring reduced documentation efforts and resulting in a lean documentation that is easier to review, update, and communicate.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>ethan hadar</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2091906286</Author_Id>
    <All_Authors>irit hadar, ethan hadar, j john harrison, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2154498177</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Less is more: Architecture documentation for agile development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614746</DOI>
    <Abstract>The use of agile development methodologies in the software industry has increased significantly over the past decade. This has led to efforts to adjust these methodologies to enterprise products and complex systems' development, and specifically to combine the requirement of minimalism with the need for well-defined up-front architecture artifacts. Nevertheless, in many cases, architecture is accompanied with extensive documentation that requires significant effort to review and maintain throughout the development lifecycle. This paper presents a case study that aims at identifying difficulties architects and other stakeholders encounter when dealing with architecture documentation in agile development. The findings indicate that the architecture specification document is usually very long, complex, and not self-explanatory. In order to adjust the architecture documentation to the lean and minimal documentation approach of agile processes, we propose a considerably shorter abstract specification document, requiring reduced documentation efforts and resulting in a lean documentation that is easier to review, update, and communicate.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>j john harrison</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2103284129</Author_Id>
    <All_Authors>irit hadar, ethan hadar, j john harrison, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2154498177</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Less is more: Architecture documentation for agile development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614746</DOI>
    <Abstract>The use of agile development methodologies in the software industry has increased significantly over the past decade. This has led to efforts to adjust these methodologies to enterprise products and complex systems' development, and specifically to combine the requirement of minimalism with the need for well-defined up-front architecture artifacts. Nevertheless, in many cases, architecture is accompanied with extensive documentation that requires significant effort to review and maintain throughout the development lifecycle. This paper presents a case study that aims at identifying difficulties architects and other stakeholders encounter when dealing with architecture documentation in agile development. The findings indicate that the architecture specification document is usually very long, complex, and not self-explanatory. In order to adjust the architecture documentation to the lean and minimal documentation approach of agile processes, we propose a considerably shorter abstract specification document, requiring reduced documentation efforts and resulting in a lean documentation that is easier to review, update, and communicate.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>sofia sherman</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of haifa</Affiliation_Name>
    <Author_Id>2127504616</Author_Id>
    <All_Authors>irit hadar, ethan hadar, j john harrison, sofia sherman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2155458933</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Augmenting social awareness in a collaborative development environment</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223009</DOI>
    <Abstract>Social awareness, that is information that a person maintains about others in a social or conversational context, can contribute to counteract the lack of teamness in global software development and strengthen trust among remote developers. We hypothesize that information shared on social media can work for distributed software teams as a surrogate of the social awareness gained during informal face to face chats. As a preliminary step we have developed a tool that extends a collaborative development environment by aggregating content from social networks and microblogs into the developer's workspace.</Abstract>
    <Abstract_Length>90</Abstract_Length>
    <Author_Name>fabio calefato</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>216142212</Author_Id>
    <All_Authors>fabio calefato, filippo lanubile</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2155458933</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>2</Citations_Count>
    <Display_Name>Augmenting social awareness in a collaborative development environment</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223009</DOI>
    <Abstract>Social awareness, that is information that a person maintains about others in a social or conversational context, can contribute to counteract the lack of teamness in global software development and strengthen trust among remote developers. We hypothesize that information shared on social media can work for distributed software teams as a surrogate of the social awareness gained during informal face to face chats. As a preliminary step we have developed a tool that extends a collaborative development environment by aggregating content from social networks and microblogs into the developer's workspace.</Abstract>
    <Abstract_Length>90</Abstract_Length>
    <Author_Name>filippo lanubile</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>226020416</Author_Id>
    <All_Authors>fabio calefato, filippo lanubile</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157291792</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>A case study of using HCI methods to improve tools for programmers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223018</DOI>
    <Abstract>For more than five years, researchers at Carnegie Mellon University have been collaborating with several SAP teams to improve the usability of SAP's developer tools and programming APIs. Much research has shown that HCI techniques can improve the tools that developers use to write software. In a recent project, we applied HCI techniques to a SAP developer tool for the SAP NetWeaver Gateway product. The SAP team building this tool uses agile software development processes, which allowed them to quickly improve the tool's usability based upon the evaluations.</Abstract>
    <Abstract_Length>88</Abstract_Length>
    <Author_Name>andrew faulring</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2071155193</Author_Id>
    <All_Authors>andrew faulring, brad a myers, keren rotenberg, yaad oren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157291792</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>A case study of using HCI methods to improve tools for programmers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223018</DOI>
    <Abstract>For more than five years, researchers at Carnegie Mellon University have been collaborating with several SAP teams to improve the usability of SAP's developer tools and programming APIs. Much research has shown that HCI techniques can improve the tools that developers use to write software. In a recent project, we applied HCI techniques to a SAP developer tool for the SAP NetWeaver Gateway product. The SAP team building this tool uses agile software development processes, which allowed them to quickly improve the tool's usability based upon the evaluations.</Abstract>
    <Abstract_Length>88</Abstract_Length>
    <Author_Name>brad a myers</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2117127927</Author_Id>
    <All_Authors>andrew faulring, brad a myers, keren rotenberg, yaad oren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157291792</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>A case study of using HCI methods to improve tools for programmers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223018</DOI>
    <Abstract>For more than five years, researchers at Carnegie Mellon University have been collaborating with several SAP teams to improve the usability of SAP's developer tools and programming APIs. Much research has shown that HCI techniques can improve the tools that developers use to write software. In a recent project, we applied HCI techniques to a SAP developer tool for the SAP NetWeaver Gateway product. The SAP team building this tool uses agile software development processes, which allowed them to quickly improve the tool's usability based upon the evaluations.</Abstract>
    <Abstract_Length>88</Abstract_Length>
    <Author_Name>keren rotenberg</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2568082673</Author_Id>
    <All_Authors>andrew faulring, brad a myers, keren rotenberg, yaad oren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157291792</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>5</Citations_Count>
    <Display_Name>A case study of using HCI methods to improve tools for programmers</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223018</DOI>
    <Abstract>For more than five years, researchers at Carnegie Mellon University have been collaborating with several SAP teams to improve the usability of SAP's developer tools and programming APIs. Much research has shown that HCI techniques can improve the tools that developers use to write software. In a recent project, we applied HCI techniques to a SAP developer tool for the SAP NetWeaver Gateway product. The SAP team building this tool uses agile software development processes, which allowed them to quickly improve the tool's usability based upon the evaluations.</Abstract>
    <Abstract_Length>88</Abstract_Length>
    <Author_Name>yaad oren</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2568146628</Author_Id>
    <All_Authors>andrew faulring, brad a myers, keren rotenberg, yaad oren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157693603</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Personalities, cultures and software modeling: Questions, scenarios and research directions</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071406</DOI>
    <Abstract>Several evolutions in software engineering (SE) relate to the development of a reliable communication process among the project stakeholders. The models resulting from these improvements are the key instruments of communication in SE. There are studies that relate several problems in SE to user-engineers interactions during the modeling process. In addition to the usual challenges related to the technological issues of software modeling, new problems have appeared due to the presence of a multinational workforce. Specifically, people with distinct cultural identities must work together and, independently from their personal values and beliefs, they must develop common objectives. Consequently, this paper argues that the personality and cultural identity of project team members might be unconsciously affecting the SE process in a much greater way than is currently believed. Moreover, a research framework for investigating the influence of individual identities in the modelling techniques can present new perspectives for improving SE outcomes.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>alberto g canen</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>federal university of rio de janeiro</Affiliation_Name>
    <Author_Id>1848361624</Author_Id>
    <All_Authors>alberto g canen, miriam a m capretz, americo b cunha</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157693603</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Personalities, cultures and software modeling: Questions, scenarios and research directions</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071406</DOI>
    <Abstract>Several evolutions in software engineering (SE) relate to the development of a reliable communication process among the project stakeholders. The models resulting from these improvements are the key instruments of communication in SE. There are studies that relate several problems in SE to user-engineers interactions during the modeling process. In addition to the usual challenges related to the technological issues of software modeling, new problems have appeared due to the presence of a multinational workforce. Specifically, people with distinct cultural identities must work together and, independently from their personal values and beliefs, they must develop common objectives. Consequently, this paper argues that the personality and cultural identity of project team members might be unconsciously affecting the SE process in a much greater way than is currently believed. Moreover, a research framework for investigating the influence of individual identities in the modelling techniques can present new perspectives for improving SE outcomes.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>miriam a m capretz</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of western ontario</Affiliation_Name>
    <Author_Id>2012236496</Author_Id>
    <All_Authors>alberto g canen, miriam a m capretz, americo b cunha</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2157693603</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>4</Citations_Count>
    <Display_Name>Personalities, cultures and software modeling: Questions, scenarios and research directions</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071406</DOI>
    <Abstract>Several evolutions in software engineering (SE) relate to the development of a reliable communication process among the project stakeholders. The models resulting from these improvements are the key instruments of communication in SE. There are studies that relate several problems in SE to user-engineers interactions during the modeling process. In addition to the usual challenges related to the technological issues of software modeling, new problems have appeared due to the presence of a multinational workforce. Specifically, people with distinct cultural identities must work together and, independently from their personal values and beliefs, they must develop common objectives. Consequently, this paper argues that the personality and cultural identity of project team members might be unconsciously affecting the SE process in a much greater way than is currently believed. Moreover, a research framework for investigating the influence of individual identities in the modelling techniques can present new perspectives for improving SE outcomes.</Abstract>
    <Abstract_Length>150</Abstract_Length>
    <Author_Name>americo b cunha</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>federal university of rio de janeiro</Affiliation_Name>
    <Author_Id>2219056228</Author_Id>
    <All_Authors>alberto g canen, miriam a m capretz, americo b cunha</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160109666</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>ProxiScientia: toward real-time visualization of task and developer dependencies in collaborating software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223024</DOI>
    <Abstract>This paper introduces ProxiScientia, a visualization tool that provides awareness support to developers, as they engage in collaborative software development activities. ProxiScientia leverages streams of fine-grained events that are generated by team members as they interact with software artifacts in their development environments. The main goal of the tool is to make each developer aware of coordination needs and opportunities as they arise, by depicting ego-centered views of the developers and tasks that most closely impact their work, and showing how they change in real time. In this paper, we illustrate the conceptualization of ProxiScientia and discuss its initial evaluation.</Abstract>
    <Abstract_Length>100</Abstract_Length>
    <Author_Name>kelly blincoe</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>drexel university</Affiliation_Name>
    <Author_Id>1975810399</Author_Id>
    <All_Authors>kelly blincoe, daniela damian, adrian schroter, arber borici, giuseppe valetto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160109666</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>ProxiScientia: toward real-time visualization of task and developer dependencies in collaborating software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223024</DOI>
    <Abstract>This paper introduces ProxiScientia, a visualization tool that provides awareness support to developers, as they engage in collaborative software development activities. ProxiScientia leverages streams of fine-grained events that are generated by team members as they interact with software artifacts in their development environments. The main goal of the tool is to make each developer aware of coordination needs and opportunities as they arise, by depicting ego-centered views of the developers and tasks that most closely impact their work, and showing how they change in real time. In this paper, we illustrate the conceptualization of ProxiScientia and discuss its initial evaluation.</Abstract>
    <Abstract_Length>100</Abstract_Length>
    <Author_Name>daniela damian</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2005263414</Author_Id>
    <All_Authors>kelly blincoe, daniela damian, adrian schroter, arber borici, giuseppe valetto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160109666</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>ProxiScientia: toward real-time visualization of task and developer dependencies in collaborating software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223024</DOI>
    <Abstract>This paper introduces ProxiScientia, a visualization tool that provides awareness support to developers, as they engage in collaborative software development activities. ProxiScientia leverages streams of fine-grained events that are generated by team members as they interact with software artifacts in their development environments. The main goal of the tool is to make each developer aware of coordination needs and opportunities as they arise, by depicting ego-centered views of the developers and tasks that most closely impact their work, and showing how they change in real time. In this paper, we illustrate the conceptualization of ProxiScientia and discuss its initial evaluation.</Abstract>
    <Abstract_Length>100</Abstract_Length>
    <Author_Name>adrian schroter</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2046606868</Author_Id>
    <All_Authors>kelly blincoe, daniela damian, adrian schroter, arber borici, giuseppe valetto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160109666</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>ProxiScientia: toward real-time visualization of task and developer dependencies in collaborating software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223024</DOI>
    <Abstract>This paper introduces ProxiScientia, a visualization tool that provides awareness support to developers, as they engage in collaborative software development activities. ProxiScientia leverages streams of fine-grained events that are generated by team members as they interact with software artifacts in their development environments. The main goal of the tool is to make each developer aware of coordination needs and opportunities as they arise, by depicting ego-centered views of the developers and tasks that most closely impact their work, and showing how they change in real time. In this paper, we illustrate the conceptualization of ProxiScientia and discuss its initial evaluation.</Abstract>
    <Abstract_Length>100</Abstract_Length>
    <Author_Name>arber borici</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of victoria</Affiliation_Name>
    <Author_Id>2075368569</Author_Id>
    <All_Authors>kelly blincoe, daniela damian, adrian schroter, arber borici, giuseppe valetto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160109666</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>ProxiScientia: toward real-time visualization of task and developer dependencies in collaborating software development teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223024</DOI>
    <Abstract>This paper introduces ProxiScientia, a visualization tool that provides awareness support to developers, as they engage in collaborative software development activities. ProxiScientia leverages streams of fine-grained events that are generated by team members as they interact with software artifacts in their development environments. The main goal of the tool is to make each developer aware of coordination needs and opportunities as they arise, by depicting ego-centered views of the developers and tasks that most closely impact their work, and showing how they change in real time. In this paper, we illustrate the conceptualization of ProxiScientia and discuss its initial evaluation.</Abstract>
    <Abstract_Length>100</Abstract_Length>
    <Author_Name>giuseppe valetto</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>drexel university</Affiliation_Name>
    <Author_Id>2250233727</Author_Id>
    <All_Authors>kelly blincoe, daniela damian, adrian schroter, arber borici, giuseppe valetto</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160438957</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>A method for prioritizing end-user feedback for requirements engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223020</DOI>
    <Abstract>Today's software-intensive systems exhibit an increasing complexity due to a broad spectrum of technical and socio-technical aspects leading to rapid changes in requirements. To monitor these changes, we developed the ConTexter feedback system that enables end-user feedback submitted as narrative text enriched with multimedia attachments. Analyzing received end-user feedback is a work-intensive task. Thus, problems and changes in end-users' needs reach responsible requirements engineers after a significant delay. Automatic techniques are required to support this tasks. In this paper, we investigate whether end-user feedback can be prioritized automatically by combining keyword-based information retrieval and descriptive statistics. Moreover, we show in an evaluation that the obtained results are reasonable.</Abstract>
    <Abstract_Length>108</Abstract_Length>
    <Author_Name>stefan gartner</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>leibniz university of hanover</Affiliation_Name>
    <Author_Id>2018179847</Author_Id>
    <All_Authors>stefan gartner, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2160438957</Paper_API_Id>
    <Paper_Year>2012</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>A method for prioritizing end-user feedback for requirements engineering</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2012.6223020</DOI>
    <Abstract>Today's software-intensive systems exhibit an increasing complexity due to a broad spectrum of technical and socio-technical aspects leading to rapid changes in requirements. To monitor these changes, we developed the ConTexter feedback system that enables end-user feedback submitted as narrative text enriched with multimedia attachments. Analyzing received end-user feedback is a work-intensive task. Thus, problems and changes in end-users' needs reach responsible requirements engineers after a significant delay. Automatic techniques are required to support this tasks. In this paper, we investigate whether end-user feedback can be prioritized automatically by combining keyword-based information retrieval and descriptive statistics. Moreover, we show in an evaluation that the obtained results are reasonable.</Abstract>
    <Abstract_Length>108</Abstract_Length>
    <Author_Name>kurt schneider</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>leibniz university of hanover</Affiliation_Name>
    <Author_Id>2181639357</Author_Id>
    <All_Authors>stefan gartner, kurt schneider</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2161584596</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>23</Citations_Count>
    <Display_Name>Coordination in large-scale software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071401</DOI>
    <Abstract>Large-scale software development requires coordination within and between very large engineering teams which may be located in different buildings, on different company campuses, and in different time zones. From a survey answered by 775 Microsoft software engineers, we learned how work was coordinated within and between teams and how engineers felt about their success at these tasks. The respondents revealed that the most common objects of coordination are schedules and features, not code or interfaces, and that more communication and personal contact worked better to make interactions between teams go more smoothly.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>andrew begel</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>1970259043</Author_Id>
    <All_Authors>andrew begel, nachiappan nagappan, christopher poile, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2161584596</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>23</Citations_Count>
    <Display_Name>Coordination in large-scale software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071401</DOI>
    <Abstract>Large-scale software development requires coordination within and between very large engineering teams which may be located in different buildings, on different company campuses, and in different time zones. From a survey answered by 775 Microsoft software engineers, we learned how work was coordinated within and between teams and how engineers felt about their success at these tasks. The respondents revealed that the most common objects of coordination are schedules and features, not code or interfaces, and that more communication and personal contact worked better to make interactions between teams go more smoothly.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>nachiappan nagappan</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2031695674</Author_Id>
    <All_Authors>andrew begel, nachiappan nagappan, christopher poile, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2161584596</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>23</Citations_Count>
    <Display_Name>Coordination in large-scale software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071401</DOI>
    <Abstract>Large-scale software development requires coordination within and between very large engineering teams which may be located in different buildings, on different company campuses, and in different time zones. From a survey answered by 775 Microsoft software engineers, we learned how work was coordinated within and between teams and how engineers felt about their success at these tasks. The respondents revealed that the most common objects of coordination are schedules and features, not code or interfaces, and that more communication and personal contact worked better to make interactions between teams go more smoothly.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>christopher poile</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of saskatchewan</Affiliation_Name>
    <Author_Id>2224020930</Author_Id>
    <All_Authors>andrew begel, nachiappan nagappan, christopher poile, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2161584596</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>23</Citations_Count>
    <Display_Name>Coordination in large-scale software teams</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071401</DOI>
    <Abstract>Large-scale software development requires coordination within and between very large engineering teams which may be located in different buildings, on different company campuses, and in different time zones. From a survey answered by 775 Microsoft software engineers, we learned how work was coordinated within and between teams and how engineers felt about their success at these tasks. The respondents revealed that the most common objects of coordination are schedules and features, not code or interfaces, and that more communication and personal contact worked better to make interactions between teams go more smoothly.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>lucas layman</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>national research council</Affiliation_Name>
    <Author_Id>2559041604</Author_Id>
    <All_Authors>andrew begel, nachiappan nagappan, christopher poile, lucas layman</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167440525</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Designing software for unfamiliar domains</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071405</DOI>
    <Abstract>In recent years, software has become indispensable in complex domains such as science, engineering, biomedicine, and finance. Unfortunately, software developers and user researchers, who are usually experts in programming and Human-Computer Interaction (HCI) methods, respectively, often find that the insight needed to design for complex domains only comes with years of domain experience. How can everyone on a software design team acquire just enough knowledge to design effective software, especially user interfaces, without having to become domain experts? We are performing a series of studies to investigate this question, with the ultimate goal of designing tools to help software teams better capture, manage and explore domain knowledge.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>jacob o wobbrock</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>information school</Affiliation_Name>
    <Author_Id>318516288</Author_Id>
    <All_Authors>jacob o wobbrock, parmit k chilana, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167440525</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Designing software for unfamiliar domains</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071405</DOI>
    <Abstract>In recent years, software has become indispensable in complex domains such as science, engineering, biomedicine, and finance. Unfortunately, software developers and user researchers, who are usually experts in programming and Human-Computer Interaction (HCI) methods, respectively, often find that the insight needed to design for complex domains only comes with years of domain experience. How can everyone on a software design team acquire just enough knowledge to design effective software, especially user interfaces, without having to become domain experts? We are performing a series of studies to investigate this question, with the ultimate goal of designing tools to help software teams better capture, manage and explore domain knowledge.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>parmit k chilana</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>information school</Affiliation_Name>
    <Author_Id>2001101459</Author_Id>
    <All_Authors>jacob o wobbrock, parmit k chilana, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167440525</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Designing software for unfamiliar domains</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071405</DOI>
    <Abstract>In recent years, software has become indispensable in complex domains such as science, engineering, biomedicine, and finance. Unfortunately, software developers and user researchers, who are usually experts in programming and Human-Computer Interaction (HCI) methods, respectively, often find that the insight needed to design for complex domains only comes with years of domain experience. How can everyone on a software design team acquire just enough knowledge to design effective software, especially user interfaces, without having to become domain experts? We are performing a series of studies to investigate this question, with the ultimate goal of designing tools to help software teams better capture, manage and explore domain knowledge.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>andrew j ko</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>information school</Affiliation_Name>
    <Author_Id>2147219881</Author_Id>
    <All_Authors>jacob o wobbrock, parmit k chilana, andrew j ko</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167784654</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Cooperation wordle using pre-attentive processing techniques</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614732</DOI>
    <Abstract>Developer turnover can result in a major problem when developing software. Senior developers leaving the team cause a loss of knowledge; on the other hand, new developers need some time to become fully productive. In this paper, we propose to use a wordle to visualize quickly the level of cooperation of the team in the project. Each word is the name of a class; the size of the word depends on the total effort spent by the team on the corresponding class, and the color is determined by the percentage of team working on the class. We applied pre-attentive processing techniques in the designing phase, so that the user can find out quickly those classes requiring high effort of a small part of the team. This information allows to take corrective actions, such as re-allocating some resources. Thus, this visualization can help in mitigating the knowledge loss and the slowing down due to turnover. On the base of our wordle, we describe four possible cases of development activities. A sample application of our visualization, in the context of a multi-developer project, shows concretely its potentials. We checked, through simulations, that the interpretation of our wordles remains the same for color blind users.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>alberto sillitti</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>120576184</Author_Id>
    <All_Authors>alberto sillitti, ilenia fronza, andrea janes, stefano trebeschi, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167784654</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Cooperation wordle using pre-attentive processing techniques</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614732</DOI>
    <Abstract>Developer turnover can result in a major problem when developing software. Senior developers leaving the team cause a loss of knowledge; on the other hand, new developers need some time to become fully productive. In this paper, we propose to use a wordle to visualize quickly the level of cooperation of the team in the project. Each word is the name of a class; the size of the word depends on the total effort spent by the team on the corresponding class, and the color is determined by the percentage of team working on the class. We applied pre-attentive processing techniques in the designing phase, so that the user can find out quickly those classes requiring high effort of a small part of the team. This information allows to take corrective actions, such as re-allocating some resources. Thus, this visualization can help in mitigating the knowledge loss and the slowing down due to turnover. On the base of our wordle, we describe four possible cases of development activities. A sample application of our visualization, in the context of a multi-developer project, shows concretely its potentials. We checked, through simulations, that the interpretation of our wordles remains the same for color blind users.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>ilenia fronza</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>247341813</Author_Id>
    <All_Authors>alberto sillitti, ilenia fronza, andrea janes, stefano trebeschi, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167784654</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Cooperation wordle using pre-attentive processing techniques</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614732</DOI>
    <Abstract>Developer turnover can result in a major problem when developing software. Senior developers leaving the team cause a loss of knowledge; on the other hand, new developers need some time to become fully productive. In this paper, we propose to use a wordle to visualize quickly the level of cooperation of the team in the project. Each word is the name of a class; the size of the word depends on the total effort spent by the team on the corresponding class, and the color is determined by the percentage of team working on the class. We applied pre-attentive processing techniques in the designing phase, so that the user can find out quickly those classes requiring high effort of a small part of the team. This information allows to take corrective actions, such as re-allocating some resources. Thus, this visualization can help in mitigating the knowledge loss and the slowing down due to turnover. On the base of our wordle, we describe four possible cases of development activities. A sample application of our visualization, in the context of a multi-developer project, shows concretely its potentials. We checked, through simulations, that the interpretation of our wordles remains the same for color blind users.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>andrea janes</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>2019551114</Author_Id>
    <All_Authors>alberto sillitti, ilenia fronza, andrea janes, stefano trebeschi, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167784654</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Cooperation wordle using pre-attentive processing techniques</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614732</DOI>
    <Abstract>Developer turnover can result in a major problem when developing software. Senior developers leaving the team cause a loss of knowledge; on the other hand, new developers need some time to become fully productive. In this paper, we propose to use a wordle to visualize quickly the level of cooperation of the team in the project. Each word is the name of a class; the size of the word depends on the total effort spent by the team on the corresponding class, and the color is determined by the percentage of team working on the class. We applied pre-attentive processing techniques in the designing phase, so that the user can find out quickly those classes requiring high effort of a small part of the team. This information allows to take corrective actions, such as re-allocating some resources. Thus, this visualization can help in mitigating the knowledge loss and the slowing down due to turnover. On the base of our wordle, we describe four possible cases of development activities. A sample application of our visualization, in the context of a multi-developer project, shows concretely its potentials. We checked, through simulations, that the interpretation of our wordles remains the same for color blind users.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>stefano trebeschi</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>2227463969</Author_Id>
    <All_Authors>alberto sillitti, ilenia fronza, andrea janes, stefano trebeschi, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2167784654</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>7</Citations_Count>
    <Display_Name>Cooperation wordle using pre-attentive processing techniques</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614732</DOI>
    <Abstract>Developer turnover can result in a major problem when developing software. Senior developers leaving the team cause a loss of knowledge; on the other hand, new developers need some time to become fully productive. In this paper, we propose to use a wordle to visualize quickly the level of cooperation of the team in the project. Each word is the name of a class; the size of the word depends on the total effort spent by the team on the corresponding class, and the color is determined by the percentage of team working on the class. We applied pre-attentive processing techniques in the designing phase, so that the user can find out quickly those classes requiring high effort of a small part of the team. This information allows to take corrective actions, such as re-allocating some resources. Thus, this visualization can help in mitigating the knowledge loss and the slowing down due to turnover. On the base of our wordle, we describe four possible cases of development activities. A sample application of our visualization, in the context of a multi-developer project, shows concretely its potentials. We checked, through simulations, that the interpretation of our wordles remains the same for color blind users.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>giancarlo succi</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>free university of bozen bolzano</Affiliation_Name>
    <Author_Id>2310608531</Author_Id>
    <All_Authors>alberto sillitti, ilenia fronza, andrea janes, stefano trebeschi, giancarlo succi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168612058</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Improving code review effectiveness through reviewer recommendations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593705</DOI>
    <Abstract>Effectively performing code review increases the quality of software and reduces occurrence of defects. However, this requires reviewers with experiences and deep understandings of system code. Manual selection of such reviewers can be a costly and time-consuming task. To reduce this cost, we propose a reviewer recommendation algorithm determining file path similarity called FPS algorithm. Using three OSS projects as case studies, FPS algorithm was accurate up to 77.97%, which significantly outperformed the previous approach.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>patanamon thongtanunam</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>952338112</Author_Id>
    <All_Authors>patanamon thongtanunam, raula gaikovina kula, hajimu iida, norihiro yoshida, ana erika camargo cruz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168612058</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Improving code review effectiveness through reviewer recommendations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593705</DOI>
    <Abstract>Effectively performing code review increases the quality of software and reduces occurrence of defects. However, this requires reviewers with experiences and deep understandings of system code. Manual selection of such reviewers can be a costly and time-consuming task. To reduce this cost, we propose a reviewer recommendation algorithm determining file path similarity called FPS algorithm. Using three OSS projects as case studies, FPS algorithm was accurate up to 77.97%, which significantly outperformed the previous approach.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>raula gaikovina kula</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>osaka university</Affiliation_Name>
    <Author_Id>1977004128</Author_Id>
    <All_Authors>patanamon thongtanunam, raula gaikovina kula, hajimu iida, norihiro yoshida, ana erika camargo cruz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168612058</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Improving code review effectiveness through reviewer recommendations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593705</DOI>
    <Abstract>Effectively performing code review increases the quality of software and reduces occurrence of defects. However, this requires reviewers with experiences and deep understandings of system code. Manual selection of such reviewers can be a costly and time-consuming task. To reduce this cost, we propose a reviewer recommendation algorithm determining file path similarity called FPS algorithm. Using three OSS projects as case studies, FPS algorithm was accurate up to 77.97%, which significantly outperformed the previous approach.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>hajimu iida</Author_Name>
    <Author_Position>5</Author_Position>
    <Author_Id>1992477267</Author_Id>
    <All_Authors>patanamon thongtanunam, raula gaikovina kula, hajimu iida, norihiro yoshida, ana erika camargo cruz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168612058</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Improving code review effectiveness through reviewer recommendations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593705</DOI>
    <Abstract>Effectively performing code review increases the quality of software and reduces occurrence of defects. However, this requires reviewers with experiences and deep understandings of system code. Manual selection of such reviewers can be a costly and time-consuming task. To reduce this cost, we propose a reviewer recommendation algorithm determining file path similarity called FPS algorithm. Using three OSS projects as case studies, FPS algorithm was accurate up to 77.97%, which significantly outperformed the previous approach.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>norihiro yoshida</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2133694664</Author_Id>
    <All_Authors>patanamon thongtanunam, raula gaikovina kula, hajimu iida, norihiro yoshida, ana erika camargo cruz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168612058</Paper_API_Id>
    <Paper_Year>2014</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Improving code review effectiveness through reviewer recommendations</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2593702.2593705</DOI>
    <Abstract>Effectively performing code review increases the quality of software and reduces occurrence of defects. However, this requires reviewers with experiences and deep understandings of system code. Manual selection of such reviewers can be a costly and time-consuming task. To reduce this cost, we propose a reviewer recommendation algorithm determining file path similarity called FPS algorithm. Using three OSS projects as case studies, FPS algorithm was accurate up to 77.97%, which significantly outperformed the previous approach.</Abstract>
    <Abstract_Length>75</Abstract_Length>
    <Author_Name>ana erika camargo cruz</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2135518765</Author_Id>
    <All_Authors>patanamon thongtanunam, raula gaikovina kula, hajimu iida, norihiro yoshida, ana erika camargo cruz</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168641488</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>An initial investigation of software practitioners' motivation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071418</DOI>
    <Abstract>Motivation is one of the most frequently cited causes of software development project failure, reportedly impacting on project productivity, software quality and the overall success of the project. Much of the previous research into software engineers' motivation cites the job itself as the main motivator, yet little research has focused on why software engineers stay in the profession. This paper reports on an empirical investigation with experienced software practitioners which focuses on this issue and compares our findings with existing work. The results show that aspects of ‘people’ are important in job satisfaction and project choice, while a practitioner's standing in the community is a key influence on whether or not he/she will stay in software engineering; aspects of ‘creativity’ are mentioned most often as making software development worthwhile. When asked to identify three key elements of motivation, aspects of ‘people’ were mentioned the most often.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>helen sharp</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>open university</Affiliation_Name>
    <Author_Id>2104824474</Author_Id>
    <All_Authors>helen sharp, tracy hall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168641488</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>9</Citations_Count>
    <Display_Name>An initial investigation of software practitioners' motivation</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071418</DOI>
    <Abstract>Motivation is one of the most frequently cited causes of software development project failure, reportedly impacting on project productivity, software quality and the overall success of the project. Much of the previous research into software engineers' motivation cites the job itself as the main motivator, yet little research has focused on why software engineers stay in the profession. This paper reports on an empirical investigation with experienced software practitioners which focuses on this issue and compares our findings with existing work. The results show that aspects of ‘people’ are important in job satisfaction and project choice, while a practitioner's standing in the community is a key influence on whether or not he/she will stay in software engineering; aspects of ‘creativity’ are mentioned most often as making software development worthwhile. When asked to identify three key elements of motivation, aspects of ‘people’ were mentioned the most often.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>tracy hall</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>brunel university london</Affiliation_Name>
    <Author_Id>2132732281</Author_Id>
    <All_Authors>helen sharp, tracy hall</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168926252</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Exception handling negligence due to intra-individual goal conflicts</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071417</DOI>
    <Abstract>Despite research to provide support for improving the usage of exception handling in programs, studies show that exception handling is neglected. In previous work, we interviewed novice developers to understand their problems when dealing with exceptions. The results show that these developers gave exception handling low priority and they thought that use of exception handling was forced on them. Thus, developers adopted an ignore-for-now approach for dealing with exceptions. In this paper, we present the results of our investigation of this problem of neglecting exception handling. We conducted a literature study to understand the psychological aspects of the problem that may be affecting the appropriate usage of exception handling in programs. Based on our investigation that was supported by this study, we believe that developers have intra-individual conflicting goals when they are expected to design and code the core functionality as well as the exception handling functionality. We recommend some strategies to address this problem of conflicting goals at academic and industry levels.</Abstract>
    <Abstract_Length>163</Abstract_Length>
    <Author_Name>mary jean harrold</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>georgia institute of technology</Affiliation_Name>
    <Author_Id>421534652</Author_Id>
    <All_Authors>mary jean harrold, hina shah</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168926252</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>3</Citations_Count>
    <Display_Name>Exception handling negligence due to intra-individual goal conflicts</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071417</DOI>
    <Abstract>Despite research to provide support for improving the usage of exception handling in programs, studies show that exception handling is neglected. In previous work, we interviewed novice developers to understand their problems when dealing with exceptions. The results show that these developers gave exception handling low priority and they thought that use of exception handling was forced on them. Thus, developers adopted an ignore-for-now approach for dealing with exceptions. In this paper, we present the results of our investigation of this problem of neglecting exception handling. We conducted a literature study to understand the psychological aspects of the problem that may be affecting the appropriate usage of exception handling in programs. Based on our investigation that was supported by this study, we believe that developers have intra-individual conflicting goals when they are expected to design and code the core functionality as well as the exception handling functionality. We recommend some strategies to address this problem of conflicting goals at academic and industry levels.</Abstract>
    <Abstract_Length>163</Abstract_Length>
    <Author_Name>hina shah</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>georgia institute of technology</Affiliation_Name>
    <Author_Id>2111356176</Author_Id>
    <All_Authors>mary jean harrold, hina shah</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168947376</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Toward social-technical code search</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614741</DOI>
    <Abstract>With the vast amount of source code that is publicly available today, searching for code has become an integral part of the programming experience. While a few dedicated code search engines are available, we contend in this paper that they have not nearly reached their full potential. Particularly, we believe that it is necessary for code search engines to not merely index code, but also construct a rich network of social-technical information that surrounds that code. With such information, much richer queries can be issued and novel interfaces can be built through which the results of such queries can be explored more intuitively. We make the case for social-technical code search, introduce six categories of social-technical information and how it would enhance search, and briefly introduce CodeExchange, our prototype platform we are developing to explore social-technical code search.</Abstract>
    <Abstract_Length>138</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>andre van der hoek, lee martie</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2168947376</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Toward social-technical code search</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2013.6614741</DOI>
    <Abstract>With the vast amount of source code that is publicly available today, searching for code has become an integral part of the programming experience. While a few dedicated code search engines are available, we contend in this paper that they have not nearly reached their full potential. Particularly, we believe that it is necessary for code search engines to not merely index code, but also construct a rich network of social-technical information that surrounds that code. With such information, much richer queries can be issued and novel interfaces can be built through which the results of such queries can be explored more intuitively. We make the case for social-technical code search, introduce six categories of social-technical information and how it would enhance search, and briefly introduce CodeExchange, our prototype platform we are developing to explore social-technical code search.</Abstract>
    <Abstract_Length>138</Abstract_Length>
    <Author_Name>lee martie</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2223299881</Author_Id>
    <All_Authors>andre van der hoek, lee martie</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2169060050</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>A theory of branches as goals and virtual teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984655</DOI>
    <Abstract>A common method of managing the complexity of both technical and organizational relationships in a large software project is to use branches within the source code management system to partition the work into teams and tasks. We claim that the files modified on a branch are changed together in a cohesive way to accomplish some task such as adding a feature, fixing a related set of bugs, or implementing a subsystem, which we collectively refer to as the goal of the branch. Further, the developers that work on a branch represent a virtual team. In this paper, we develop a theory of the relationship between goals and virtual teams on different branches. Due to expertise, ownership, and awareness concerns, we expect that if two branches have similar goals, they will also have similar virtual teams or be at risk for communication and coordination breakdowns with the accompanying negative effects. In contrast, we do not expect the converse to always be true. In the first step towards an actionable result, we have evaluated this theory empirically on two releases of the Windows operating system and found support in both.</Abstract>
    <Abstract_Length>188</Abstract_Length>
    <Author_Name>thomas zimmermann</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2014339847</Author_Id>
    <All_Authors>thomas zimmermann, christian bird, alex teterev</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2169060050</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>A theory of branches as goals and virtual teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984655</DOI>
    <Abstract>A common method of managing the complexity of both technical and organizational relationships in a large software project is to use branches within the source code management system to partition the work into teams and tasks. We claim that the files modified on a branch are changed together in a cohesive way to accomplish some task such as adding a feature, fixing a related set of bugs, or implementing a subsystem, which we collectively refer to as the goal of the branch. Further, the developers that work on a branch represent a virtual team. In this paper, we develop a theory of the relationship between goals and virtual teams on different branches. Due to expertise, ownership, and awareness concerns, we expect that if two branches have similar goals, they will also have similar virtual teams or be at risk for communication and coordination breakdowns with the accompanying negative effects. In contrast, we do not expect the converse to always be true. In the first step towards an actionable result, we have evaluated this theory empirically on two releases of the Windows operating system and found support in both.</Abstract>
    <Abstract_Length>188</Abstract_Length>
    <Author_Name>christian bird</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2142366035</Author_Id>
    <All_Authors>thomas zimmermann, christian bird, alex teterev</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2169060050</Paper_API_Id>
    <Paper_Year>2011</Paper_Year>
    <Citations_Count>10</Citations_Count>
    <Display_Name>A theory of branches as goals and virtual teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/1984642.1984655</DOI>
    <Abstract>A common method of managing the complexity of both technical and organizational relationships in a large software project is to use branches within the source code management system to partition the work into teams and tasks. We claim that the files modified on a branch are changed together in a cohesive way to accomplish some task such as adding a feature, fixing a related set of bugs, or implementing a subsystem, which we collectively refer to as the goal of the branch. Further, the developers that work on a branch represent a virtual team. In this paper, we develop a theory of the relationship between goals and virtual teams on different branches. Due to expertise, ownership, and awareness concerns, we expect that if two branches have similar goals, they will also have similar virtual teams or be at risk for communication and coordination breakdowns with the accompanying negative effects. In contrast, we do not expect the converse to always be true. In the first step towards an actionable result, we have evaluated this theory empirically on two releases of the Windows operating system and found support in both.</Abstract>
    <Abstract_Length>188</Abstract_Length>
    <Author_Name>alex teterev</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2228911127</Author_Id>
    <All_Authors>thomas zimmermann, christian bird, alex teterev</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2171623515</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Distributed side-by-side programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071410</DOI>
    <Abstract>Recent work has proposed a variation of pair programming called side-by-side programming, wherein two programmers, sitting next to each other and using different workstations, work together on the same task. We have defined a distributed approximation of this idea and implemented it in both a compiled and interpretive environment. Our experiments with these implementations provide several new preliminary results regarding different aspects of (distributed) side-by-side programming.</Abstract>
    <Abstract_Length>66</Abstract_Length>
    <Author_Name>gautam shroff</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2080757065</Author_Id>
    <All_Authors>gautam shroff, puneet agarwal, rajesh hegde, prasun dewan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2171623515</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Distributed side-by-side programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071410</DOI>
    <Abstract>Recent work has proposed a variation of pair programming called side-by-side programming, wherein two programmers, sitting next to each other and using different workstations, work together on the same task. We have defined a distributed approximation of this idea and implemented it in both a compiled and interpretive environment. Our experiments with these implementations provide several new preliminary results regarding different aspects of (distributed) side-by-side programming.</Abstract>
    <Abstract_Length>66</Abstract_Length>
    <Author_Name>puneet agarwal</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>tata consultancy services</Affiliation_Name>
    <Author_Id>2116856142</Author_Id>
    <All_Authors>gautam shroff, puneet agarwal, rajesh hegde, prasun dewan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2171623515</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Distributed side-by-side programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071410</DOI>
    <Abstract>Recent work has proposed a variation of pair programming called side-by-side programming, wherein two programmers, sitting next to each other and using different workstations, work together on the same task. We have defined a distributed approximation of this idea and implemented it in both a compiled and interpretive environment. Our experiments with these implementations provide several new preliminary results regarding different aspects of (distributed) side-by-side programming.</Abstract>
    <Abstract_Length>66</Abstract_Length>
    <Author_Name>rajesh hegde</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2145462876</Author_Id>
    <All_Authors>gautam shroff, puneet agarwal, rajesh hegde, prasun dewan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2171623515</Paper_API_Id>
    <Paper_Year>2009</Paper_Year>
    <Citations_Count>8</Citations_Count>
    <Display_Name>Distributed side-by-side programming</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <DOI>10.1109/CHASE.2009.5071410</DOI>
    <Abstract>Recent work has proposed a variation of pair programming called side-by-side programming, wherein two programmers, sitting next to each other and using different workstations, work together on the same task. We have defined a distributed approximation of this idea and implemented it in both a compiled and interpretive environment. Our experiments with these implementations provide several new preliminary results regarding different aspects of (distributed) side-by-side programming.</Abstract>
    <Abstract_Length>66</Abstract_Length>
    <Author_Name>prasun dewan</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of north carolina system</Affiliation_Name>
    <Author_Id>2507704707</Author_Id>
    <All_Authors>gautam shroff, puneet agarwal, rajesh hegde, prasun dewan</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2289339846</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Finding relationships between socio-technical aspects and personality traits by mining developer e-mails</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897611</DOI>
    <Abstract>Personality traits influence most, if not all, of the human activities, from those as natural as the way people walk, talk, dress and write to those most complex as the way they interact with others. Most importantly, personality influences the way people make decisions including, in the case of developers, the criteria they consider when selecting a software project they want to participate. Most of the works that study the influence of social, technical and human factors in software development projects have been focused on the impact of communications in software quality. For instance, on identifying predictors to detect files that may contain bugs before releasing an enhanced version of a software product. Only a few of these works focus on the analysis of personality traits of developers with commit permissions (committers) in Free/Libre and Open-Source Software projects and their relationship with the software artifacts they interact with. This paper presents an approach, based on the automatic recognition of personality traits from e-mails sent by committers in FLOSS projects, to uncover relationships between the social and technical aspects that occur during the software development process. Our experimental results suggest the existence of some relationships among personality traits projected by the committers through their e-mails and the social (communication) and technical activities they undertake. This work is a preliminary study aimed at supporting the setting up of efficient work teams in software development projects based on an appropriate mix of stakeholders taking into account their personality traits.</Abstract>
    <Abstract_Length>246</Abstract_Length>
    <Author_Name>jairo aponte</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>national university of colombia</Affiliation_Name>
    <Author_Id>2142881748</Author_Id>
    <All_Authors>jairo aponte, fabio a gonzalez, jorge e camargo, oscar hernan parumapabon, felipe restrepocalle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2289339846</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Finding relationships between socio-technical aspects and personality traits by mining developer e-mails</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897611</DOI>
    <Abstract>Personality traits influence most, if not all, of the human activities, from those as natural as the way people walk, talk, dress and write to those most complex as the way they interact with others. Most importantly, personality influences the way people make decisions including, in the case of developers, the criteria they consider when selecting a software project they want to participate. Most of the works that study the influence of social, technical and human factors in software development projects have been focused on the impact of communications in software quality. For instance, on identifying predictors to detect files that may contain bugs before releasing an enhanced version of a software product. Only a few of these works focus on the analysis of personality traits of developers with commit permissions (committers) in Free/Libre and Open-Source Software projects and their relationship with the software artifacts they interact with. This paper presents an approach, based on the automatic recognition of personality traits from e-mails sent by committers in FLOSS projects, to uncover relationships between the social and technical aspects that occur during the software development process. Our experimental results suggest the existence of some relationships among personality traits projected by the committers through their e-mails and the social (communication) and technical activities they undertake. This work is a preliminary study aimed at supporting the setting up of efficient work teams in software development projects based on an appropriate mix of stakeholders taking into account their personality traits.</Abstract>
    <Abstract_Length>246</Abstract_Length>
    <Author_Name>fabio a gonzalez</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>national university of colombia</Affiliation_Name>
    <Author_Id>2147816758</Author_Id>
    <All_Authors>jairo aponte, fabio a gonzalez, jorge e camargo, oscar hernan parumapabon, felipe restrepocalle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2289339846</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Finding relationships between socio-technical aspects and personality traits by mining developer e-mails</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897611</DOI>
    <Abstract>Personality traits influence most, if not all, of the human activities, from those as natural as the way people walk, talk, dress and write to those most complex as the way they interact with others. Most importantly, personality influences the way people make decisions including, in the case of developers, the criteria they consider when selecting a software project they want to participate. Most of the works that study the influence of social, technical and human factors in software development projects have been focused on the impact of communications in software quality. For instance, on identifying predictors to detect files that may contain bugs before releasing an enhanced version of a software product. Only a few of these works focus on the analysis of personality traits of developers with commit permissions (committers) in Free/Libre and Open-Source Software projects and their relationship with the software artifacts they interact with. This paper presents an approach, based on the automatic recognition of personality traits from e-mails sent by committers in FLOSS projects, to uncover relationships between the social and technical aspects that occur during the software development process. Our experimental results suggest the existence of some relationships among personality traits projected by the committers through their e-mails and the social (communication) and technical activities they undertake. This work is a preliminary study aimed at supporting the setting up of efficient work teams in software development projects based on an appropriate mix of stakeholders taking into account their personality traits.</Abstract>
    <Abstract_Length>246</Abstract_Length>
    <Author_Name>jorge e camargo</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2250238426</Author_Id>
    <All_Authors>jairo aponte, fabio a gonzalez, jorge e camargo, oscar hernan parumapabon, felipe restrepocalle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2289339846</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Finding relationships between socio-technical aspects and personality traits by mining developer e-mails</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897611</DOI>
    <Abstract>Personality traits influence most, if not all, of the human activities, from those as natural as the way people walk, talk, dress and write to those most complex as the way they interact with others. Most importantly, personality influences the way people make decisions including, in the case of developers, the criteria they consider when selecting a software project they want to participate. Most of the works that study the influence of social, technical and human factors in software development projects have been focused on the impact of communications in software quality. For instance, on identifying predictors to detect files that may contain bugs before releasing an enhanced version of a software product. Only a few of these works focus on the analysis of personality traits of developers with commit permissions (committers) in Free/Libre and Open-Source Software projects and their relationship with the software artifacts they interact with. This paper presents an approach, based on the automatic recognition of personality traits from e-mails sent by committers in FLOSS projects, to uncover relationships between the social and technical aspects that occur during the software development process. Our experimental results suggest the existence of some relationships among personality traits projected by the committers through their e-mails and the social (communication) and technical activities they undertake. This work is a preliminary study aimed at supporting the setting up of efficient work teams in software development projects based on an appropriate mix of stakeholders taking into account their personality traits.</Abstract>
    <Abstract_Length>246</Abstract_Length>
    <Author_Name>oscar hernan parumapabon</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>national university of colombia</Affiliation_Name>
    <Author_Id>2399629030</Author_Id>
    <All_Authors>jairo aponte, fabio a gonzalez, jorge e camargo, oscar hernan parumapabon, felipe restrepocalle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2289339846</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Finding relationships between socio-technical aspects and personality traits by mining developer e-mails</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897611</DOI>
    <Abstract>Personality traits influence most, if not all, of the human activities, from those as natural as the way people walk, talk, dress and write to those most complex as the way they interact with others. Most importantly, personality influences the way people make decisions including, in the case of developers, the criteria they consider when selecting a software project they want to participate. Most of the works that study the influence of social, technical and human factors in software development projects have been focused on the impact of communications in software quality. For instance, on identifying predictors to detect files that may contain bugs before releasing an enhanced version of a software product. Only a few of these works focus on the analysis of personality traits of developers with commit permissions (committers) in Free/Libre and Open-Source Software projects and their relationship with the software artifacts they interact with. This paper presents an approach, based on the automatic recognition of personality traits from e-mails sent by committers in FLOSS projects, to uncover relationships between the social and technical aspects that occur during the software development process. Our experimental results suggest the existence of some relationships among personality traits projected by the committers through their e-mails and the social (communication) and technical activities they undertake. This work is a preliminary study aimed at supporting the setting up of efficient work teams in software development projects based on an appropriate mix of stakeholders taking into account their personality traits.</Abstract>
    <Abstract_Length>246</Abstract_Length>
    <Author_Name>felipe restrepocalle</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>national university of colombia</Affiliation_Name>
    <Author_Id>2402362338</Author_Id>
    <All_Authors>jairo aponte, fabio a gonzalez, jorge e camargo, oscar hernan parumapabon, felipe restrepocalle</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2292698417</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Jimbo: a collaborative IDE with live preview</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897613</DOI>
    <Abstract>Team collaboration plays a key role in the success of any multi-user activity. Software engineering is a highly collaborative activity, where multiple developers and designers work together to solve a common problem. Meaningful and effective designer-developer collaboration improves the user experience, which can improve the chances of success for the project. Learning to program is another activity that can be implemented in a more collaborative way, students can learn in an active style by working with others. The growth of online classes, from small structured seminars to massive open online courses (MOOCs), and the isolation and impoverished learning experience some students report in these, points to an urgent need for tools that support remote pair programming in a distributed educational setting.   In this paper, we describe Jimbo, a collaborative integrated development environment (IDE) that we believe is beneficial and effective in both aforementioned activities. Jimbo integrates many features that support better collaboration and communication between designers and developers, to bridge communication gaps and develop mutual understanding. These novel features can improve today's CS education by bringing students closer to each other and their instructors as well as training them to collaborate which is consistent with current practices in software engineering.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>carlos jensen</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>oregon state university</Affiliation_Name>
    <Author_Id>2151367964</Author_Id>
    <All_Authors>carlos jensen, soroush ghorashi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2292698417</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Jimbo: a collaborative IDE with live preview</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897613</DOI>
    <Abstract>Team collaboration plays a key role in the success of any multi-user activity. Software engineering is a highly collaborative activity, where multiple developers and designers work together to solve a common problem. Meaningful and effective designer-developer collaboration improves the user experience, which can improve the chances of success for the project. Learning to program is another activity that can be implemented in a more collaborative way, students can learn in an active style by working with others. The growth of online classes, from small structured seminars to massive open online courses (MOOCs), and the isolation and impoverished learning experience some students report in these, points to an urgent need for tools that support remote pair programming in a distributed educational setting.   In this paper, we describe Jimbo, a collaborative integrated development environment (IDE) that we believe is beneficial and effective in both aforementioned activities. Jimbo integrates many features that support better collaboration and communication between designers and developers, to bridge communication gaps and develop mutual understanding. These novel features can improve today's CS education by bringing students closer to each other and their instructors as well as training them to collaborate which is consistent with current practices in software engineering.</Abstract>
    <Abstract_Length>202</Abstract_Length>
    <Author_Name>soroush ghorashi</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>oregon state university</Affiliation_Name>
    <Author_Id>2161662891</Author_Id>
    <All_Authors>carlos jensen, soroush ghorashi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2293798798</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Crowd development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Abstract>Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.</Abstract>
    <Abstract_Length>60</Abstract_Length>
    <Author_Name>thomas d latoza</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>168727994</Author_Id>
    <All_Authors>thomas d latoza, james d herbsleb, w ben towne, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2293798798</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Crowd development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Abstract>Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.</Abstract>
    <Abstract_Length>60</Abstract_Length>
    <Author_Name>james d herbsleb</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>202682525</Author_Id>
    <All_Authors>thomas d latoza, james d herbsleb, w ben towne, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2293798798</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Crowd development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Abstract>Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.</Abstract>
    <Abstract_Length>60</Abstract_Length>
    <Author_Name>w ben towne</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>carnegie mellon university</Affiliation_Name>
    <Author_Id>2093547146</Author_Id>
    <All_Authors>thomas d latoza, james d herbsleb, w ben towne, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2293798798</Paper_API_Id>
    <Paper_Year>2013</Paper_Year>
    <Citations_Count>13</Citations_Count>
    <Display_Name>Crowd development</Display_Name>
    <Venue_Short_Name>CHASE</Venue_Short_Name>
    <Abstract>Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.</Abstract>
    <Abstract_Length>60</Abstract_Length>
    <Author_Name>andre van der hoek</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of california irvine</Affiliation_Name>
    <Author_Id>2136863642</Author_Id>
    <All_Authors>thomas d latoza, james d herbsleb, w ben towne, andre van der hoek</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2305152417</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Are easily usable security libraries possible and how should experts work together to create them</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897610</DOI>
    <Abstract>Due to non-experts also developing security relevant applications it is necessary to support them too. Some improvements in the current research may not reach or impact these developers. Nonetheless these developers use security libraries. There are findings that even their usage is not easily possible and applications are left vulnerable to supposedly treated threats. So it is important to improve the usability of the security libraries. This is itself is not straightforward because of a required maturing process for example. By getting together experts of different involved areas, especially cryptographic and API-usability experts, both of the problems can be tackled.</Abstract>
    <Abstract_Length>100</Abstract_Length>
    <Author_Name>kai mindermann</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of stuttgart</Affiliation_Name>
    <Author_Id>2165455070</Author_Id>
    <All_Authors>kai mindermann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2394673427</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Environmental factors influencing individual decision-making behavior in software projects: a systematic literature review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897589</DOI>
    <Abstract>As one of the crucial human aspects, individual decision-making behavior may affect the quality of a software project, and it is adaptive to the environment in which an individual is practicing. However, no comprehensive reference framework of the environmental factors influencing individual decision-making behavior in software projects is presently available. This paper undertakes a systematic literature review (SLR) to gain insight into existing studies on this topic. After a careful SLR process, 40 studies were targeted to solve this question. Based on these extracted studies, we first provided a taxonomy of environmental factors comprising eight categories. Then a total of 237 factors are identified and classified using these eight categories, and major environmental factors of each category are listed in the paper. The environmental factors listing and the taxonomy can help researchers and practitioners to better understand and predict the behavior of individuals during decision making and to design more effective solutions to improve people management in software projects.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>luiz fernando capretz</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of western ontario</Affiliation_Name>
    <Author_Id>2019655441</Author_Id>
    <All_Authors>luiz fernando capretz, jingdong jia, pengnan zhang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2394673427</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Environmental factors influencing individual decision-making behavior in software projects: a systematic literature review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897589</DOI>
    <Abstract>As one of the crucial human aspects, individual decision-making behavior may affect the quality of a software project, and it is adaptive to the environment in which an individual is practicing. However, no comprehensive reference framework of the environmental factors influencing individual decision-making behavior in software projects is presently available. This paper undertakes a systematic literature review (SLR) to gain insight into existing studies on this topic. After a careful SLR process, 40 studies were targeted to solve this question. Based on these extracted studies, we first provided a taxonomy of environmental factors comprising eight categories. Then a total of 237 factors are identified and classified using these eight categories, and major environmental factors of each category are listed in the paper. The environmental factors listing and the taxonomy can help researchers and practitioners to better understand and predict the behavior of individuals during decision making and to design more effective solutions to improve people management in software projects.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>jingdong jia</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>beihang university</Affiliation_Name>
    <Author_Id>2144124992</Author_Id>
    <All_Authors>luiz fernando capretz, jingdong jia, pengnan zhang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2394673427</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Environmental factors influencing individual decision-making behavior in software projects: a systematic literature review</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897589</DOI>
    <Abstract>As one of the crucial human aspects, individual decision-making behavior may affect the quality of a software project, and it is adaptive to the environment in which an individual is practicing. However, no comprehensive reference framework of the environmental factors influencing individual decision-making behavior in software projects is presently available. This paper undertakes a systematic literature review (SLR) to gain insight into existing studies on this topic. After a careful SLR process, 40 studies were targeted to solve this question. Based on these extracted studies, we first provided a taxonomy of environmental factors comprising eight categories. Then a total of 237 factors are identified and classified using these eight categories, and major environmental factors of each category are listed in the paper. The environmental factors listing and the taxonomy can help researchers and practitioners to better understand and predict the behavior of individuals during decision making and to design more effective solutions to improve people management in software projects.</Abstract>
    <Abstract_Length>159</Abstract_Length>
    <Author_Name>pengnan zhang</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>beihang university</Affiliation_Name>
    <Author_Id>2227306885</Author_Id>
    <All_Authors>luiz fernando capretz, jingdong jia, pengnan zhang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2395586449</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Can a team coordination game help student software project teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897594</DOI>
    <Abstract>Team-based student projects in beginning software engineering courses are often the first place that students have tried working on a team to develop a shared software product. For this reason, team coordination and communication skills are probably very important to their team success. We have access and experience with a research training game named  TeC , developed to improve team coordination in disaster response teams, and hypothesized that it might help student software teams.   We ran a course experiment where we used the training game as a treatment, and a generic board game as a control. With only 8 teams in the course available to participate, and 6 ultimately completing the experiment, statistical results are inconclusive. Nevertheless, interesting outcomes were obtained that indicate potential benefit of such a training game, and we believe this argues for more research in the area.</Abstract>
    <Abstract_Length>144</Abstract_Length>
    <Author_Name>zachary o toups</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>new mexico state university</Affiliation_Name>
    <Author_Id>2096998566</Author_Id>
    <All_Authors>zachary o toups, jonathan e cook, olaa alsaedi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2395586449</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Can a team coordination game help student software project teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897594</DOI>
    <Abstract>Team-based student projects in beginning software engineering courses are often the first place that students have tried working on a team to develop a shared software product. For this reason, team coordination and communication skills are probably very important to their team success. We have access and experience with a research training game named  TeC , developed to improve team coordination in disaster response teams, and hypothesized that it might help student software teams.   We ran a course experiment where we used the training game as a treatment, and a generic board game as a control. With only 8 teams in the course available to participate, and 6 ultimately completing the experiment, statistical results are inconclusive. Nevertheless, interesting outcomes were obtained that indicate potential benefit of such a training game, and we believe this argues for more research in the area.</Abstract>
    <Abstract_Length>144</Abstract_Length>
    <Author_Name>jonathan e cook</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>new mexico state university</Affiliation_Name>
    <Author_Id>2167751840</Author_Id>
    <All_Authors>zachary o toups, jonathan e cook, olaa alsaedi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2395586449</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Can a team coordination game help student software project teams</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897594</DOI>
    <Abstract>Team-based student projects in beginning software engineering courses are often the first place that students have tried working on a team to develop a shared software product. For this reason, team coordination and communication skills are probably very important to their team success. We have access and experience with a research training game named  TeC , developed to improve team coordination in disaster response teams, and hypothesized that it might help student software teams.   We ran a course experiment where we used the training game as a treatment, and a generic board game as a control. With only 8 teams in the course available to participate, and 6 ultimately completing the experiment, statistical results are inconclusive. Nevertheless, interesting outcomes were obtained that indicate potential benefit of such a training game, and we believe this argues for more research in the area.</Abstract>
    <Abstract_Length>144</Abstract_Length>
    <Author_Name>olaa alsaedi</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>new mexico state university</Affiliation_Name>
    <Author_Id>2404873526</Author_Id>
    <All_Authors>zachary o toups, jonathan e cook, olaa alsaedi</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396201818</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Augmenting requirements gathering for people with special needs using IoT: a position paper</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897617</DOI>
    <Abstract>Requirements gathering are an important aspect of application development, especially when users are people with special needs. Traditionally, this process is being conducted using conventional methods, such as interviews, workshops and questionnaires. These approaches, however, are unable to grasp the full context when collecting data from the communities of people with special needs, mainly because of the difficult access to participants and incomprehensiveness of the data gathered. To mitigate such issues, in this position paper, we argue that existing traditional methods could be complemented by means of Internet of Things. The immense amount of data gathered from various devices interconnected could help generate meaningful data that will complement the usually insufficient amount collected using traditional methods. This new approach is, however, associated with challenges that are discussed along with a possible scenario on how data complementing from traditional and the indirect method could be done.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>bujar raufi</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>south east european university</Affiliation_Name>
    <Author_Id>331829881</Author_Id>
    <All_Authors>bujar raufi, arianit kurti, bahtijar vogel, mexhid ferati</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396201818</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Augmenting requirements gathering for people with special needs using IoT: a position paper</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897617</DOI>
    <Abstract>Requirements gathering are an important aspect of application development, especially when users are people with special needs. Traditionally, this process is being conducted using conventional methods, such as interviews, workshops and questionnaires. These approaches, however, are unable to grasp the full context when collecting data from the communities of people with special needs, mainly because of the difficult access to participants and incomprehensiveness of the data gathered. To mitigate such issues, in this position paper, we argue that existing traditional methods could be complemented by means of Internet of Things. The immense amount of data gathered from various devices interconnected could help generate meaningful data that will complement the usually insufficient amount collected using traditional methods. This new approach is, however, associated with challenges that are discussed along with a possible scenario on how data complementing from traditional and the indirect method could be done.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>arianit kurti</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>linnaeus university</Affiliation_Name>
    <Author_Id>2024529675</Author_Id>
    <All_Authors>bujar raufi, arianit kurti, bahtijar vogel, mexhid ferati</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396201818</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Augmenting requirements gathering for people with special needs using IoT: a position paper</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897617</DOI>
    <Abstract>Requirements gathering are an important aspect of application development, especially when users are people with special needs. Traditionally, this process is being conducted using conventional methods, such as interviews, workshops and questionnaires. These approaches, however, are unable to grasp the full context when collecting data from the communities of people with special needs, mainly because of the difficult access to participants and incomprehensiveness of the data gathered. To mitigate such issues, in this position paper, we argue that existing traditional methods could be complemented by means of Internet of Things. The immense amount of data gathered from various devices interconnected could help generate meaningful data that will complement the usually insufficient amount collected using traditional methods. This new approach is, however, associated with challenges that are discussed along with a possible scenario on how data complementing from traditional and the indirect method could be done.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>bahtijar vogel</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>malmo university</Affiliation_Name>
    <Author_Id>2166562655</Author_Id>
    <All_Authors>bujar raufi, arianit kurti, bahtijar vogel, mexhid ferati</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396201818</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Augmenting requirements gathering for people with special needs using IoT: a position paper</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897617</DOI>
    <Abstract>Requirements gathering are an important aspect of application development, especially when users are people with special needs. Traditionally, this process is being conducted using conventional methods, such as interviews, workshops and questionnaires. These approaches, however, are unable to grasp the full context when collecting data from the communities of people with special needs, mainly because of the difficult access to participants and incomprehensiveness of the data gathered. To mitigate such issues, in this position paper, we argue that existing traditional methods could be complemented by means of Internet of Things. The immense amount of data gathered from various devices interconnected could help generate meaningful data that will complement the usually insufficient amount collected using traditional methods. This new approach is, however, associated with challenges that are discussed along with a possible scenario on how data complementing from traditional and the indirect method could be done.</Abstract>
    <Abstract_Length>145</Abstract_Length>
    <Author_Name>mexhid ferati</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of oslo</Affiliation_Name>
    <Author_Id>2344895336</Author_Id>
    <All_Authors>bujar raufi, arianit kurti, bahtijar vogel, mexhid ferati</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396277780</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Web search behaviors for software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897614</DOI>
    <Abstract>Software developers often use a web search engine to improve work efficiency. However, web search skill (i.e., efficiency to find an appropriate web site) is different for each developer. In this research, we try to clarify better web search behavior. To analyze web search behavior in programming, we made some questions about programming, and subjects solved the questions. The questions are based on Java language. Based on our experiment, to enhance the effectiveness of the web search, we suggest (1) do not read many search result pages without changing the key phrase, (2) read search result pages or the destination web pages linked to the search results carefully, before making new search, (3) Use new keywords which are not used before, when making a new key phrase.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>hideaki hata</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>national archives and records administration</Affiliation_Name>
    <Author_Id>2132915310</Author_Id>
    <All_Authors>hideaki hata, masateru tsunoda, keitaro nakasai</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396277780</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Web search behaviors for software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897614</DOI>
    <Abstract>Software developers often use a web search engine to improve work efficiency. However, web search skill (i.e., efficiency to find an appropriate web site) is different for each developer. In this research, we try to clarify better web search behavior. To analyze web search behavior in programming, we made some questions about programming, and subjects solved the questions. The questions are based on Java language. Based on our experiment, to enhance the effectiveness of the web search, we suggest (1) do not read many search result pages without changing the key phrase, (2) read search result pages or the destination web pages linked to the search results carefully, before making new search, (3) Use new keywords which are not used before, when making a new key phrase.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>masateru tsunoda</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>kindai university</Affiliation_Name>
    <Author_Id>2135181689</Author_Id>
    <All_Authors>hideaki hata, masateru tsunoda, keitaro nakasai</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2396277780</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Web search behaviors for software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897614</DOI>
    <Abstract>Software developers often use a web search engine to improve work efficiency. However, web search skill (i.e., efficiency to find an appropriate web site) is different for each developer. In this research, we try to clarify better web search behavior. To analyze web search behavior in programming, we made some questions about programming, and subjects solved the questions. The questions are based on Java language. Based on our experiment, to enhance the effectiveness of the web search, we suggest (1) do not read many search result pages without changing the key phrase, (2) read search result pages or the destination web pages linked to the search results carefully, before making new search, (3) Use new keywords which are not used before, when making a new key phrase.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>keitaro nakasai</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>kindai university</Affiliation_Name>
    <Author_Id>2408602805</Author_Id>
    <All_Authors>hideaki hata, masateru tsunoda, keitaro nakasai</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397147651</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Beliefs, practices, and personalities of software engineers: a survey in a large software company</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897596</DOI>
    <Abstract>In this paper we present the results from a survey about the beliefs, practices, and personalities of software engineers in a large software company. The survey received 797 responses. We report statistics about beliefs of software engineers, their work practices, as well as differences in those with respect to personality traits. For example, we observed no personality differences between developers and testers; managers were conscientious and more extraverted. We observed several differences for engineers who are listening to music and for engineers who have built a tool. We also observed that engineers who agree with the statement "Agile development is awesome" were more extroverted and less neurotic.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>thomas zimmermann</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2014339847</Author_Id>
    <All_Authors>thomas zimmermann, christian bird, edward k smith</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397147651</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Beliefs, practices, and personalities of software engineers: a survey in a large software company</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897596</DOI>
    <Abstract>In this paper we present the results from a survey about the beliefs, practices, and personalities of software engineers in a large software company. The survey received 797 responses. We report statistics about beliefs of software engineers, their work practices, as well as differences in those with respect to personality traits. For example, we observed no personality differences between developers and testers; managers were conscientious and more extraverted. We observed several differences for engineers who are listening to music and for engineers who have built a tool. We also observed that engineers who agree with the statement "Agile development is awesome" were more extroverted and less neurotic.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>christian bird</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>microsoft</Affiliation_Name>
    <Author_Id>2142366035</Author_Id>
    <All_Authors>thomas zimmermann, christian bird, edward k smith</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397147651</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Beliefs, practices, and personalities of software engineers: a survey in a large software company</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897596</DOI>
    <Abstract>In this paper we present the results from a survey about the beliefs, practices, and personalities of software engineers in a large software company. The survey received 797 responses. We report statistics about beliefs of software engineers, their work practices, as well as differences in those with respect to personality traits. For example, we observed no personality differences between developers and testers; managers were conscientious and more extraverted. We observed several differences for engineers who are listening to music and for engineers who have built a tool. We also observed that engineers who agree with the statement "Agile development is awesome" were more extroverted and less neurotic.</Abstract>
    <Abstract_Length>107</Abstract_Length>
    <Author_Name>edward k smith</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of massachusetts amherst</Affiliation_Name>
    <Author_Id>2164851866</Author_Id>
    <All_Authors>thomas zimmermann, christian bird, edward k smith</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397201140</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Collaboration change in enterprise software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897590</DOI>
    <Abstract>Enterprise software development is a complex effort that may last years. Enterprise software is often developed by a systems integrator that makes modifications to a pre-made package or builds tailored software for the specific purpose. The development may include many developer organizations, the user organization, and their different departments and sub-units. Their collaboration evolves through project incidents, phases and even crises. The practices of project management, communication, contracts, and ultimately personal relationships change intentionally or unintentionally. These changes may cause uncertainties and discontinuities for the development. This study observes changes during enterprise software development and their influence on collaboration practices in different situations. During twenty years of development both internal and external crises and changes in the business environment triggered changes in collaboration. The collaboration practices are classified with four modes of collaboration (contract, cooperation, personified, and process) that illustrate emphasis in collaboration in different circumstances.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>kari smolander</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>aalto university</Affiliation_Name>
    <Author_Id>2019241556</Author_Id>
    <All_Authors>kari smolander, matti rossi, samuli pekkola</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397201140</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Collaboration change in enterprise software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897590</DOI>
    <Abstract>Enterprise software development is a complex effort that may last years. Enterprise software is often developed by a systems integrator that makes modifications to a pre-made package or builds tailored software for the specific purpose. The development may include many developer organizations, the user organization, and their different departments and sub-units. Their collaboration evolves through project incidents, phases and even crises. The practices of project management, communication, contracts, and ultimately personal relationships change intentionally or unintentionally. These changes may cause uncertainties and discontinuities for the development. This study observes changes during enterprise software development and their influence on collaboration practices in different situations. During twenty years of development both internal and external crises and changes in the business environment triggered changes in collaboration. The collaboration practices are classified with four modes of collaboration (contract, cooperation, personified, and process) that illustrate emphasis in collaboration in different circumstances.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>matti rossi</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>aalto university</Affiliation_Name>
    <Author_Id>2161564812</Author_Id>
    <All_Authors>kari smolander, matti rossi, samuli pekkola</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397201140</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Collaboration change in enterprise software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897590</DOI>
    <Abstract>Enterprise software development is a complex effort that may last years. Enterprise software is often developed by a systems integrator that makes modifications to a pre-made package or builds tailored software for the specific purpose. The development may include many developer organizations, the user organization, and their different departments and sub-units. Their collaboration evolves through project incidents, phases and even crises. The practices of project management, communication, contracts, and ultimately personal relationships change intentionally or unintentionally. These changes may cause uncertainties and discontinuities for the development. This study observes changes during enterprise software development and their influence on collaboration practices in different situations. During twenty years of development both internal and external crises and changes in the business environment triggered changes in collaboration. The collaboration practices are classified with four modes of collaboration (contract, cooperation, personified, and process) that illustrate emphasis in collaboration in different circumstances.</Abstract>
    <Abstract_Length>146</Abstract_Length>
    <Author_Name>samuli pekkola</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>tampere university of technology</Affiliation_Name>
    <Author_Id>2572540651</Author_Id>
    <All_Authors>kari smolander, matti rossi, samuli pekkola</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397541445</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Code review participation: game theoretical modeling of reviewers in gerrit datasets</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897605</DOI>
    <Abstract>Code review is a common practice for improving the quality of source code changes and expediting knowledge transfer in a development community. In modern code review, source code changes or patches are considered to be assessed and approved for integration by multiple reviews. However, from our empirical study, we found that some patches are reviewed by only one reviewer, and some reviewers did not continue the review discussion, which can have negative effects on software quality. To understand these reviewers' behaviors, we model the code review situation based on the snowdrift game, which is used to analyze social dilemmas. With this game-theoretical modeling, we found that it can explain reviewers' behaviors well.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>akinori ihara</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2104306617</Author_Id>
    <All_Authors>akinori ihara, hideaki hata, kenichi matsumoto, kiminao kogiso, n i kitagawa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397541445</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Code review participation: game theoretical modeling of reviewers in gerrit datasets</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897605</DOI>
    <Abstract>Code review is a common practice for improving the quality of source code changes and expediting knowledge transfer in a development community. In modern code review, source code changes or patches are considered to be assessed and approved for integration by multiple reviews. However, from our empirical study, we found that some patches are reviewed by only one reviewer, and some reviewers did not continue the review discussion, which can have negative effects on software quality. To understand these reviewers' behaviors, we model the code review situation based on the snowdrift game, which is used to analyze social dilemmas. With this game-theoretical modeling, we found that it can explain reviewers' behaviors well.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>hideaki hata</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2132915310</Author_Id>
    <All_Authors>akinori ihara, hideaki hata, kenichi matsumoto, kiminao kogiso, n i kitagawa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397541445</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Code review participation: game theoretical modeling of reviewers in gerrit datasets</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897605</DOI>
    <Abstract>Code review is a common practice for improving the quality of source code changes and expediting knowledge transfer in a development community. In modern code review, source code changes or patches are considered to be assessed and approved for integration by multiple reviews. However, from our empirical study, we found that some patches are reviewed by only one reviewer, and some reviewers did not continue the review discussion, which can have negative effects on software quality. To understand these reviewers' behaviors, we model the code review situation based on the snowdrift game, which is used to analyze social dilemmas. With this game-theoretical modeling, we found that it can explain reviewers' behaviors well.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>kenichi matsumoto</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2134938672</Author_Id>
    <All_Authors>akinori ihara, hideaki hata, kenichi matsumoto, kiminao kogiso, n i kitagawa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397541445</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Code review participation: game theoretical modeling of reviewers in gerrit datasets</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897605</DOI>
    <Abstract>Code review is a common practice for improving the quality of source code changes and expediting knowledge transfer in a development community. In modern code review, source code changes or patches are considered to be assessed and approved for integration by multiple reviews. However, from our empirical study, we found that some patches are reviewed by only one reviewer, and some reviewers did not continue the review discussion, which can have negative effects on software quality. To understand these reviewers' behaviors, we model the code review situation based on the snowdrift game, which is used to analyze social dilemmas. With this game-theoretical modeling, we found that it can explain reviewers' behaviors well.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>kiminao kogiso</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of electro communications</Affiliation_Name>
    <Author_Id>2191086839</Author_Id>
    <All_Authors>akinori ihara, hideaki hata, kenichi matsumoto, kiminao kogiso, n i kitagawa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2397541445</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Code review participation: game theoretical modeling of reviewers in gerrit datasets</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897605</DOI>
    <Abstract>Code review is a common practice for improving the quality of source code changes and expediting knowledge transfer in a development community. In modern code review, source code changes or patches are considered to be assessed and approved for integration by multiple reviews. However, from our empirical study, we found that some patches are reviewed by only one reviewer, and some reviewers did not continue the review discussion, which can have negative effects on software quality. To understand these reviewers' behaviors, we model the code review situation based on the snowdrift game, which is used to analyze social dilemmas. With this game-theoretical modeling, we found that it can explain reviewers' behaviors well.</Abstract>
    <Abstract_Length>112</Abstract_Length>
    <Author_Name>n i kitagawa</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>nara institute of science and technology</Affiliation_Name>
    <Author_Id>2419756013</Author_Id>
    <All_Authors>akinori ihara, hideaki hata, kenichi matsumoto, kiminao kogiso, n i kitagawa</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398225563</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Among the agilists: participant observation in a rapidly evolving workplace</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897609</DOI>
    <Abstract>In this paper, we describe the practical considerations and challenges of studying an agile, co-located software development community by assimilating among them over many months. We have adopted a fully immersive ethnographic approach using semistructured and unstructured interviews. In many ways, the design choices in our study mirrored those faced by the development team, as we adjusted our methods on the fly to accommodate our richer knowledge of the work environment and adapted to changes on the ground. We share our process of determining and adjusting an operating procedure for the ethnographic observation and we reflect on the challenges faced in choosing subjects to study, getting them on board, planning questions and conducting interviews without disrupting the regular process of software development.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>shreya kumar</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>michigan technological university</Affiliation_Name>
    <Author_Id>2172286263</Author_Id>
    <All_Authors>shreya kumar, charles wallace</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398225563</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Among the agilists: participant observation in a rapidly evolving workplace</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897609</DOI>
    <Abstract>In this paper, we describe the practical considerations and challenges of studying an agile, co-located software development community by assimilating among them over many months. We have adopted a fully immersive ethnographic approach using semistructured and unstructured interviews. In many ways, the design choices in our study mirrored those faced by the development team, as we adjusted our methods on the fly to accommodate our richer knowledge of the work environment and adapted to changes on the ground. We share our process of determining and adjusting an operating procedure for the ethnographic observation and we reflect on the challenges faced in choosing subjects to study, getting them on board, planning questions and conducting interviews without disrupting the regular process of software development.</Abstract>
    <Abstract_Length>122</Abstract_Length>
    <Author_Name>charles wallace</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>michigan technological university</Affiliation_Name>
    <Author_Id>2251710351</Author_Id>
    <All_Authors>shreya kumar, charles wallace</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398350256</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An initial analysis of differences in software engineers' attitudes towards organizational change</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897592</DOI>
    <Abstract>The ability to manage change is important in software engineering organizations, where rapid progress in technologies and constantly evolving methodologies create a turbulent environment. Research has identified employees' attitudes towards organizational change as a key factor in the change process. Nonetheless, few studies exist that explore such attitudes in a software engineering context.   The nature of change efforts is such that they often do not equally affect the various roles in the organization, which indicates that the roles may hold different attitudes. This study aimed to verify the existence of these presumed differences in attitudes towards organizational change between roles in a software engineering organization and to identify factors that contribute to these differences.   The result of a survey (N=51) confirmed that there were significant differences, and that the software developers had a more positive attitude towards change and had deeper knowledge about the intended outcome compared to the line managers. The result of in-depth interviews (N=11) revealed that the software engineers evaluate the planned change in relation to the norms, values and standards of their peer group, meaning that an employee will have a positive attitude towards a change if its result is likely to make, or has made, it easier for him/her to uphold the peer group's norms and values.</Abstract>
    <Abstract_Length>216</Abstract_Length>
    <Author_Name>emil alegroth</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>chalmers university of technology</Affiliation_Name>
    <Author_Id>130037601</Author_Id>
    <All_Authors>emil alegroth, per lenberg, robert feldt, lars goran wallgren tengberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398350256</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An initial analysis of differences in software engineers' attitudes towards organizational change</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897592</DOI>
    <Abstract>The ability to manage change is important in software engineering organizations, where rapid progress in technologies and constantly evolving methodologies create a turbulent environment. Research has identified employees' attitudes towards organizational change as a key factor in the change process. Nonetheless, few studies exist that explore such attitudes in a software engineering context.   The nature of change efforts is such that they often do not equally affect the various roles in the organization, which indicates that the roles may hold different attitudes. This study aimed to verify the existence of these presumed differences in attitudes towards organizational change between roles in a software engineering organization and to identify factors that contribute to these differences.   The result of a survey (N=51) confirmed that there were significant differences, and that the software developers had a more positive attitude towards change and had deeper knowledge about the intended outcome compared to the line managers. The result of in-depth interviews (N=11) revealed that the software engineers evaluate the planned change in relation to the norms, values and standards of their peer group, meaning that an employee will have a positive attitude towards a change if its result is likely to make, or has made, it easier for him/her to uphold the peer group's norms and values.</Abstract>
    <Abstract_Length>216</Abstract_Length>
    <Author_Name>per lenberg</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>chalmers university of technology</Affiliation_Name>
    <Author_Id>2022443403</Author_Id>
    <All_Authors>emil alegroth, per lenberg, robert feldt, lars goran wallgren tengberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398350256</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An initial analysis of differences in software engineers' attitudes towards organizational change</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897592</DOI>
    <Abstract>The ability to manage change is important in software engineering organizations, where rapid progress in technologies and constantly evolving methodologies create a turbulent environment. Research has identified employees' attitudes towards organizational change as a key factor in the change process. Nonetheless, few studies exist that explore such attitudes in a software engineering context.   The nature of change efforts is such that they often do not equally affect the various roles in the organization, which indicates that the roles may hold different attitudes. This study aimed to verify the existence of these presumed differences in attitudes towards organizational change between roles in a software engineering organization and to identify factors that contribute to these differences.   The result of a survey (N=51) confirmed that there were significant differences, and that the software developers had a more positive attitude towards change and had deeper knowledge about the intended outcome compared to the line managers. The result of in-depth interviews (N=11) revealed that the software engineers evaluate the planned change in relation to the norms, values and standards of their peer group, meaning that an employee will have a positive attitude towards a change if its result is likely to make, or has made, it easier for him/her to uphold the peer group's norms and values.</Abstract>
    <Abstract_Length>216</Abstract_Length>
    <Author_Name>robert feldt</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>blekinge institute of technology</Affiliation_Name>
    <Author_Id>2034354864</Author_Id>
    <All_Authors>emil alegroth, per lenberg, robert feldt, lars goran wallgren tengberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398350256</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An initial analysis of differences in software engineers' attitudes towards organizational change</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897592</DOI>
    <Abstract>The ability to manage change is important in software engineering organizations, where rapid progress in technologies and constantly evolving methodologies create a turbulent environment. Research has identified employees' attitudes towards organizational change as a key factor in the change process. Nonetheless, few studies exist that explore such attitudes in a software engineering context.   The nature of change efforts is such that they often do not equally affect the various roles in the organization, which indicates that the roles may hold different attitudes. This study aimed to verify the existence of these presumed differences in attitudes towards organizational change between roles in a software engineering organization and to identify factors that contribute to these differences.   The result of a survey (N=51) confirmed that there were significant differences, and that the software developers had a more positive attitude towards change and had deeper knowledge about the intended outcome compared to the line managers. The result of in-depth interviews (N=11) revealed that the software engineers evaluate the planned change in relation to the norms, values and standards of their peer group, meaning that an employee will have a positive attitude towards a change if its result is likely to make, or has made, it easier for him/her to uphold the peer group's norms and values.</Abstract>
    <Abstract_Length>216</Abstract_Length>
    <Author_Name>lars goran wallgren tengberg</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of gothenburg</Affiliation_Name>
    <Author_Id>2425870827</Author_Id>
    <All_Authors>emil alegroth, per lenberg, robert feldt, lars goran wallgren tengberg</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398712915</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>ScrumLint: identifying violations of agile practices using development artifacts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897602</DOI>
    <Abstract>Linting tools automatically identify source code fragments that do not follow a set of predefined standards. Such feedback tools are equally desirable for "linting" agile development processes. However, providing concrete feedback on process conformance is a challenging task, due to the intentional lack of formal agile process models. In this paper, we present ScrumLint, a tool that tackles this issue by analyzing development artifacts. On the basis of experiences with an undergraduate agile software engineering course, we defined a collection of process metrics. These contain the core ideas of agile methods and report deviations. Using this approach, development teams receive immediate feedback on their executed development practices. They can use this knowledge to improve their workflows, or can adapt the metrics to better reflect their project reality.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>thomas kowark</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of potsdam</Affiliation_Name>
    <Author_Id>195809987</Author_Id>
    <All_Authors>thomas kowark, hasso plattner, matthias uflacker, christoph matthies, keven richly</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398712915</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>ScrumLint: identifying violations of agile practices using development artifacts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897602</DOI>
    <Abstract>Linting tools automatically identify source code fragments that do not follow a set of predefined standards. Such feedback tools are equally desirable for "linting" agile development processes. However, providing concrete feedback on process conformance is a challenging task, due to the intentional lack of formal agile process models. In this paper, we present ScrumLint, a tool that tackles this issue by analyzing development artifacts. On the basis of experiences with an undergraduate agile software engineering course, we defined a collection of process metrics. These contain the core ideas of agile methods and report deviations. Using this approach, development teams receive immediate feedback on their executed development practices. They can use this knowledge to improve their workflows, or can adapt the metrics to better reflect their project reality.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>hasso plattner</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>university of potsdam</Affiliation_Name>
    <Author_Id>2017491355</Author_Id>
    <All_Authors>thomas kowark, hasso plattner, matthias uflacker, christoph matthies, keven richly</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398712915</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>ScrumLint: identifying violations of agile practices using development artifacts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897602</DOI>
    <Abstract>Linting tools automatically identify source code fragments that do not follow a set of predefined standards. Such feedback tools are equally desirable for "linting" agile development processes. However, providing concrete feedback on process conformance is a challenging task, due to the intentional lack of formal agile process models. In this paper, we present ScrumLint, a tool that tackles this issue by analyzing development artifacts. On the basis of experiences with an undergraduate agile software engineering course, we defined a collection of process metrics. These contain the core ideas of agile methods and report deviations. Using this approach, development teams receive immediate feedback on their executed development practices. They can use this knowledge to improve their workflows, or can adapt the metrics to better reflect their project reality.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>matthias uflacker</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>university of potsdam</Affiliation_Name>
    <Author_Id>2225045701</Author_Id>
    <All_Authors>thomas kowark, hasso plattner, matthias uflacker, christoph matthies, keven richly</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398712915</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>ScrumLint: identifying violations of agile practices using development artifacts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897602</DOI>
    <Abstract>Linting tools automatically identify source code fragments that do not follow a set of predefined standards. Such feedback tools are equally desirable for "linting" agile development processes. However, providing concrete feedback on process conformance is a challenging task, due to the intentional lack of formal agile process models. In this paper, we present ScrumLint, a tool that tackles this issue by analyzing development artifacts. On the basis of experiences with an undergraduate agile software engineering course, we defined a collection of process metrics. These contain the core ideas of agile methods and report deviations. Using this approach, development teams receive immediate feedback on their executed development practices. They can use this knowledge to improve their workflows, or can adapt the metrics to better reflect their project reality.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>christoph matthies</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of potsdam</Affiliation_Name>
    <Author_Id>2341566669</Author_Id>
    <All_Authors>thomas kowark, hasso plattner, matthias uflacker, christoph matthies, keven richly</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2398712915</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>ScrumLint: identifying violations of agile practices using development artifacts</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897602</DOI>
    <Abstract>Linting tools automatically identify source code fragments that do not follow a set of predefined standards. Such feedback tools are equally desirable for "linting" agile development processes. However, providing concrete feedback on process conformance is a challenging task, due to the intentional lack of formal agile process models. In this paper, we present ScrumLint, a tool that tackles this issue by analyzing development artifacts. On the basis of experiences with an undergraduate agile software engineering course, we defined a collection of process metrics. These contain the core ideas of agile methods and report deviations. Using this approach, development teams receive immediate feedback on their executed development practices. They can use this knowledge to improve their workflows, or can adapt the metrics to better reflect their project reality.</Abstract>
    <Abstract_Length>127</Abstract_Length>
    <Author_Name>keven richly</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>university of potsdam</Affiliation_Name>
    <Author_Id>2514019708</Author_Id>
    <All_Authors>thomas kowark, hasso plattner, matthias uflacker, christoph matthies, keven richly</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2399951091</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Sociodrama: one more technique to foster collaboration in software engineering</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897600</DOI>
    <Abstract>It is widely recognized that human factors are critical for successful Software Engineering. Recent research in this field provides insights on what are these factors are and how they affect Software Engineering productivity. However knowing challenges is not enough; it is important to elaborate on how it will be possible to address them. This paper focuses on sociodrama as a technique which helps in improving organizational climate and may positively affect teams productivity.</Abstract>
    <Abstract_Length>73</Abstract_Length>
    <Author_Name>alexander s lesnevsky</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>national research university higher school of economics</Affiliation_Name>
    <Author_Id>2404339429</Author_Id>
    <All_Authors>alexander s lesnevsky</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2400114443</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>1</Citations_Count>
    <Display_Name>Post-completion error in software development</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897608</DOI>
    <Abstract>Post-completion errors have been observed in a variety of tasks by psychologists, but there is a lack of empirical studies in software engineering. This paper investigates whether post-completion errors occur in software development and the likelihood that software developers commit this error when a post-completion scenario is presented. An experimental study was conducted in the context of a programming contest. In the experiment, a programming task specification that contained a post-completion sub-task requirement was presented to the subjects. The results showed that 41.82% of the subjects committed the post-completion error in the same way---forgetting to design and implement a software requirement which is supposed to be the last sub-task and is not necessary for the completion of the main sub-task. This percentage of subjects committing the post-completion error was significantly higher than that of subjects committing other errors. This study has confirmed that post-completion error occurs in software development and, moreover, different software developers tend to commit this error in the same way with a high likelihood at the location where a post-completion scenario is presented. Strategies are proposed to prevent post-completion errors in software development.</Abstract>
    <Abstract_Length>186</Abstract_Length>
    <Author_Name>fuqun huang</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2131358097</Author_Id>
    <All_Authors>fuqun huang</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2400116430</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Eliciting programming challenges faced by developers with visual impairments: exploratory study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897616</DOI>
    <Abstract>Without understanding the programming difficulties faced by developers with visual impairments, the research community cannot begin to work on effective solutions to overcome these potential problems. This paper will describe our initial empirically based study to identify the problems blind software developers face. We analyzed 69 survey responses with blind developers in an effort to identify the aspects that are indeed a challenge to software development. The results indicate a number of difficulties, workarounds, and basis requirements that will serve as domain and stakeholder understand.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>stephanie ludi</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>rochester institute of technology</Affiliation_Name>
    <Author_Id>2223895597</Author_Id>
    <All_Authors>stephanie ludi, khaled albusays</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2400116430</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Eliciting programming challenges faced by developers with visual impairments: exploratory study</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897616</DOI>
    <Abstract>Without understanding the programming difficulties faced by developers with visual impairments, the research community cannot begin to work on effective solutions to overcome these potential problems. This paper will describe our initial empirically based study to identify the problems blind software developers face. We analyzed 69 survey responses with blind developers in an effort to identify the aspects that are indeed a challenge to software development. The results indicate a number of difficulties, workarounds, and basis requirements that will serve as domain and stakeholder understand.</Abstract>
    <Abstract_Length>85</Abstract_Length>
    <Author_Name>khaled albusays</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>rochester institute of technology</Affiliation_Name>
    <Author_Id>2403771456</Author_Id>
    <All_Authors>stephanie ludi, khaled albusays</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2400711095</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Usability challenges in an Ethiopian software development organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897604</DOI>
    <Abstract>Usability and user centered design (UCD) are central to software development. In developing countries, the gap between IT development and the local use situation is larger than in western countries. However, usability is neither well addressed in software practice nor at the policy making level in Ethiopia. Software practitioners focus on functional requirements, meeting deadlines and budget. The software development industry in Ethiopia is in its early stage. The article aims at understanding usability practices in an Ethiopian software development company. Developers, system analysts, product owners and users were studied. In this first phase of the research, participatory observation, a workshop and interviews with practitioners and operational staff were analyzed. Informal discussions have been observed to outweigh formal meetings for sharing experience and ideas. Practitioners' internal configuration, their experience, cultural knowledge and common sense regarding the users' situation guided the design. Prototypes and fast delivery of working versions helped in getting user feedback even if early user focus proved to be a challenge as communication between developers and users suffered from several layers of indirection. Further challenges are the heterogeneity of users to be supported, a lack of awareness of usability methods, and lacking resources.</Abstract>
    <Abstract_Length>195</Abstract_Length>
    <Author_Name>yvonne dittrich</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>it university of copenhagen</Affiliation_Name>
    <Author_Id>146716645</Author_Id>
    <All_Authors>yvonne dittrich, mesfin kifle, degif teka</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2400711095</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Usability challenges in an Ethiopian software development organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897604</DOI>
    <Abstract>Usability and user centered design (UCD) are central to software development. In developing countries, the gap between IT development and the local use situation is larger than in western countries. However, usability is neither well addressed in software practice nor at the policy making level in Ethiopia. Software practitioners focus on functional requirements, meeting deadlines and budget. The software development industry in Ethiopia is in its early stage. The article aims at understanding usability practices in an Ethiopian software development company. Developers, system analysts, product owners and users were studied. In this first phase of the research, participatory observation, a workshop and interviews with practitioners and operational staff were analyzed. Informal discussions have been observed to outweigh formal meetings for sharing experience and ideas. Practitioners' internal configuration, their experience, cultural knowledge and common sense regarding the users' situation guided the design. Prototypes and fast delivery of working versions helped in getting user feedback even if early user focus proved to be a challenge as communication between developers and users suffered from several layers of indirection. Further challenges are the heterogeneity of users to be supported, a lack of awareness of usability methods, and lacking resources.</Abstract>
    <Abstract_Length>195</Abstract_Length>
    <Author_Name>mesfin kifle</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>addis ababa university</Affiliation_Name>
    <Author_Id>2230118217</Author_Id>
    <All_Authors>yvonne dittrich, mesfin kifle, degif teka</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2400711095</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Usability challenges in an Ethiopian software development organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897604</DOI>
    <Abstract>Usability and user centered design (UCD) are central to software development. In developing countries, the gap between IT development and the local use situation is larger than in western countries. However, usability is neither well addressed in software practice nor at the policy making level in Ethiopia. Software practitioners focus on functional requirements, meeting deadlines and budget. The software development industry in Ethiopia is in its early stage. The article aims at understanding usability practices in an Ethiopian software development company. Developers, system analysts, product owners and users were studied. In this first phase of the research, participatory observation, a workshop and interviews with practitioners and operational staff were analyzed. Informal discussions have been observed to outweigh formal meetings for sharing experience and ideas. Practitioners' internal configuration, their experience, cultural knowledge and common sense regarding the users' situation guided the design. Prototypes and fast delivery of working versions helped in getting user feedback even if early user focus proved to be a challenge as communication between developers and users suffered from several layers of indirection. Further challenges are the heterogeneity of users to be supported, a lack of awareness of usability methods, and lacking resources.</Abstract>
    <Abstract_Length>195</Abstract_Length>
    <Author_Name>degif teka</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>addis ababa university</Affiliation_Name>
    <Author_Id>2408320799</Author_Id>
    <All_Authors>yvonne dittrich, mesfin kifle, degif teka</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402052209</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Improving learning outcomes through systematic group reformation: the role of skills and personality in software engineering education</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897615</DOI>
    <Abstract>Group or team formation has been a well-studied field in numerous contexts, such as business teams, project teams, and educational teams. There has, however, been little consideration of how groups or particularly project teams might have to be reorganized during a lecture in order to yield an optimal learning outcome. Empirical studies show that the outcome of groups will be affected by a number of factors, including the individual behavior of each group member, their skills and inclinations. In this research, the authors aim at finding correlations between the individual characteristics and learning outcomes during a running lecture so that teaching and learning can be improved. A study has been carried out that involved software engineering students over the past three years. The results show an improvement in the learning outcomes for groups that were systematically formed, which, for future settings, could enable educators as well as project leaders to systematically form groups and improve the outcomes of these groups in various domains.</Abstract>
    <Abstract_Length>163</Abstract_Length>
    <Author_Name>amir mujkanovic</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>281127242</Author_Id>
    <All_Authors>amir mujkanovic, andreas bollin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402052209</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Improving learning outcomes through systematic group reformation: the role of skills and personality in software engineering education</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897615</DOI>
    <Abstract>Group or team formation has been a well-studied field in numerous contexts, such as business teams, project teams, and educational teams. There has, however, been little consideration of how groups or particularly project teams might have to be reorganized during a lecture in order to yield an optimal learning outcome. Empirical studies show that the outcome of groups will be affected by a number of factors, including the individual behavior of each group member, their skills and inclinations. In this research, the authors aim at finding correlations between the individual characteristics and learning outcomes during a running lecture so that teaching and learning can be improved. A study has been carried out that involved software engineering students over the past three years. The results show an improvement in the learning outcomes for groups that were systematically formed, which, for future settings, could enable educators as well as project leaders to systematically form groups and improve the outcomes of these groups in various domains.</Abstract>
    <Abstract_Length>163</Abstract_Length>
    <Author_Name>andreas bollin</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>adria airways</Affiliation_Name>
    <Author_Id>2442570616</Author_Id>
    <All_Authors>amir mujkanovic, andreas bollin</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402542647</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An empirical study of programming paradigms for animation</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897597</DOI>
    <Abstract>Animations are an essential part of many modern user interfaces. They are often defined programmatically, which allows for parametrization and reuse. Two programming paradigms to define animations are common: Procedural animation programming allows the developer to make explicit updates to object properties at each frame, allowing maximum control over behavior. Declarative animation programming allows the developer to specify keyframes, i.e., the value of an object's property at a given point in time. All frames between two keyframes are automatically interpolated by the animation library.   In this paper, we investigate how these common programming paradigms differ in terms of developers' productivity. In a controlled laboratory study, we asked developers to implement a set of simple animations using both paradigms. We found that developers can implement a given behavior faster using declarative animation programming, but the abstraction introduced by automatically creating the animation through keyframe interpolation left participants with unexpected behavior for some tasks.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>jan o borchers</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>rwth aachen university</Affiliation_Name>
    <Author_Id>2000480134</Author_Id>
    <All_Authors>jan o borchers, janpeter kramer, joel brandt, michael hennings</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402542647</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An empirical study of programming paradigms for animation</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897597</DOI>
    <Abstract>Animations are an essential part of many modern user interfaces. They are often defined programmatically, which allows for parametrization and reuse. Two programming paradigms to define animations are common: Procedural animation programming allows the developer to make explicit updates to object properties at each frame, allowing maximum control over behavior. Declarative animation programming allows the developer to specify keyframes, i.e., the value of an object's property at a given point in time. All frames between two keyframes are automatically interpolated by the animation library.   In this paper, we investigate how these common programming paradigms differ in terms of developers' productivity. In a controlled laboratory study, we asked developers to implement a set of simple animations using both paradigms. We found that developers can implement a given behavior faster using declarative animation programming, but the abstraction introduced by automatically creating the animation through keyframe interpolation left participants with unexpected behavior for some tasks.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>janpeter kramer</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>rwth aachen university</Affiliation_Name>
    <Author_Id>2106017177</Author_Id>
    <All_Authors>jan o borchers, janpeter kramer, joel brandt, michael hennings</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402542647</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An empirical study of programming paradigms for animation</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897597</DOI>
    <Abstract>Animations are an essential part of many modern user interfaces. They are often defined programmatically, which allows for parametrization and reuse. Two programming paradigms to define animations are common: Procedural animation programming allows the developer to make explicit updates to object properties at each frame, allowing maximum control over behavior. Declarative animation programming allows the developer to specify keyframes, i.e., the value of an object's property at a given point in time. All frames between two keyframes are automatically interpolated by the animation library.   In this paper, we investigate how these common programming paradigms differ in terms of developers' productivity. In a controlled laboratory study, we asked developers to implement a set of simple animations using both paradigms. We found that developers can implement a given behavior faster using declarative animation programming, but the abstraction introduced by automatically creating the animation through keyframe interpolation left participants with unexpected behavior for some tasks.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>joel brandt</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>adobe systems</Affiliation_Name>
    <Author_Id>2121327176</Author_Id>
    <All_Authors>jan o borchers, janpeter kramer, joel brandt, michael hennings</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402542647</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>An empirical study of programming paradigms for animation</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897597</DOI>
    <Abstract>Animations are an essential part of many modern user interfaces. They are often defined programmatically, which allows for parametrization and reuse. Two programming paradigms to define animations are common: Procedural animation programming allows the developer to make explicit updates to object properties at each frame, allowing maximum control over behavior. Declarative animation programming allows the developer to specify keyframes, i.e., the value of an object's property at a given point in time. All frames between two keyframes are automatically interpolated by the animation library.   In this paper, we investigate how these common programming paradigms differ in terms of developers' productivity. In a controlled laboratory study, we asked developers to implement a set of simple animations using both paradigms. We found that developers can implement a given behavior faster using declarative animation programming, but the abstraction introduced by automatically creating the animation through keyframe interpolation left participants with unexpected behavior for some tasks.</Abstract>
    <Abstract_Length>154</Abstract_Length>
    <Author_Name>michael hennings</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>rwth aachen university</Affiliation_Name>
    <Author_Id>2341573980</Author_Id>
    <All_Authors>jan o borchers, janpeter kramer, joel brandt, michael hennings</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402775416</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Useful statistical methods for human factors research in software engineering: a discussion on validation with quantitative data</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897588</DOI>
    <Abstract>In this paper we describe the usefulness of statistical validation techniques for human factors survey research. We need to investigate a diversity of validity aspects when creating metrics in human factors research, and we argue that the statistical tests used in other fields to get support for reliability and construct validity in surveys, should also be applied to human factors research in software engineering more often. We also show briefly how such methods can be applied (Test-Retest, Cronbach's ?, and Exploratory Factor Analysis).</Abstract>
    <Abstract_Length>83</Abstract_Length>
    <Author_Name>alfredo goldman</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of sao paulo</Affiliation_Name>
    <Author_Id>1957354411</Author_Id>
    <All_Authors>alfredo goldman, lucas gren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2402775416</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Useful statistical methods for human factors research in software engineering: a discussion on validation with quantitative data</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897588</DOI>
    <Abstract>In this paper we describe the usefulness of statistical validation techniques for human factors survey research. We need to investigate a diversity of validity aspects when creating metrics in human factors research, and we argue that the statistical tests used in other fields to get support for reliability and construct validity in surveys, should also be applied to human factors research in software engineering more often. We also show briefly how such methods can be applied (Test-Retest, Cronbach's ?, and Exploratory Factor Analysis).</Abstract>
    <Abstract_Length>83</Abstract_Length>
    <Author_Name>lucas gren</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of sao paulo</Affiliation_Name>
    <Author_Id>2500752603</Author_Id>
    <All_Authors>alfredo goldman, lucas gren</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404041551</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Do open projects "break the mirror"?: re-conceptualization of organizational configurations in open source software (OSS) production</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897593</DOI>
    <Abstract>The mirroring hypothesis predicts that loosely-coupled developers will develop a loosely-coupled software system. However, empirical studies have brought confusing results about the mirroring relationship in open source software (OSS) production: loosely-coupled OSS contributors have developed a tightly-coupled system, deviating from theoretical prediction, but are still successful. This study aims to provide better understanding about "breaking the mirror" in community-based OSS production in which there is no significant corporate participation. We propose it is not the mirroring hypothesis that is broken, but the manner in which we conceptualize and measure organizational configurations in OSS production.</Abstract>
    <Abstract_Length>94</Abstract_Length>
    <Author_Name>eunyoung moon</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of texas at austin</Affiliation_Name>
    <Author_Id>2137569964</Author_Id>
    <All_Authors>eunyoung moon, james howison</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404041551</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Do open projects "break the mirror"?: re-conceptualization of organizational configurations in open source software (OSS) production</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897593</DOI>
    <Abstract>The mirroring hypothesis predicts that loosely-coupled developers will develop a loosely-coupled software system. However, empirical studies have brought confusing results about the mirroring relationship in open source software (OSS) production: loosely-coupled OSS contributors have developed a tightly-coupled system, deviating from theoretical prediction, but are still successful. This study aims to provide better understanding about "breaking the mirror" in community-based OSS production in which there is no significant corporate participation. We propose it is not the mirroring hypothesis that is broken, but the manner in which we conceptualize and measure organizational configurations in OSS production.</Abstract>
    <Abstract_Length>94</Abstract_Length>
    <Author_Name>james howison</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of texas at austin</Affiliation_Name>
    <Author_Id>2144071775</Author_Id>
    <All_Authors>eunyoung moon, james howison</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>hironori washizaki</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>waseda university</Affiliation_Name>
    <Author_Id>38953562</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>yoshiaki fukazawa</Author_Name>
    <Author_Position>4</Author_Position>
    <Affiliation_Name>waseda university</Affiliation_Name>
    <Author_Id>1809897820</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>kiyoshi honda</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>waseda university</Affiliation_Name>
    <Author_Id>2096201235</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>kentarou ogawa</Author_Name>
    <Author_Position>5</Author_Position>
    <Affiliation_Name>yahoo</Affiliation_Name>
    <Author_Id>2226282036</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>masashi nakagawa</Author_Name>
    <Author_Position>8</Author_Position>
    <Affiliation_Name>yahoo</Affiliation_Name>
    <Author_Id>2318128761</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>tomoaki yagi</Author_Name>
    <Author_Position>6</Author_Position>
    <Affiliation_Name>yahoo</Affiliation_Name>
    <Author_Id>2404847391</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>mikako ishigaki</Author_Name>
    <Author_Position>7</Author_Position>
    <Affiliation_Name>yahoo</Affiliation_Name>
    <Author_Id>2406753147</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2404627741</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>GO-MUC: a strategy design method considering requirements of user and business by goal-oriented measurement</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897618</DOI>
    <Abstract>When developers operate a service, both the business objectives and users' requirements must be satisfied. However, the interest between a business strategy and an action for the users is often unclear. Moreover, users' requirements that are inferred from user data analysis may not correspond with users' real requirements. In this paper, we propose the GO-MUC method (Goal-oriented Measurement for Usability and Conflict) and apply it to Yahoo!Crowdsourcing. The GO-MUC method can develop a strategy considering requirements of both the user and the business. Our results validate this method; this method can find an interest between the business side and users side and plan more effective and user-friendly strategies to resolve a conflicting interest.</Abstract>
    <Abstract_Length>113</Abstract_Length>
    <Author_Name>chihiro uchida</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>waseda university</Affiliation_Name>
    <Author_Id>2406914576</Author_Id>
    <All_Authors>hironori washizaki, yoshiaki fukazawa, kiyoshi honda, kentarou ogawa, masashi nakagawa, tomoaki yagi, mikako ishigaki, chihiro uchida</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405702378</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Decision-making in software project management: a qualitative case study of a private organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897598</DOI>
    <Abstract>Context:  In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions.  Objective : To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management.  Method : Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach.  Results : We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases.  Conclusions : Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.</Abstract>
    <Abstract_Length>221</Abstract_Length>
    <Author_Name>jose adson oliveira guedes da cunha</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2131979546</Author_Id>
    <All_Authors>jose adson oliveira guedes da cunha, hermano perrelli de moura, francisco j s vasconcellos, fabio q b da silva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405702378</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Decision-making in software project management: a qualitative case study of a private organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897598</DOI>
    <Abstract>Context:  In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions.  Objective : To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management.  Method : Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach.  Results : We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases.  Conclusions : Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.</Abstract>
    <Abstract_Length>221</Abstract_Length>
    <Author_Name>hermano perrelli de moura</Author_Name>
    <Author_Position>3</Author_Position>
    <Author_Id>2143567907</Author_Id>
    <All_Authors>jose adson oliveira guedes da cunha, hermano perrelli de moura, francisco j s vasconcellos, fabio q b da silva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405702378</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Decision-making in software project management: a qualitative case study of a private organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897598</DOI>
    <Abstract>Context:  In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions.  Objective : To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management.  Method : Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach.  Results : We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases.  Conclusions : Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.</Abstract>
    <Abstract_Length>221</Abstract_Length>
    <Author_Name>francisco j s vasconcellos</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>2227689726</Author_Id>
    <All_Authors>jose adson oliveira guedes da cunha, hermano perrelli de moura, francisco j s vasconcellos, fabio q b da silva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405702378</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Decision-making in software project management: a qualitative case study of a private organization</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897598</DOI>
    <Abstract>Context:  In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions.  Objective : To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management.  Method : Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach.  Results : We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases.  Conclusions : Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.</Abstract>
    <Abstract_Length>221</Abstract_Length>
    <Author_Name>fabio q b da silva</Author_Name>
    <Author_Position>2</Author_Position>
    <Author_Id>2526321463</Author_Id>
    <All_Authors>jose adson oliveira guedes da cunha, hermano perrelli de moura, francisco j s vasconcellos, fabio q b da silva</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405738815</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>On the randori training dynamics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897603</DOI>
    <Abstract>Background:  Coding Dojo Randori is a collaborative practice of joint training (with discussion).  Objective:  Evaluate Randori training behaviors.  Method:  Qualitative data analysis of recordings of Randori sessions.  Results:  (1) The training may involve different levels of collaboration, from a task level to a concept level. (2) Randori can help novices via the interaction with more experienced developers.  Conclusion:  Suitable behavior and interactions of the developers in a Randori session can help to create an environment with valuable discussion on a specific software topic.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>rafael prikladnicki</Author_Name>
    <Author_Position>4</Author_Position>
    <Author_Id>35778973</Author_Id>
    <All_Authors>rafael prikladnicki, lutz prechelt, bernardo jose da silva estacio, franz zieris</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405738815</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>On the randori training dynamics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897603</DOI>
    <Abstract>Background:  Coding Dojo Randori is a collaborative practice of joint training (with discussion).  Objective:  Evaluate Randori training behaviors.  Method:  Qualitative data analysis of recordings of Randori sessions.  Results:  (1) The training may involve different levels of collaboration, from a task level to a concept level. (2) Randori can help novices via the interaction with more experienced developers.  Conclusion:  Suitable behavior and interactions of the developers in a Randori session can help to create an environment with valuable discussion on a specific software topic.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>lutz prechelt</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>328104153</Author_Id>
    <All_Authors>rafael prikladnicki, lutz prechelt, bernardo jose da silva estacio, franz zieris</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405738815</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>On the randori training dynamics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897603</DOI>
    <Abstract>Background:  Coding Dojo Randori is a collaborative practice of joint training (with discussion).  Objective:  Evaluate Randori training behaviors.  Method:  Qualitative data analysis of recordings of Randori sessions.  Results:  (1) The training may involve different levels of collaboration, from a task level to a concept level. (2) Randori can help novices via the interaction with more experienced developers.  Conclusion:  Suitable behavior and interactions of the developers in a Randori session can help to create an environment with valuable discussion on a specific software topic.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>bernardo jose da silva estacio</Author_Name>
    <Author_Position>1</Author_Position>
    <Author_Id>2064527634</Author_Id>
    <All_Authors>rafael prikladnicki, lutz prechelt, bernardo jose da silva estacio, franz zieris</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2405738815</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>On the randori training dynamics</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897603</DOI>
    <Abstract>Background:  Coding Dojo Randori is a collaborative practice of joint training (with discussion).  Objective:  Evaluate Randori training behaviors.  Method:  Qualitative data analysis of recordings of Randori sessions.  Results:  (1) The training may involve different levels of collaboration, from a task level to a concept level. (2) Randori can help novices via the interaction with more experienced developers.  Conclusion:  Suitable behavior and interactions of the developers in a Randori session can help to create an environment with valuable discussion on a specific software topic.</Abstract>
    <Abstract_Length>92</Abstract_Length>
    <Author_Name>franz zieris</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>free university of berlin</Affiliation_Name>
    <Author_Id>2228508368</Author_Id>
    <All_Authors>rafael prikladnicki, lutz prechelt, bernardo jose da silva estacio, franz zieris</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2406714832</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Does personality influence the usage of static analysis tools?: an explorative experiment</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897599</DOI>
    <Abstract>There are many techniques to improve software quality. One is using automatic static analysis tools. We have observed, however, that despite the low-cost help they offer, these tools are underused and often discourage beginners. There is evidence that personality traits influence the perceived usability of a software. Thus, to support beginners better, we need to understand how the workflow of people with different prevalent personality traits using these tools varies. For this purpose, we observed users' solution strategies and correlated them with their prevalent personality traits in an exploratory study with student participants within a controlled experiment. We gathered data by screen capturing and chat protocols as well as a Big Five personality traits test. We found strong correlations between particular personality traits and different strategies of removing the findings of static code analysis as well as between personality and tool utilization. Based on that, we offer take-away improvement suggestions. Our results imply that developers should be aware of these solution strategies and use this information to build tools that are more appealing to people with different prevalent personality traits.</Abstract>
    <Abstract_Length>180</Abstract_Length>
    <Author_Name>janpeter ostberg</Author_Name>
    <Author_Position>1</Author_Position>
    <Affiliation_Name>university of stuttgart</Affiliation_Name>
    <Author_Id>2146714078</Author_Id>
    <All_Authors>janpeter ostberg, stefan wagner, erica weilemann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2406714832</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Does personality influence the usage of static analysis tools?: an explorative experiment</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897599</DOI>
    <Abstract>There are many techniques to improve software quality. One is using automatic static analysis tools. We have observed, however, that despite the low-cost help they offer, these tools are underused and often discourage beginners. There is evidence that personality traits influence the perceived usability of a software. Thus, to support beginners better, we need to understand how the workflow of people with different prevalent personality traits using these tools varies. For this purpose, we observed users' solution strategies and correlated them with their prevalent personality traits in an exploratory study with student participants within a controlled experiment. We gathered data by screen capturing and chat protocols as well as a Big Five personality traits test. We found strong correlations between particular personality traits and different strategies of removing the findings of static code analysis as well as between personality and tool utilization. Based on that, we offer take-away improvement suggestions. Our results imply that developers should be aware of these solution strategies and use this information to build tools that are more appealing to people with different prevalent personality traits.</Abstract>
    <Abstract_Length>180</Abstract_Length>
    <Author_Name>stefan wagner</Author_Name>
    <Author_Position>2</Author_Position>
    <Affiliation_Name>university of stuttgart</Affiliation_Name>
    <Author_Id>2189929542</Author_Id>
    <All_Authors>janpeter ostberg, stefan wagner, erica weilemann</All_Authors>
  </Author_Publication>
  <Author_Publication>
    <Paper_API_Id>2406714832</Paper_API_Id>
    <Paper_Year>2016</Paper_Year>
    <Citations_Count>0</Citations_Count>
    <Display_Name>Does personality influence the usage of static analysis tools?: an explorative experiment</Display_Name>
    <Venue_Short_Name>ICSE</Venue_Short_Name>
    <DOI>10.1145/2897586.2897599</DOI>
    <Abstract>There are many techniques to improve software quality. One is using automatic static analysis tools. We have observed, however, that despite the low-cost help they offer, these tools are underused and often discourage beginners. There is evidence that personality traits influence the perceived usability of a software. Thus, to support beginners better, we need to understand how the workflow of people with different prevalent personality traits using these tools varies. For this purpose, we observed users' solution strategies and correlated them with their prevalent personality traits in an exploratory study with student participants within a controlled experiment. We gathered data by screen capturing and chat protocols as well as a Big Five personality traits test. We found strong correlations between particular personality traits and different strategies of removing the findings of static code analysis as well as between personality and tool utilization. Based on that, we offer take-away improvement suggestions. Our results imply that developers should be aware of these solution strategies and use this information to build tools that are more appealing to people with different prevalent personality traits.</Abstract>
    <Abstract_Length>180</Abstract_Length>
    <Author_Name>erica weilemann</Author_Name>
    <Author_Position>3</Author_Position>
    <Affiliation_Name>northeastern university</Affiliation_Name>
    <Author_Id>2295002707</Author_Id>
    <All_Authors>janpeter ostberg, stefan wagner, erica weilemann</All_Authors>
  </Author_Publication>
</Authors_Publications>